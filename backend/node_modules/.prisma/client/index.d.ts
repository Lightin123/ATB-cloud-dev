
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>
/**
 * Model Token
 * 
 */
export type Token = $Result.DefaultSelection<Prisma.$TokenPayload>
/**
 * Model RealEstateObject
 * 
 */
export type RealEstateObject = $Result.DefaultSelection<Prisma.$RealEstateObjectPayload>
/**
 * Model Amenity
 * 
 */
export type Amenity = $Result.DefaultSelection<Prisma.$AmenityPayload>
/**
 * Model AmenitiesOnRealEstate
 * 
 */
export type AmenitiesOnRealEstate = $Result.DefaultSelection<Prisma.$AmenitiesOnRealEstatePayload>
/**
 * Model Preference
 * 
 */
export type Preference = $Result.DefaultSelection<Prisma.$PreferencePayload>
/**
 * Model PreferencesOnRealEstate
 * 
 */
export type PreferencesOnRealEstate = $Result.DefaultSelection<Prisma.$PreferencesOnRealEstatePayload>
/**
 * Model Unit
 * 
 */
export type Unit = $Result.DefaultSelection<Prisma.$UnitPayload>
/**
 * Model Lease
 * 
 */
export type Lease = $Result.DefaultSelection<Prisma.$LeasePayload>
/**
 * Model LeasePaymentSchedule
 * 
 */
export type LeasePaymentSchedule = $Result.DefaultSelection<Prisma.$LeasePaymentSchedulePayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model MaintenanceRequest
 * 
 */
export type MaintenanceRequest = $Result.DefaultSelection<Prisma.$MaintenanceRequestPayload>
/**
 * Model Expense
 * 
 */
export type Expense = $Result.DefaultSelection<Prisma.$ExpensePayload>
/**
 * Model RentPayment
 * 
 */
export type RentPayment = $Result.DefaultSelection<Prisma.$RentPaymentPayload>
/**
 * Model ContactRequest
 * 
 */
export type ContactRequest = $Result.DefaultSelection<Prisma.$ContactRequestPayload>
/**
 * Model WhitelistedUser
 * 
 */
export type WhitelistedUser = $Result.DefaultSelection<Prisma.$WhitelistedUserPayload>
/**
 * Model Vendor
 * 
 */
export type Vendor = $Result.DefaultSelection<Prisma.$VendorPayload>
/**
 * Model LinkedRequest
 * 
 */
export type LinkedRequest = $Result.DefaultSelection<Prisma.$LinkedRequestPayload>
/**
 * Model OverwriteCode
 * 
 */
export type OverwriteCode = $Result.DefaultSelection<Prisma.$OverwriteCodePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  TENANT: 'TENANT',
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  GUEST: 'GUEST',
  REALTOR: 'REALTOR'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const AccountStatus: {
  INACTIVE: 'INACTIVE',
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE'
};

export type AccountStatus = (typeof AccountStatus)[keyof typeof AccountStatus]


export const RealEstateType: {
  SINGLE_FAMILY_HOME: 'SINGLE_FAMILY_HOME',
  MULTI_FAMILY_HOME: 'MULTI_FAMILY_HOME',
  CONDO: 'CONDO',
  APARTMENT: 'APARTMENT',
  TOWNHOUSE: 'TOWNHOUSE',
  LUXURY: 'LUXURY',
  OFFICE: 'OFFICE',
  RETAIL: 'RETAIL',
  INDUSTRIAL: 'INDUSTRIAL',
  LAND: 'LAND',
  FARM: 'FARM'
};

export type RealEstateType = (typeof RealEstateType)[keyof typeof RealEstateType]


export const ListingStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  RENTED: 'RENTED',
  NOT_RENTED: 'NOT_RENTED',
  RESERVED: 'RESERVED',
  SOLD: 'SOLD',
  PENDING: 'PENDING',
  UNKNOWN: 'UNKNOWN'
};

export type ListingStatus = (typeof ListingStatus)[keyof typeof ListingStatus]


export const CurrencyCode: {
  USD: 'USD',
  CAD: 'CAD',
  EUR: 'EUR',
  GBP: 'GBP',
  AUD: 'AUD',
  NZD: 'NZD',
  JPY: 'JPY',
  CNY: 'CNY',
  INR: 'INR',
  RUB: 'RUB',
  BRL: 'BRL',
  CHF: 'CHF',
  KRW: 'KRW',
  MXN: 'MXN',
  SGD: 'SGD',
  TRY: 'TRY',
  NGN: 'NGN',
  PHP: 'PHP',
  SEK: 'SEK',
  ARS: 'ARS',
  NOK: 'NOK',
  DKK: 'DKK',
  ILS: 'ILS',
  CLP: 'CLP',
  COP: 'COP',
  ZAR: 'ZAR',
  HKD: 'HKD',
  TWD: 'TWD',
  PLN: 'PLN',
  THB: 'THB',
  IDR: 'IDR',
  HUF: 'HUF',
  CZK: 'CZK',
  AED: 'AED',
  SAR: 'SAR',
  MYR: 'MYR',
  RON: 'RON',
  PEN: 'PEN',
  KWD: 'KWD',
  QAR: 'QAR',
  CRC: 'CRC',
  DOP: 'DOP',
  HRK: 'HRK',
  HNL: 'HNL',
  ISK: 'ISK',
  PKR: 'PKR',
  EGP: 'EGP',
  XCD: 'XCD',
  MAD: 'MAD',
  OMR: 'OMR',
  BOB: 'BOB',
  LKR: 'LKR',
  BGN: 'BGN',
  BHD: 'BHD',
  VND: 'VND',
  UAH: 'UAH',
  IQD: 'IQD',
  JOD: 'JOD',
  BDT: 'BDT',
  KES: 'KES',
  UYU: 'UYU',
  AZN: 'AZN',
  LBP: 'LBP',
  DZD: 'DZD',
  UZS: 'UZS',
  TND: 'TND',
  GHS: 'GHS',
  BWP: 'BWP',
  TZS: 'TZS',
  BYN: 'BYN',
  KZT: 'KZT',
  RSD: 'RSD',
  TTD: 'TTD',
  UGX: 'UGX',
  AOA: 'AOA',
  COPPER: 'COPPER',
  XAU: 'XAU',
  XAG: 'XAG',
  XPD: 'XPD',
  XPT: 'XPT',
  XDR: 'XDR',
  XOF: 'XOF',
  XPF: 'XPF',
  XAF: 'XAF',
  XFU: 'XFU',
  XBA: 'XBA',
  XBB: 'XBB',
  XBC: 'XBC',
  XBD: 'XBD',
  XTS: 'XTS',
  XXX: 'XXX',
  ZMW: 'ZMW'
};

export type CurrencyCode = (typeof CurrencyCode)[keyof typeof CurrencyCode]


export const CivilStatus: {
  SINGLE: 'SINGLE',
  MARRIED: 'MARRIED',
  DIVORCED: 'DIVORCED',
  WIDOWED: 'WIDOWED',
  SEPARATED: 'SEPARATED',
  OTHER: 'OTHER'
};

export type CivilStatus = (typeof CivilStatus)[keyof typeof CivilStatus]


export const LeaseStatus: {
  ACTIVE: 'ACTIVE',
  PENDING: 'PENDING',
  EXPIRED: 'EXPIRED',
  TERMINATED: 'TERMINATED'
};

export type LeaseStatus = (typeof LeaseStatus)[keyof typeof LeaseStatus]


export const PaymentFrequency: {
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  ANNUALLY: 'ANNUALLY',
  WEEKLY: 'WEEKLY'
};

export type PaymentFrequency = (typeof PaymentFrequency)[keyof typeof PaymentFrequency]


export const PaymentStatus: {
  PENDING: 'PENDING',
  REPORTED: 'REPORTED',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const PaymentScheduleStatus: {
  SCHEDULED: 'SCHEDULED',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  WAIVED: 'WAIVED'
};

export type PaymentScheduleStatus = (typeof PaymentScheduleStatus)[keyof typeof PaymentScheduleStatus]


export const TokenType: {
  API: 'API',
  EMAIL: 'EMAIL',
  PASSWORD_RESET: 'PASSWORD_RESET',
  EMAIL_CONFIRMATION: 'EMAIL_CONFIRMATION',
  EMAIL_CHANGE: 'EMAIL_CHANGE'
};

export type TokenType = (typeof TokenType)[keyof typeof TokenType]


export const AmenityCategory: {
  RECREATIONAL: 'RECREATIONAL',
  TECHNICAL: 'TECHNICAL',
  SERVICE: 'SERVICE',
  SAFETY: 'SAFETY',
  OTHER: 'OTHER'
};

export type AmenityCategory = (typeof AmenityCategory)[keyof typeof AmenityCategory]


export const Priority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const MaintenanceStatus: {
  REPORTED: 'REPORTED',
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  VENDOR_ASSIGNED: 'VENDOR_ASSIGNED',
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED'
};

export type MaintenanceStatus = (typeof MaintenanceStatus)[keyof typeof MaintenanceStatus]


export const DocumentType: {
  LEASE: 'LEASE',
  APPLICATION: 'APPLICATION',
  OTHER: 'OTHER',
  INVOICE: 'INVOICE',
  REPORT: 'REPORT'
};

export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type AccountStatus = $Enums.AccountStatus

export const AccountStatus: typeof $Enums.AccountStatus

export type RealEstateType = $Enums.RealEstateType

export const RealEstateType: typeof $Enums.RealEstateType

export type ListingStatus = $Enums.ListingStatus

export const ListingStatus: typeof $Enums.ListingStatus

export type CurrencyCode = $Enums.CurrencyCode

export const CurrencyCode: typeof $Enums.CurrencyCode

export type CivilStatus = $Enums.CivilStatus

export const CivilStatus: typeof $Enums.CivilStatus

export type LeaseStatus = $Enums.LeaseStatus

export const LeaseStatus: typeof $Enums.LeaseStatus

export type PaymentFrequency = $Enums.PaymentFrequency

export const PaymentFrequency: typeof $Enums.PaymentFrequency

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type PaymentScheduleStatus = $Enums.PaymentScheduleStatus

export const PaymentScheduleStatus: typeof $Enums.PaymentScheduleStatus

export type TokenType = $Enums.TokenType

export const TokenType: typeof $Enums.TokenType

export type AmenityCategory = $Enums.AmenityCategory

export const AmenityCategory: typeof $Enums.AmenityCategory

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

export type MaintenanceStatus = $Enums.MaintenanceStatus

export const MaintenanceStatus: typeof $Enums.MaintenanceStatus

export type DocumentType = $Enums.DocumentType

export const DocumentType: typeof $Enums.DocumentType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.realEstateObject`: Exposes CRUD operations for the **RealEstateObject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RealEstateObjects
    * const realEstateObjects = await prisma.realEstateObject.findMany()
    * ```
    */
  get realEstateObject(): Prisma.RealEstateObjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.amenity`: Exposes CRUD operations for the **Amenity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Amenities
    * const amenities = await prisma.amenity.findMany()
    * ```
    */
  get amenity(): Prisma.AmenityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.amenitiesOnRealEstate`: Exposes CRUD operations for the **AmenitiesOnRealEstate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AmenitiesOnRealEstates
    * const amenitiesOnRealEstates = await prisma.amenitiesOnRealEstate.findMany()
    * ```
    */
  get amenitiesOnRealEstate(): Prisma.AmenitiesOnRealEstateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.preference`: Exposes CRUD operations for the **Preference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Preferences
    * const preferences = await prisma.preference.findMany()
    * ```
    */
  get preference(): Prisma.PreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.preferencesOnRealEstate`: Exposes CRUD operations for the **PreferencesOnRealEstate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PreferencesOnRealEstates
    * const preferencesOnRealEstates = await prisma.preferencesOnRealEstate.findMany()
    * ```
    */
  get preferencesOnRealEstate(): Prisma.PreferencesOnRealEstateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.unit`: Exposes CRUD operations for the **Unit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Units
    * const units = await prisma.unit.findMany()
    * ```
    */
  get unit(): Prisma.UnitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lease`: Exposes CRUD operations for the **Lease** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leases
    * const leases = await prisma.lease.findMany()
    * ```
    */
  get lease(): Prisma.LeaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leasePaymentSchedule`: Exposes CRUD operations for the **LeasePaymentSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeasePaymentSchedules
    * const leasePaymentSchedules = await prisma.leasePaymentSchedule.findMany()
    * ```
    */
  get leasePaymentSchedule(): Prisma.LeasePaymentScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.maintenanceRequest`: Exposes CRUD operations for the **MaintenanceRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaintenanceRequests
    * const maintenanceRequests = await prisma.maintenanceRequest.findMany()
    * ```
    */
  get maintenanceRequest(): Prisma.MaintenanceRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expense`: Exposes CRUD operations for the **Expense** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Expenses
    * const expenses = await prisma.expense.findMany()
    * ```
    */
  get expense(): Prisma.ExpenseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rentPayment`: Exposes CRUD operations for the **RentPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RentPayments
    * const rentPayments = await prisma.rentPayment.findMany()
    * ```
    */
  get rentPayment(): Prisma.RentPaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contactRequest`: Exposes CRUD operations for the **ContactRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactRequests
    * const contactRequests = await prisma.contactRequest.findMany()
    * ```
    */
  get contactRequest(): Prisma.ContactRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.whitelistedUser`: Exposes CRUD operations for the **WhitelistedUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WhitelistedUsers
    * const whitelistedUsers = await prisma.whitelistedUser.findMany()
    * ```
    */
  get whitelistedUser(): Prisma.WhitelistedUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.linkedRequest`: Exposes CRUD operations for the **LinkedRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LinkedRequests
    * const linkedRequests = await prisma.linkedRequest.findMany()
    * ```
    */
  get linkedRequest(): Prisma.LinkedRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.overwriteCode`: Exposes CRUD operations for the **OverwriteCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OverwriteCodes
    * const overwriteCodes = await prisma.overwriteCode.findMany()
    * ```
    */
  get overwriteCode(): Prisma.OverwriteCodeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Tenant: 'Tenant',
    Token: 'Token',
    RealEstateObject: 'RealEstateObject',
    Amenity: 'Amenity',
    AmenitiesOnRealEstate: 'AmenitiesOnRealEstate',
    Preference: 'Preference',
    PreferencesOnRealEstate: 'PreferencesOnRealEstate',
    Unit: 'Unit',
    Lease: 'Lease',
    LeasePaymentSchedule: 'LeasePaymentSchedule',
    Image: 'Image',
    Document: 'Document',
    Message: 'Message',
    MaintenanceRequest: 'MaintenanceRequest',
    Expense: 'Expense',
    RentPayment: 'RentPayment',
    ContactRequest: 'ContactRequest',
    WhitelistedUser: 'WhitelistedUser',
    Vendor: 'Vendor',
    LinkedRequest: 'LinkedRequest',
    OverwriteCode: 'OverwriteCode'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "tenant" | "token" | "realEstateObject" | "amenity" | "amenitiesOnRealEstate" | "preference" | "preferencesOnRealEstate" | "unit" | "lease" | "leasePaymentSchedule" | "image" | "document" | "message" | "maintenanceRequest" | "expense" | "rentPayment" | "contactRequest" | "whitelistedUser" | "vendor" | "linkedRequest" | "overwriteCode"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TenantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
      Token: {
        payload: Prisma.$TokenPayload<ExtArgs>
        fields: Prisma.TokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findFirst: {
            args: Prisma.TokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findMany: {
            args: Prisma.TokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          create: {
            args: Prisma.TokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          createMany: {
            args: Prisma.TokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          delete: {
            args: Prisma.TokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          update: {
            args: Prisma.TokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          deleteMany: {
            args: Prisma.TokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          upsert: {
            args: Prisma.TokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          aggregate: {
            args: Prisma.TokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateToken>
          }
          groupBy: {
            args: Prisma.TokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenCountArgs<ExtArgs>
            result: $Utils.Optional<TokenCountAggregateOutputType> | number
          }
        }
      }
      RealEstateObject: {
        payload: Prisma.$RealEstateObjectPayload<ExtArgs>
        fields: Prisma.RealEstateObjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RealEstateObjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealEstateObjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RealEstateObjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealEstateObjectPayload>
          }
          findFirst: {
            args: Prisma.RealEstateObjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealEstateObjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RealEstateObjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealEstateObjectPayload>
          }
          findMany: {
            args: Prisma.RealEstateObjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealEstateObjectPayload>[]
          }
          create: {
            args: Prisma.RealEstateObjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealEstateObjectPayload>
          }
          createMany: {
            args: Prisma.RealEstateObjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RealEstateObjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealEstateObjectPayload>[]
          }
          delete: {
            args: Prisma.RealEstateObjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealEstateObjectPayload>
          }
          update: {
            args: Prisma.RealEstateObjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealEstateObjectPayload>
          }
          deleteMany: {
            args: Prisma.RealEstateObjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RealEstateObjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RealEstateObjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealEstateObjectPayload>[]
          }
          upsert: {
            args: Prisma.RealEstateObjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RealEstateObjectPayload>
          }
          aggregate: {
            args: Prisma.RealEstateObjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRealEstateObject>
          }
          groupBy: {
            args: Prisma.RealEstateObjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<RealEstateObjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.RealEstateObjectCountArgs<ExtArgs>
            result: $Utils.Optional<RealEstateObjectCountAggregateOutputType> | number
          }
        }
      }
      Amenity: {
        payload: Prisma.$AmenityPayload<ExtArgs>
        fields: Prisma.AmenityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AmenityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AmenityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          findFirst: {
            args: Prisma.AmenityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AmenityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          findMany: {
            args: Prisma.AmenityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>[]
          }
          create: {
            args: Prisma.AmenityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          createMany: {
            args: Prisma.AmenityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AmenityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>[]
          }
          delete: {
            args: Prisma.AmenityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          update: {
            args: Prisma.AmenityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          deleteMany: {
            args: Prisma.AmenityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AmenityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AmenityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>[]
          }
          upsert: {
            args: Prisma.AmenityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          aggregate: {
            args: Prisma.AmenityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAmenity>
          }
          groupBy: {
            args: Prisma.AmenityGroupByArgs<ExtArgs>
            result: $Utils.Optional<AmenityGroupByOutputType>[]
          }
          count: {
            args: Prisma.AmenityCountArgs<ExtArgs>
            result: $Utils.Optional<AmenityCountAggregateOutputType> | number
          }
        }
      }
      AmenitiesOnRealEstate: {
        payload: Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>
        fields: Prisma.AmenitiesOnRealEstateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AmenitiesOnRealEstateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenitiesOnRealEstatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AmenitiesOnRealEstateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenitiesOnRealEstatePayload>
          }
          findFirst: {
            args: Prisma.AmenitiesOnRealEstateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenitiesOnRealEstatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AmenitiesOnRealEstateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenitiesOnRealEstatePayload>
          }
          findMany: {
            args: Prisma.AmenitiesOnRealEstateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenitiesOnRealEstatePayload>[]
          }
          create: {
            args: Prisma.AmenitiesOnRealEstateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenitiesOnRealEstatePayload>
          }
          createMany: {
            args: Prisma.AmenitiesOnRealEstateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AmenitiesOnRealEstateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenitiesOnRealEstatePayload>[]
          }
          delete: {
            args: Prisma.AmenitiesOnRealEstateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenitiesOnRealEstatePayload>
          }
          update: {
            args: Prisma.AmenitiesOnRealEstateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenitiesOnRealEstatePayload>
          }
          deleteMany: {
            args: Prisma.AmenitiesOnRealEstateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AmenitiesOnRealEstateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AmenitiesOnRealEstateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenitiesOnRealEstatePayload>[]
          }
          upsert: {
            args: Prisma.AmenitiesOnRealEstateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenitiesOnRealEstatePayload>
          }
          aggregate: {
            args: Prisma.AmenitiesOnRealEstateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAmenitiesOnRealEstate>
          }
          groupBy: {
            args: Prisma.AmenitiesOnRealEstateGroupByArgs<ExtArgs>
            result: $Utils.Optional<AmenitiesOnRealEstateGroupByOutputType>[]
          }
          count: {
            args: Prisma.AmenitiesOnRealEstateCountArgs<ExtArgs>
            result: $Utils.Optional<AmenitiesOnRealEstateCountAggregateOutputType> | number
          }
        }
      }
      Preference: {
        payload: Prisma.$PreferencePayload<ExtArgs>
        fields: Prisma.PreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          findFirst: {
            args: Prisma.PreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          findMany: {
            args: Prisma.PreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>[]
          }
          create: {
            args: Prisma.PreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          createMany: {
            args: Prisma.PreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>[]
          }
          delete: {
            args: Prisma.PreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          update: {
            args: Prisma.PreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          deleteMany: {
            args: Prisma.PreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>[]
          }
          upsert: {
            args: Prisma.PreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          aggregate: {
            args: Prisma.PreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreference>
          }
          groupBy: {
            args: Prisma.PreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<PreferenceCountAggregateOutputType> | number
          }
        }
      }
      PreferencesOnRealEstate: {
        payload: Prisma.$PreferencesOnRealEstatePayload<ExtArgs>
        fields: Prisma.PreferencesOnRealEstateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreferencesOnRealEstateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesOnRealEstatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreferencesOnRealEstateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesOnRealEstatePayload>
          }
          findFirst: {
            args: Prisma.PreferencesOnRealEstateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesOnRealEstatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreferencesOnRealEstateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesOnRealEstatePayload>
          }
          findMany: {
            args: Prisma.PreferencesOnRealEstateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesOnRealEstatePayload>[]
          }
          create: {
            args: Prisma.PreferencesOnRealEstateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesOnRealEstatePayload>
          }
          createMany: {
            args: Prisma.PreferencesOnRealEstateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreferencesOnRealEstateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesOnRealEstatePayload>[]
          }
          delete: {
            args: Prisma.PreferencesOnRealEstateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesOnRealEstatePayload>
          }
          update: {
            args: Prisma.PreferencesOnRealEstateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesOnRealEstatePayload>
          }
          deleteMany: {
            args: Prisma.PreferencesOnRealEstateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreferencesOnRealEstateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PreferencesOnRealEstateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesOnRealEstatePayload>[]
          }
          upsert: {
            args: Prisma.PreferencesOnRealEstateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesOnRealEstatePayload>
          }
          aggregate: {
            args: Prisma.PreferencesOnRealEstateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreferencesOnRealEstate>
          }
          groupBy: {
            args: Prisma.PreferencesOnRealEstateGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreferencesOnRealEstateGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreferencesOnRealEstateCountArgs<ExtArgs>
            result: $Utils.Optional<PreferencesOnRealEstateCountAggregateOutputType> | number
          }
        }
      }
      Unit: {
        payload: Prisma.$UnitPayload<ExtArgs>
        fields: Prisma.UnitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UnitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UnitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          findFirst: {
            args: Prisma.UnitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UnitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          findMany: {
            args: Prisma.UnitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>[]
          }
          create: {
            args: Prisma.UnitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          createMany: {
            args: Prisma.UnitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UnitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>[]
          }
          delete: {
            args: Prisma.UnitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          update: {
            args: Prisma.UnitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          deleteMany: {
            args: Prisma.UnitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UnitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UnitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>[]
          }
          upsert: {
            args: Prisma.UnitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          aggregate: {
            args: Prisma.UnitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUnit>
          }
          groupBy: {
            args: Prisma.UnitGroupByArgs<ExtArgs>
            result: $Utils.Optional<UnitGroupByOutputType>[]
          }
          count: {
            args: Prisma.UnitCountArgs<ExtArgs>
            result: $Utils.Optional<UnitCountAggregateOutputType> | number
          }
        }
      }
      Lease: {
        payload: Prisma.$LeasePayload<ExtArgs>
        fields: Prisma.LeaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePayload>
          }
          findFirst: {
            args: Prisma.LeaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePayload>
          }
          findMany: {
            args: Prisma.LeaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePayload>[]
          }
          create: {
            args: Prisma.LeaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePayload>
          }
          createMany: {
            args: Prisma.LeaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePayload>[]
          }
          delete: {
            args: Prisma.LeaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePayload>
          }
          update: {
            args: Prisma.LeaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePayload>
          }
          deleteMany: {
            args: Prisma.LeaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePayload>[]
          }
          upsert: {
            args: Prisma.LeaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePayload>
          }
          aggregate: {
            args: Prisma.LeaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLease>
          }
          groupBy: {
            args: Prisma.LeaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaseCountArgs<ExtArgs>
            result: $Utils.Optional<LeaseCountAggregateOutputType> | number
          }
        }
      }
      LeasePaymentSchedule: {
        payload: Prisma.$LeasePaymentSchedulePayload<ExtArgs>
        fields: Prisma.LeasePaymentScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeasePaymentScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePaymentSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeasePaymentScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePaymentSchedulePayload>
          }
          findFirst: {
            args: Prisma.LeasePaymentScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePaymentSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeasePaymentScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePaymentSchedulePayload>
          }
          findMany: {
            args: Prisma.LeasePaymentScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePaymentSchedulePayload>[]
          }
          create: {
            args: Prisma.LeasePaymentScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePaymentSchedulePayload>
          }
          createMany: {
            args: Prisma.LeasePaymentScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeasePaymentScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePaymentSchedulePayload>[]
          }
          delete: {
            args: Prisma.LeasePaymentScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePaymentSchedulePayload>
          }
          update: {
            args: Prisma.LeasePaymentScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePaymentSchedulePayload>
          }
          deleteMany: {
            args: Prisma.LeasePaymentScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeasePaymentScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeasePaymentScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePaymentSchedulePayload>[]
          }
          upsert: {
            args: Prisma.LeasePaymentScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeasePaymentSchedulePayload>
          }
          aggregate: {
            args: Prisma.LeasePaymentScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeasePaymentSchedule>
          }
          groupBy: {
            args: Prisma.LeasePaymentScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeasePaymentScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeasePaymentScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<LeasePaymentScheduleCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      MaintenanceRequest: {
        payload: Prisma.$MaintenanceRequestPayload<ExtArgs>
        fields: Prisma.MaintenanceRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaintenanceRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaintenanceRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRequestPayload>
          }
          findFirst: {
            args: Prisma.MaintenanceRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaintenanceRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRequestPayload>
          }
          findMany: {
            args: Prisma.MaintenanceRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRequestPayload>[]
          }
          create: {
            args: Prisma.MaintenanceRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRequestPayload>
          }
          createMany: {
            args: Prisma.MaintenanceRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaintenanceRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRequestPayload>[]
          }
          delete: {
            args: Prisma.MaintenanceRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRequestPayload>
          }
          update: {
            args: Prisma.MaintenanceRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRequestPayload>
          }
          deleteMany: {
            args: Prisma.MaintenanceRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaintenanceRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaintenanceRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRequestPayload>[]
          }
          upsert: {
            args: Prisma.MaintenanceRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceRequestPayload>
          }
          aggregate: {
            args: Prisma.MaintenanceRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaintenanceRequest>
          }
          groupBy: {
            args: Prisma.MaintenanceRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaintenanceRequestCountArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceRequestCountAggregateOutputType> | number
          }
        }
      }
      Expense: {
        payload: Prisma.$ExpensePayload<ExtArgs>
        fields: Prisma.ExpenseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExpenseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExpenseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          findFirst: {
            args: Prisma.ExpenseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExpenseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          findMany: {
            args: Prisma.ExpenseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>[]
          }
          create: {
            args: Prisma.ExpenseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          createMany: {
            args: Prisma.ExpenseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExpenseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>[]
          }
          delete: {
            args: Prisma.ExpenseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          update: {
            args: Prisma.ExpenseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          deleteMany: {
            args: Prisma.ExpenseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExpenseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExpenseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>[]
          }
          upsert: {
            args: Prisma.ExpenseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensePayload>
          }
          aggregate: {
            args: Prisma.ExpenseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpense>
          }
          groupBy: {
            args: Prisma.ExpenseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExpenseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExpenseCountArgs<ExtArgs>
            result: $Utils.Optional<ExpenseCountAggregateOutputType> | number
          }
        }
      }
      RentPayment: {
        payload: Prisma.$RentPaymentPayload<ExtArgs>
        fields: Prisma.RentPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RentPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RentPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentPaymentPayload>
          }
          findFirst: {
            args: Prisma.RentPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RentPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentPaymentPayload>
          }
          findMany: {
            args: Prisma.RentPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentPaymentPayload>[]
          }
          create: {
            args: Prisma.RentPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentPaymentPayload>
          }
          createMany: {
            args: Prisma.RentPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RentPaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentPaymentPayload>[]
          }
          delete: {
            args: Prisma.RentPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentPaymentPayload>
          }
          update: {
            args: Prisma.RentPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentPaymentPayload>
          }
          deleteMany: {
            args: Prisma.RentPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RentPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RentPaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentPaymentPayload>[]
          }
          upsert: {
            args: Prisma.RentPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentPaymentPayload>
          }
          aggregate: {
            args: Prisma.RentPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRentPayment>
          }
          groupBy: {
            args: Prisma.RentPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<RentPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.RentPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<RentPaymentCountAggregateOutputType> | number
          }
        }
      }
      ContactRequest: {
        payload: Prisma.$ContactRequestPayload<ExtArgs>
        fields: Prisma.ContactRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          findFirst: {
            args: Prisma.ContactRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          findMany: {
            args: Prisma.ContactRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>[]
          }
          create: {
            args: Prisma.ContactRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          createMany: {
            args: Prisma.ContactRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>[]
          }
          delete: {
            args: Prisma.ContactRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          update: {
            args: Prisma.ContactRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          deleteMany: {
            args: Prisma.ContactRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>[]
          }
          upsert: {
            args: Prisma.ContactRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactRequestPayload>
          }
          aggregate: {
            args: Prisma.ContactRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactRequest>
          }
          groupBy: {
            args: Prisma.ContactRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactRequestCountArgs<ExtArgs>
            result: $Utils.Optional<ContactRequestCountAggregateOutputType> | number
          }
        }
      }
      WhitelistedUser: {
        payload: Prisma.$WhitelistedUserPayload<ExtArgs>
        fields: Prisma.WhitelistedUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WhitelistedUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WhitelistedUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WhitelistedUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WhitelistedUserPayload>
          }
          findFirst: {
            args: Prisma.WhitelistedUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WhitelistedUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WhitelistedUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WhitelistedUserPayload>
          }
          findMany: {
            args: Prisma.WhitelistedUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WhitelistedUserPayload>[]
          }
          create: {
            args: Prisma.WhitelistedUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WhitelistedUserPayload>
          }
          createMany: {
            args: Prisma.WhitelistedUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WhitelistedUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WhitelistedUserPayload>[]
          }
          delete: {
            args: Prisma.WhitelistedUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WhitelistedUserPayload>
          }
          update: {
            args: Prisma.WhitelistedUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WhitelistedUserPayload>
          }
          deleteMany: {
            args: Prisma.WhitelistedUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WhitelistedUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WhitelistedUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WhitelistedUserPayload>[]
          }
          upsert: {
            args: Prisma.WhitelistedUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WhitelistedUserPayload>
          }
          aggregate: {
            args: Prisma.WhitelistedUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWhitelistedUser>
          }
          groupBy: {
            args: Prisma.WhitelistedUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<WhitelistedUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.WhitelistedUserCountArgs<ExtArgs>
            result: $Utils.Optional<WhitelistedUserCountAggregateOutputType> | number
          }
        }
      }
      Vendor: {
        payload: Prisma.$VendorPayload<ExtArgs>
        fields: Prisma.VendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findFirst: {
            args: Prisma.VendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findMany: {
            args: Prisma.VendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          create: {
            args: Prisma.VendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          createMany: {
            args: Prisma.VendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VendorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          delete: {
            args: Prisma.VendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          update: {
            args: Prisma.VendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          deleteMany: {
            args: Prisma.VendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VendorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          upsert: {
            args: Prisma.VendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          aggregate: {
            args: Prisma.VendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendor>
          }
          groupBy: {
            args: Prisma.VendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendorCountArgs<ExtArgs>
            result: $Utils.Optional<VendorCountAggregateOutputType> | number
          }
        }
      }
      LinkedRequest: {
        payload: Prisma.$LinkedRequestPayload<ExtArgs>
        fields: Prisma.LinkedRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LinkedRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkedRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LinkedRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkedRequestPayload>
          }
          findFirst: {
            args: Prisma.LinkedRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkedRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LinkedRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkedRequestPayload>
          }
          findMany: {
            args: Prisma.LinkedRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkedRequestPayload>[]
          }
          create: {
            args: Prisma.LinkedRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkedRequestPayload>
          }
          createMany: {
            args: Prisma.LinkedRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LinkedRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkedRequestPayload>[]
          }
          delete: {
            args: Prisma.LinkedRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkedRequestPayload>
          }
          update: {
            args: Prisma.LinkedRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkedRequestPayload>
          }
          deleteMany: {
            args: Prisma.LinkedRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LinkedRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LinkedRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkedRequestPayload>[]
          }
          upsert: {
            args: Prisma.LinkedRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkedRequestPayload>
          }
          aggregate: {
            args: Prisma.LinkedRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLinkedRequest>
          }
          groupBy: {
            args: Prisma.LinkedRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<LinkedRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.LinkedRequestCountArgs<ExtArgs>
            result: $Utils.Optional<LinkedRequestCountAggregateOutputType> | number
          }
        }
      }
      OverwriteCode: {
        payload: Prisma.$OverwriteCodePayload<ExtArgs>
        fields: Prisma.OverwriteCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OverwriteCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverwriteCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OverwriteCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverwriteCodePayload>
          }
          findFirst: {
            args: Prisma.OverwriteCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverwriteCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OverwriteCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverwriteCodePayload>
          }
          findMany: {
            args: Prisma.OverwriteCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverwriteCodePayload>[]
          }
          create: {
            args: Prisma.OverwriteCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverwriteCodePayload>
          }
          createMany: {
            args: Prisma.OverwriteCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OverwriteCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverwriteCodePayload>[]
          }
          delete: {
            args: Prisma.OverwriteCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverwriteCodePayload>
          }
          update: {
            args: Prisma.OverwriteCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverwriteCodePayload>
          }
          deleteMany: {
            args: Prisma.OverwriteCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OverwriteCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OverwriteCodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverwriteCodePayload>[]
          }
          upsert: {
            args: Prisma.OverwriteCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OverwriteCodePayload>
          }
          aggregate: {
            args: Prisma.OverwriteCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOverwriteCode>
          }
          groupBy: {
            args: Prisma.OverwriteCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<OverwriteCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.OverwriteCodeCountArgs<ExtArgs>
            result: $Utils.Optional<OverwriteCodeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    tenant?: TenantOmit
    token?: TokenOmit
    realEstateObject?: RealEstateObjectOmit
    amenity?: AmenityOmit
    amenitiesOnRealEstate?: AmenitiesOnRealEstateOmit
    preference?: PreferenceOmit
    preferencesOnRealEstate?: PreferencesOnRealEstateOmit
    unit?: UnitOmit
    lease?: LeaseOmit
    leasePaymentSchedule?: LeasePaymentScheduleOmit
    image?: ImageOmit
    document?: DocumentOmit
    message?: MessageOmit
    maintenanceRequest?: MaintenanceRequestOmit
    expense?: ExpenseOmit
    rentPayment?: RentPaymentOmit
    contactRequest?: ContactRequestOmit
    whitelistedUser?: WhitelistedUserOmit
    vendor?: VendorOmit
    linkedRequest?: LinkedRequestOmit
    overwriteCode?: OverwriteCodeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    tokens: number
    documents: number
    images: number
    sentMessages: number
    receivedMessages: number
    maintenanceRequests: number
    ownedUnits: number
    usedCodes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tokens?: boolean | UserCountOutputTypeCountTokensArgs
    documents?: boolean | UserCountOutputTypeCountDocumentsArgs
    images?: boolean | UserCountOutputTypeCountImagesArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    receivedMessages?: boolean | UserCountOutputTypeCountReceivedMessagesArgs
    maintenanceRequests?: boolean | UserCountOutputTypeCountMaintenanceRequestsArgs
    ownedUnits?: boolean | UserCountOutputTypeCountOwnedUnitsArgs
    usedCodes?: boolean | UserCountOutputTypeCountUsedCodesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMaintenanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedUnitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUsedCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OverwriteCodeWhereInput
  }


  /**
   * Count Type TenantCountOutputType
   */

  export type TenantCountOutputType = {
    leases: number
    maintenanceRequests: number
    rentPayments: number
    unit: number
    MaintenanceRequest: number
  }

  export type TenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leases?: boolean | TenantCountOutputTypeCountLeasesArgs
    maintenanceRequests?: boolean | TenantCountOutputTypeCountMaintenanceRequestsArgs
    rentPayments?: boolean | TenantCountOutputTypeCountRentPaymentsArgs
    unit?: boolean | TenantCountOutputTypeCountUnitArgs
    MaintenanceRequest?: boolean | TenantCountOutputTypeCountMaintenanceRequestArgs
  }

  // Custom InputTypes
  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountLeasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaseWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountMaintenanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceRequestWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountRentPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentPaymentWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountUnitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountMaintenanceRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceRequestWhereInput
  }


  /**
   * Count Type RealEstateObjectCountOutputType
   */

  export type RealEstateObjectCountOutputType = {
    images: number
    amenities: number
    preferences: number
    documents: number
    units: number
  }

  export type RealEstateObjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | RealEstateObjectCountOutputTypeCountImagesArgs
    amenities?: boolean | RealEstateObjectCountOutputTypeCountAmenitiesArgs
    preferences?: boolean | RealEstateObjectCountOutputTypeCountPreferencesArgs
    documents?: boolean | RealEstateObjectCountOutputTypeCountDocumentsArgs
    units?: boolean | RealEstateObjectCountOutputTypeCountUnitsArgs
  }

  // Custom InputTypes
  /**
   * RealEstateObjectCountOutputType without action
   */
  export type RealEstateObjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObjectCountOutputType
     */
    select?: RealEstateObjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RealEstateObjectCountOutputType without action
   */
  export type RealEstateObjectCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
  }

  /**
   * RealEstateObjectCountOutputType without action
   */
  export type RealEstateObjectCountOutputTypeCountAmenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmenitiesOnRealEstateWhereInput
  }

  /**
   * RealEstateObjectCountOutputType without action
   */
  export type RealEstateObjectCountOutputTypeCountPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferencesOnRealEstateWhereInput
  }

  /**
   * RealEstateObjectCountOutputType without action
   */
  export type RealEstateObjectCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * RealEstateObjectCountOutputType without action
   */
  export type RealEstateObjectCountOutputTypeCountUnitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitWhereInput
  }


  /**
   * Count Type AmenityCountOutputType
   */

  export type AmenityCountOutputType = {
    realEstateObjects: number
  }

  export type AmenityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    realEstateObjects?: boolean | AmenityCountOutputTypeCountRealEstateObjectsArgs
  }

  // Custom InputTypes
  /**
   * AmenityCountOutputType without action
   */
  export type AmenityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenityCountOutputType
     */
    select?: AmenityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AmenityCountOutputType without action
   */
  export type AmenityCountOutputTypeCountRealEstateObjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmenitiesOnRealEstateWhereInput
  }


  /**
   * Count Type PreferenceCountOutputType
   */

  export type PreferenceCountOutputType = {
    realEstateObjects: number
  }

  export type PreferenceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    realEstateObjects?: boolean | PreferenceCountOutputTypeCountRealEstateObjectsArgs
  }

  // Custom InputTypes
  /**
   * PreferenceCountOutputType without action
   */
  export type PreferenceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferenceCountOutputType
     */
    select?: PreferenceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PreferenceCountOutputType without action
   */
  export type PreferenceCountOutputTypeCountRealEstateObjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferencesOnRealEstateWhereInput
  }


  /**
   * Count Type UnitCountOutputType
   */

  export type UnitCountOutputType = {
    amenities: number
    documents: number
    images: number
    maintenanceRequests: number
    leases: number
    expenses: number
    owners: number
    overwriteCodes: number
  }

  export type UnitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenities?: boolean | UnitCountOutputTypeCountAmenitiesArgs
    documents?: boolean | UnitCountOutputTypeCountDocumentsArgs
    images?: boolean | UnitCountOutputTypeCountImagesArgs
    maintenanceRequests?: boolean | UnitCountOutputTypeCountMaintenanceRequestsArgs
    leases?: boolean | UnitCountOutputTypeCountLeasesArgs
    expenses?: boolean | UnitCountOutputTypeCountExpensesArgs
    owners?: boolean | UnitCountOutputTypeCountOwnersArgs
    overwriteCodes?: boolean | UnitCountOutputTypeCountOverwriteCodesArgs
  }

  // Custom InputTypes
  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitCountOutputType
     */
    select?: UnitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountAmenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmenitiesOnRealEstateWhereInput
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountMaintenanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceRequestWhereInput
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountLeasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaseWhereInput
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseWhereInput
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountOwnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountOverwriteCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OverwriteCodeWhereInput
  }


  /**
   * Count Type LeaseCountOutputType
   */

  export type LeaseCountOutputType = {
    documents: number
    expenses: number
    rentPayments: number
    paymentSchedule: number
  }

  export type LeaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | LeaseCountOutputTypeCountDocumentsArgs
    expenses?: boolean | LeaseCountOutputTypeCountExpensesArgs
    rentPayments?: boolean | LeaseCountOutputTypeCountRentPaymentsArgs
    paymentSchedule?: boolean | LeaseCountOutputTypeCountPaymentScheduleArgs
  }

  // Custom InputTypes
  /**
   * LeaseCountOutputType without action
   */
  export type LeaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaseCountOutputType
     */
    select?: LeaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeaseCountOutputType without action
   */
  export type LeaseCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * LeaseCountOutputType without action
   */
  export type LeaseCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseWhereInput
  }

  /**
   * LeaseCountOutputType without action
   */
  export type LeaseCountOutputTypeCountRentPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentPaymentWhereInput
  }

  /**
   * LeaseCountOutputType without action
   */
  export type LeaseCountOutputTypeCountPaymentScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeasePaymentScheduleWhereInput
  }


  /**
   * Count Type MaintenanceRequestCountOutputType
   */

  export type MaintenanceRequestCountOutputType = {
    expenses: number
    linkedAsA: number
    linkedAsB: number
  }

  export type MaintenanceRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    expenses?: boolean | MaintenanceRequestCountOutputTypeCountExpensesArgs
    linkedAsA?: boolean | MaintenanceRequestCountOutputTypeCountLinkedAsAArgs
    linkedAsB?: boolean | MaintenanceRequestCountOutputTypeCountLinkedAsBArgs
  }

  // Custom InputTypes
  /**
   * MaintenanceRequestCountOutputType without action
   */
  export type MaintenanceRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequestCountOutputType
     */
    select?: MaintenanceRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MaintenanceRequestCountOutputType without action
   */
  export type MaintenanceRequestCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseWhereInput
  }

  /**
   * MaintenanceRequestCountOutputType without action
   */
  export type MaintenanceRequestCountOutputTypeCountLinkedAsAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LinkedRequestWhereInput
  }

  /**
   * MaintenanceRequestCountOutputType without action
   */
  export type MaintenanceRequestCountOutputTypeCountLinkedAsBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LinkedRequestWhereInput
  }


  /**
   * Count Type VendorCountOutputType
   */

  export type VendorCountOutputType = {
    requests: number
  }

  export type VendorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requests?: boolean | VendorCountOutputTypeCountRequestsArgs
  }

  // Custom InputTypes
  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorCountOutputType
     */
    select?: VendorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceRequestWhereInput
  }


  /**
   * Count Type OverwriteCodeCountOutputType
   */

  export type OverwriteCodeCountOutputType = {
    units: number
  }

  export type OverwriteCodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    units?: boolean | OverwriteCodeCountOutputTypeCountUnitsArgs
  }

  // Custom InputTypes
  /**
   * OverwriteCodeCountOutputType without action
   */
  export type OverwriteCodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCodeCountOutputType
     */
    select?: OverwriteCodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OverwriteCodeCountOutputType without action
   */
  export type OverwriteCodeCountOutputTypeCountUnitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    firstName: string | null
    lastName: string | null
    name: string | null
    dob: Date | null
    currencyCode: $Enums.CurrencyCode | null
    password: string | null
    salt: string | null
    plaidLinkToken: string | null
    title: string | null
    avatar: string | null
    phone: string | null
    website: string | null
    company: string | null
    bio: string | null
    status: $Enums.AccountStatus | null
    role: $Enums.UserRole | null
    street: string | null
    city: string | null
    state: string | null
    zip: string | null
    country: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    firstName: string | null
    lastName: string | null
    name: string | null
    dob: Date | null
    currencyCode: $Enums.CurrencyCode | null
    password: string | null
    salt: string | null
    plaidLinkToken: string | null
    title: string | null
    avatar: string | null
    phone: string | null
    website: string | null
    company: string | null
    bio: string | null
    status: $Enums.AccountStatus | null
    role: $Enums.UserRole | null
    street: string | null
    city: string | null
    state: string | null
    zip: string | null
    country: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    firstName: number
    lastName: number
    name: number
    dob: number
    currencyCode: number
    password: number
    salt: number
    plaidLinkToken: number
    title: number
    avatar: number
    phone: number
    website: number
    company: number
    bio: number
    status: number
    role: number
    street: number
    city: number
    state: number
    zip: number
    country: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    firstName?: true
    lastName?: true
    name?: true
    dob?: true
    currencyCode?: true
    password?: true
    salt?: true
    plaidLinkToken?: true
    title?: true
    avatar?: true
    phone?: true
    website?: true
    company?: true
    bio?: true
    status?: true
    role?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    country?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    firstName?: true
    lastName?: true
    name?: true
    dob?: true
    currencyCode?: true
    password?: true
    salt?: true
    plaidLinkToken?: true
    title?: true
    avatar?: true
    phone?: true
    website?: true
    company?: true
    bio?: true
    status?: true
    role?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    country?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    firstName?: true
    lastName?: true
    name?: true
    dob?: true
    currencyCode?: true
    password?: true
    salt?: true
    plaidLinkToken?: true
    title?: true
    avatar?: true
    phone?: true
    website?: true
    company?: true
    bio?: true
    status?: true
    role?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    country?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    email: string
    firstName: string | null
    lastName: string | null
    name: string | null
    dob: Date | null
    currencyCode: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken: string | null
    title: string | null
    avatar: string | null
    phone: string | null
    website: string | null
    company: string | null
    bio: string | null
    status: $Enums.AccountStatus
    role: $Enums.UserRole | null
    street: string | null
    city: string | null
    state: string | null
    zip: string | null
    country: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    name?: boolean
    dob?: boolean
    currencyCode?: boolean
    password?: boolean
    salt?: boolean
    plaidLinkToken?: boolean
    title?: boolean
    avatar?: boolean
    phone?: boolean
    website?: boolean
    company?: boolean
    bio?: boolean
    status?: boolean
    role?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
    tokens?: boolean | User$tokensArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    images?: boolean | User$imagesArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | User$receivedMessagesArgs<ExtArgs>
    tenant?: boolean | User$tenantArgs<ExtArgs>
    maintenanceRequests?: boolean | User$maintenanceRequestsArgs<ExtArgs>
    ownedUnits?: boolean | User$ownedUnitsArgs<ExtArgs>
    usedCodes?: boolean | User$usedCodesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    name?: boolean
    dob?: boolean
    currencyCode?: boolean
    password?: boolean
    salt?: boolean
    plaidLinkToken?: boolean
    title?: boolean
    avatar?: boolean
    phone?: boolean
    website?: boolean
    company?: boolean
    bio?: boolean
    status?: boolean
    role?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    name?: boolean
    dob?: boolean
    currencyCode?: boolean
    password?: boolean
    salt?: boolean
    plaidLinkToken?: boolean
    title?: boolean
    avatar?: boolean
    phone?: boolean
    website?: boolean
    company?: boolean
    bio?: boolean
    status?: boolean
    role?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    name?: boolean
    dob?: boolean
    currencyCode?: boolean
    password?: boolean
    salt?: boolean
    plaidLinkToken?: boolean
    title?: boolean
    avatar?: boolean
    phone?: boolean
    website?: boolean
    company?: boolean
    bio?: boolean
    status?: boolean
    role?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "email" | "firstName" | "lastName" | "name" | "dob" | "currencyCode" | "password" | "salt" | "plaidLinkToken" | "title" | "avatar" | "phone" | "website" | "company" | "bio" | "status" | "role" | "street" | "city" | "state" | "zip" | "country", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tokens?: boolean | User$tokensArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    images?: boolean | User$imagesArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | User$receivedMessagesArgs<ExtArgs>
    tenant?: boolean | User$tenantArgs<ExtArgs>
    maintenanceRequests?: boolean | User$maintenanceRequestsArgs<ExtArgs>
    ownedUnits?: boolean | User$ownedUnitsArgs<ExtArgs>
    usedCodes?: boolean | User$usedCodesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      tokens: Prisma.$TokenPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      images: Prisma.$ImagePayload<ExtArgs>[]
      sentMessages: Prisma.$MessagePayload<ExtArgs>[]
      receivedMessages: Prisma.$MessagePayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs> | null
      maintenanceRequests: Prisma.$MaintenanceRequestPayload<ExtArgs>[]
      ownedUnits: Prisma.$UnitPayload<ExtArgs>[]
      usedCodes: Prisma.$OverwriteCodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      email: string
      firstName: string | null
      lastName: string | null
      name: string | null
      dob: Date | null
      currencyCode: $Enums.CurrencyCode | null
      password: string
      salt: string
      plaidLinkToken: string | null
      title: string | null
      avatar: string | null
      phone: string | null
      website: string | null
      company: string | null
      bio: string | null
      status: $Enums.AccountStatus
      role: $Enums.UserRole | null
      street: string | null
      city: string | null
      state: string | null
      zip: string | null
      country: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tokens<T extends User$tokensArgs<ExtArgs> = {}>(args?: Subset<T, User$tokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends User$documentsArgs<ExtArgs> = {}>(args?: Subset<T, User$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends User$imagesArgs<ExtArgs> = {}>(args?: Subset<T, User$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedMessages<T extends User$receivedMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tenant<T extends User$tenantArgs<ExtArgs> = {}>(args?: Subset<T, User$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    maintenanceRequests<T extends User$maintenanceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$maintenanceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ownedUnits<T extends User$ownedUnitsArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedUnitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    usedCodes<T extends User$usedCodesArgs<ExtArgs> = {}>(args?: Subset<T, User$usedCodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly dob: FieldRef<"User", 'DateTime'>
    readonly currencyCode: FieldRef<"User", 'CurrencyCode'>
    readonly password: FieldRef<"User", 'String'>
    readonly salt: FieldRef<"User", 'String'>
    readonly plaidLinkToken: FieldRef<"User", 'String'>
    readonly title: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly website: FieldRef<"User", 'String'>
    readonly company: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'AccountStatus'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly street: FieldRef<"User", 'String'>
    readonly city: FieldRef<"User", 'String'>
    readonly state: FieldRef<"User", 'String'>
    readonly zip: FieldRef<"User", 'String'>
    readonly country: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.tokens
   */
  export type User$tokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    cursor?: TokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * User.documents
   */
  export type User$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * User.images
   */
  export type User$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    cursor?: ImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.receivedMessages
   */
  export type User$receivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.tenant
   */
  export type User$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * User.maintenanceRequests
   */
  export type User$maintenanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    where?: MaintenanceRequestWhereInput
    orderBy?: MaintenanceRequestOrderByWithRelationInput | MaintenanceRequestOrderByWithRelationInput[]
    cursor?: MaintenanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceRequestScalarFieldEnum | MaintenanceRequestScalarFieldEnum[]
  }

  /**
   * User.ownedUnits
   */
  export type User$ownedUnitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    cursor?: UnitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * User.usedCodes
   */
  export type User$usedCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
    where?: OverwriteCodeWhereInput
    orderBy?: OverwriteCodeOrderByWithRelationInput | OverwriteCodeOrderByWithRelationInput[]
    cursor?: OverwriteCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OverwriteCodeScalarFieldEnum | OverwriteCodeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _avg: TenantAvgAggregateOutputType | null
    _sum: TenantSumAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantAvgAggregateOutputType = {
    id: number | null
    income: number | null
    creditScore: number | null
    userId: number | null
  }

  export type TenantSumAggregateOutputType = {
    id: number | null
    income: number | null
    creditScore: number | null
    userId: number | null
  }

  export type TenantMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    civilStatus: $Enums.CivilStatus | null
    occupation: string | null
    income: number | null
    creditScore: number | null
    userId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
  }

  export type TenantMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    civilStatus: $Enums.CivilStatus | null
    occupation: string | null
    income: number | null
    creditScore: number | null
    userId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    civilStatus: number
    occupation: number
    income: number
    creditScore: number
    userId: number
    firstName: number
    lastName: number
    email: number
    phone: number
    _all: number
  }


  export type TenantAvgAggregateInputType = {
    id?: true
    income?: true
    creditScore?: true
    userId?: true
  }

  export type TenantSumAggregateInputType = {
    id?: true
    income?: true
    creditScore?: true
    userId?: true
  }

  export type TenantMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    civilStatus?: true
    occupation?: true
    income?: true
    creditScore?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    civilStatus?: true
    occupation?: true
    income?: true
    creditScore?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    civilStatus?: true
    occupation?: true
    income?: true
    creditScore?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TenantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TenantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _avg?: TenantAvgAggregateInputType
    _sum?: TenantSumAggregateInputType
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    civilStatus: $Enums.CivilStatus | null
    occupation: string | null
    income: number | null
    creditScore: number | null
    userId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    _count: TenantCountAggregateOutputType | null
    _avg: TenantAvgAggregateOutputType | null
    _sum: TenantSumAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    civilStatus?: boolean
    occupation?: boolean
    income?: boolean
    creditScore?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    user?: boolean | Tenant$userArgs<ExtArgs>
    leases?: boolean | Tenant$leasesArgs<ExtArgs>
    maintenanceRequests?: boolean | Tenant$maintenanceRequestsArgs<ExtArgs>
    rentPayments?: boolean | Tenant$rentPaymentsArgs<ExtArgs>
    unit?: boolean | Tenant$unitArgs<ExtArgs>
    MaintenanceRequest?: boolean | Tenant$MaintenanceRequestArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    civilStatus?: boolean
    occupation?: boolean
    income?: boolean
    creditScore?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    user?: boolean | Tenant$userArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    civilStatus?: boolean
    occupation?: boolean
    income?: boolean
    creditScore?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    user?: boolean | Tenant$userArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    civilStatus?: boolean
    occupation?: boolean
    income?: boolean
    creditScore?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
  }

  export type TenantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "civilStatus" | "occupation" | "income" | "creditScore" | "userId" | "firstName" | "lastName" | "email" | "phone", ExtArgs["result"]["tenant"]>
  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Tenant$userArgs<ExtArgs>
    leases?: boolean | Tenant$leasesArgs<ExtArgs>
    maintenanceRequests?: boolean | Tenant$maintenanceRequestsArgs<ExtArgs>
    rentPayments?: boolean | Tenant$rentPaymentsArgs<ExtArgs>
    unit?: boolean | Tenant$unitArgs<ExtArgs>
    MaintenanceRequest?: boolean | Tenant$MaintenanceRequestArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Tenant$userArgs<ExtArgs>
  }
  export type TenantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Tenant$userArgs<ExtArgs>
  }

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      leases: Prisma.$LeasePayload<ExtArgs>[]
      maintenanceRequests: Prisma.$MaintenanceRequestPayload<ExtArgs>[]
      rentPayments: Prisma.$RentPaymentPayload<ExtArgs>[]
      unit: Prisma.$UnitPayload<ExtArgs>[]
      MaintenanceRequest: Prisma.$MaintenanceRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      civilStatus: $Enums.CivilStatus | null
      occupation: string | null
      income: number | null
      creditScore: number | null
      userId: number | null
      firstName: string | null
      lastName: string | null
      email: string | null
      phone: string | null
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants and returns the data updated in the database.
     * @param {TenantUpdateManyAndReturnArgs} args - Arguments to update many Tenants.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TenantUpdateManyAndReturnArgs>(args: SelectSubset<T, TenantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Tenant$userArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    leases<T extends Tenant$leasesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$leasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    maintenanceRequests<T extends Tenant$maintenanceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$maintenanceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rentPayments<T extends Tenant$rentPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$rentPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    unit<T extends Tenant$unitArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$unitArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MaintenanceRequest<T extends Tenant$MaintenanceRequestArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$MaintenanceRequestArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'Int'>
    readonly createdAt: FieldRef<"Tenant", 'DateTime'>
    readonly updatedAt: FieldRef<"Tenant", 'DateTime'>
    readonly civilStatus: FieldRef<"Tenant", 'CivilStatus'>
    readonly occupation: FieldRef<"Tenant", 'String'>
    readonly income: FieldRef<"Tenant", 'Float'>
    readonly creditScore: FieldRef<"Tenant", 'Int'>
    readonly userId: FieldRef<"Tenant", 'Int'>
    readonly firstName: FieldRef<"Tenant", 'String'>
    readonly lastName: FieldRef<"Tenant", 'String'>
    readonly email: FieldRef<"Tenant", 'String'>
    readonly phone: FieldRef<"Tenant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data?: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to update.
     */
    limit?: number
  }

  /**
   * Tenant updateManyAndReturn
   */
  export type TenantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
    /**
     * Limit how many Tenants to delete.
     */
    limit?: number
  }

  /**
   * Tenant.user
   */
  export type Tenant$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Tenant.leases
   */
  export type Tenant$leasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    where?: LeaseWhereInput
    orderBy?: LeaseOrderByWithRelationInput | LeaseOrderByWithRelationInput[]
    cursor?: LeaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaseScalarFieldEnum | LeaseScalarFieldEnum[]
  }

  /**
   * Tenant.maintenanceRequests
   */
  export type Tenant$maintenanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    where?: MaintenanceRequestWhereInput
    orderBy?: MaintenanceRequestOrderByWithRelationInput | MaintenanceRequestOrderByWithRelationInput[]
    cursor?: MaintenanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceRequestScalarFieldEnum | MaintenanceRequestScalarFieldEnum[]
  }

  /**
   * Tenant.rentPayments
   */
  export type Tenant$rentPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
    where?: RentPaymentWhereInput
    orderBy?: RentPaymentOrderByWithRelationInput | RentPaymentOrderByWithRelationInput[]
    cursor?: RentPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentPaymentScalarFieldEnum | RentPaymentScalarFieldEnum[]
  }

  /**
   * Tenant.unit
   */
  export type Tenant$unitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    cursor?: UnitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Tenant.MaintenanceRequest
   */
  export type Tenant$MaintenanceRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    where?: MaintenanceRequestWhereInput
    orderBy?: MaintenanceRequestOrderByWithRelationInput | MaintenanceRequestOrderByWithRelationInput[]
    cursor?: MaintenanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceRequestScalarFieldEnum | MaintenanceRequestScalarFieldEnum[]
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Model Token
   */

  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TokenSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TokenMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    type: $Enums.TokenType | null
    emailToken: string | null
    valid: boolean | null
    expiration: Date | null
    userId: number | null
  }

  export type TokenMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    type: $Enums.TokenType | null
    emailToken: string | null
    valid: boolean | null
    expiration: Date | null
    userId: number | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    type: number
    emailToken: number
    valid: number
    expiration: number
    userId: number
    _all: number
  }


  export type TokenAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TokenSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TokenMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    type?: true
    emailToken?: true
    valid?: true
    expiration?: true
    userId?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    type?: true
    emailToken?: true
    valid?: true
    expiration?: true
    userId?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    type?: true
    emailToken?: true
    valid?: true
    expiration?: true
    userId?: true
    _all?: true
  }

  export type TokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Token to aggregate.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithAggregationInput | TokenOrderByWithAggregationInput[]
    by: TokenScalarFieldEnum[] | TokenScalarFieldEnum
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _avg?: TokenAvgAggregateInputType
    _sum?: TokenSumAggregateInputType
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }

  export type TokenGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    type: $Enums.TokenType
    emailToken: string | null
    valid: boolean
    expiration: Date
    userId: number
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean
    emailToken?: boolean
    valid?: boolean
    expiration?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["token"]>

  export type TokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean
    emailToken?: boolean
    valid?: boolean
    expiration?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["token"]>

  export type TokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean
    emailToken?: boolean
    valid?: boolean
    expiration?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["token"]>

  export type TokenSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean
    emailToken?: boolean
    valid?: boolean
    expiration?: boolean
    userId?: boolean
  }

  export type TokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "type" | "emailToken" | "valid" | "expiration" | "userId", ExtArgs["result"]["token"]>
  export type TokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Token"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      type: $Enums.TokenType
      emailToken: string | null
      valid: boolean
      expiration: Date
      userId: number
    }, ExtArgs["result"]["token"]>
    composites: {}
  }

  type TokenGetPayload<S extends boolean | null | undefined | TokenDefaultArgs> = $Result.GetResult<Prisma.$TokenPayload, S>

  type TokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TokenCountAggregateInputType | true
    }

  export interface TokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Token'], meta: { name: 'Token' } }
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenFindUniqueArgs>(args: SelectSubset<T, TokenFindUniqueArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Token that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenFindFirstArgs>(args?: SelectSubset<T, TokenFindFirstArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Token that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenFindManyArgs>(args?: SelectSubset<T, TokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
     */
    create<T extends TokenCreateArgs>(args: SelectSubset<T, TokenCreateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tokens.
     * @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenCreateManyArgs>(args?: SelectSubset<T, TokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tokens and returns the data saved in the database.
     * @param {TokenCreateManyAndReturnArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokenCreateManyAndReturnArgs>(args?: SelectSubset<T, TokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
     */
    delete<T extends TokenDeleteArgs>(args: SelectSubset<T, TokenDeleteArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenUpdateArgs>(args: SelectSubset<T, TokenUpdateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenDeleteManyArgs>(args?: SelectSubset<T, TokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenUpdateManyArgs>(args: SelectSubset<T, TokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens and returns the data updated in the database.
     * @param {TokenUpdateManyAndReturnArgs} args - Arguments to update many Tokens.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TokenUpdateManyAndReturnArgs>(args: SelectSubset<T, TokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
     */
    upsert<T extends TokenUpsertArgs>(args: SelectSubset<T, TokenUpsertArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): Prisma.PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Token model
   */
  readonly fields: TokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Token model
   */
  interface TokenFieldRefs {
    readonly id: FieldRef<"Token", 'Int'>
    readonly createdAt: FieldRef<"Token", 'DateTime'>
    readonly updatedAt: FieldRef<"Token", 'DateTime'>
    readonly type: FieldRef<"Token", 'TokenType'>
    readonly emailToken: FieldRef<"Token", 'String'>
    readonly valid: FieldRef<"Token", 'Boolean'>
    readonly expiration: FieldRef<"Token", 'DateTime'>
    readonly userId: FieldRef<"Token", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findMany
   */
  export type TokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token create
   */
  export type TokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to create a Token.
     */
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }

  /**
   * Token createMany
   */
  export type TokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token createManyAndReturn
   */
  export type TokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Token update
   */
  export type TokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to update a Token.
     */
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to update.
     */
    limit?: number
  }

  /**
   * Token updateManyAndReturn
   */
  export type TokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Token upsert
   */
  export type TokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The filter to search for the Token to update in case it exists.
     */
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     */
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }

  /**
   * Token delete
   */
  export type TokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter which Token to delete.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to delete.
     */
    limit?: number
  }

  /**
   * Token without action
   */
  export type TokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
  }


  /**
   * Model RealEstateObject
   */

  export type AggregateRealEstateObject = {
    _count: RealEstateObjectCountAggregateOutputType | null
    _avg: RealEstateObjectAvgAggregateOutputType | null
    _sum: RealEstateObjectSumAggregateOutputType | null
    _min: RealEstateObjectMinAggregateOutputType | null
    _max: RealEstateObjectMaxAggregateOutputType | null
  }

  export type RealEstateObjectAvgAggregateOutputType = {
    id: number | null
    lotSize: number | null
    yearBuilt: number | null
    marketPrice: number | null
  }

  export type RealEstateObjectSumAggregateOutputType = {
    id: number | null
    lotSize: number | null
    yearBuilt: number | null
    marketPrice: number | null
  }

  export type RealEstateObjectMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    description: string | null
    lotSize: number | null
    yearBuilt: number | null
    realEstateType: $Enums.RealEstateType | null
    marketPrice: number | null
    currency: $Enums.CurrencyCode | null
    street: string | null
    city: string | null
    state: string | null
    zip: string | null
    country: string | null
  }

  export type RealEstateObjectMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    description: string | null
    lotSize: number | null
    yearBuilt: number | null
    realEstateType: $Enums.RealEstateType | null
    marketPrice: number | null
    currency: $Enums.CurrencyCode | null
    street: string | null
    city: string | null
    state: string | null
    zip: string | null
    country: string | null
  }

  export type RealEstateObjectCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    title: number
    description: number
    lotSize: number
    yearBuilt: number
    realEstateType: number
    marketPrice: number
    currency: number
    street: number
    city: number
    state: number
    zip: number
    country: number
    _all: number
  }


  export type RealEstateObjectAvgAggregateInputType = {
    id?: true
    lotSize?: true
    yearBuilt?: true
    marketPrice?: true
  }

  export type RealEstateObjectSumAggregateInputType = {
    id?: true
    lotSize?: true
    yearBuilt?: true
    marketPrice?: true
  }

  export type RealEstateObjectMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    lotSize?: true
    yearBuilt?: true
    realEstateType?: true
    marketPrice?: true
    currency?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    country?: true
  }

  export type RealEstateObjectMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    lotSize?: true
    yearBuilt?: true
    realEstateType?: true
    marketPrice?: true
    currency?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    country?: true
  }

  export type RealEstateObjectCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    lotSize?: true
    yearBuilt?: true
    realEstateType?: true
    marketPrice?: true
    currency?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    country?: true
    _all?: true
  }

  export type RealEstateObjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RealEstateObject to aggregate.
     */
    where?: RealEstateObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RealEstateObjects to fetch.
     */
    orderBy?: RealEstateObjectOrderByWithRelationInput | RealEstateObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RealEstateObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RealEstateObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RealEstateObjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RealEstateObjects
    **/
    _count?: true | RealEstateObjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RealEstateObjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RealEstateObjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RealEstateObjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RealEstateObjectMaxAggregateInputType
  }

  export type GetRealEstateObjectAggregateType<T extends RealEstateObjectAggregateArgs> = {
        [P in keyof T & keyof AggregateRealEstateObject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRealEstateObject[P]>
      : GetScalarType<T[P], AggregateRealEstateObject[P]>
  }




  export type RealEstateObjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RealEstateObjectWhereInput
    orderBy?: RealEstateObjectOrderByWithAggregationInput | RealEstateObjectOrderByWithAggregationInput[]
    by: RealEstateObjectScalarFieldEnum[] | RealEstateObjectScalarFieldEnum
    having?: RealEstateObjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RealEstateObjectCountAggregateInputType | true
    _avg?: RealEstateObjectAvgAggregateInputType
    _sum?: RealEstateObjectSumAggregateInputType
    _min?: RealEstateObjectMinAggregateInputType
    _max?: RealEstateObjectMaxAggregateInputType
  }

  export type RealEstateObjectGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    title: string | null
    description: string | null
    lotSize: number | null
    yearBuilt: number | null
    realEstateType: $Enums.RealEstateType | null
    marketPrice: number | null
    currency: $Enums.CurrencyCode | null
    street: string | null
    city: string | null
    state: string | null
    zip: string | null
    country: string | null
    _count: RealEstateObjectCountAggregateOutputType | null
    _avg: RealEstateObjectAvgAggregateOutputType | null
    _sum: RealEstateObjectSumAggregateOutputType | null
    _min: RealEstateObjectMinAggregateOutputType | null
    _max: RealEstateObjectMaxAggregateOutputType | null
  }

  type GetRealEstateObjectGroupByPayload<T extends RealEstateObjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RealEstateObjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RealEstateObjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RealEstateObjectGroupByOutputType[P]>
            : GetScalarType<T[P], RealEstateObjectGroupByOutputType[P]>
        }
      >
    >


  export type RealEstateObjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    description?: boolean
    lotSize?: boolean
    yearBuilt?: boolean
    realEstateType?: boolean
    marketPrice?: boolean
    currency?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
    images?: boolean | RealEstateObject$imagesArgs<ExtArgs>
    amenities?: boolean | RealEstateObject$amenitiesArgs<ExtArgs>
    preferences?: boolean | RealEstateObject$preferencesArgs<ExtArgs>
    documents?: boolean | RealEstateObject$documentsArgs<ExtArgs>
    units?: boolean | RealEstateObject$unitsArgs<ExtArgs>
    _count?: boolean | RealEstateObjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["realEstateObject"]>

  export type RealEstateObjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    description?: boolean
    lotSize?: boolean
    yearBuilt?: boolean
    realEstateType?: boolean
    marketPrice?: boolean
    currency?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
  }, ExtArgs["result"]["realEstateObject"]>

  export type RealEstateObjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    description?: boolean
    lotSize?: boolean
    yearBuilt?: boolean
    realEstateType?: boolean
    marketPrice?: boolean
    currency?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
  }, ExtArgs["result"]["realEstateObject"]>

  export type RealEstateObjectSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    description?: boolean
    lotSize?: boolean
    yearBuilt?: boolean
    realEstateType?: boolean
    marketPrice?: boolean
    currency?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    country?: boolean
  }

  export type RealEstateObjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "title" | "description" | "lotSize" | "yearBuilt" | "realEstateType" | "marketPrice" | "currency" | "street" | "city" | "state" | "zip" | "country", ExtArgs["result"]["realEstateObject"]>
  export type RealEstateObjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | RealEstateObject$imagesArgs<ExtArgs>
    amenities?: boolean | RealEstateObject$amenitiesArgs<ExtArgs>
    preferences?: boolean | RealEstateObject$preferencesArgs<ExtArgs>
    documents?: boolean | RealEstateObject$documentsArgs<ExtArgs>
    units?: boolean | RealEstateObject$unitsArgs<ExtArgs>
    _count?: boolean | RealEstateObjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RealEstateObjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RealEstateObjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RealEstateObjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RealEstateObject"
    objects: {
      images: Prisma.$ImagePayload<ExtArgs>[]
      amenities: Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>[]
      preferences: Prisma.$PreferencesOnRealEstatePayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      units: Prisma.$UnitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      title: string | null
      description: string | null
      lotSize: number | null
      yearBuilt: number | null
      realEstateType: $Enums.RealEstateType | null
      marketPrice: number | null
      currency: $Enums.CurrencyCode | null
      street: string | null
      city: string | null
      state: string | null
      zip: string | null
      country: string | null
    }, ExtArgs["result"]["realEstateObject"]>
    composites: {}
  }

  type RealEstateObjectGetPayload<S extends boolean | null | undefined | RealEstateObjectDefaultArgs> = $Result.GetResult<Prisma.$RealEstateObjectPayload, S>

  type RealEstateObjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RealEstateObjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RealEstateObjectCountAggregateInputType | true
    }

  export interface RealEstateObjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RealEstateObject'], meta: { name: 'RealEstateObject' } }
    /**
     * Find zero or one RealEstateObject that matches the filter.
     * @param {RealEstateObjectFindUniqueArgs} args - Arguments to find a RealEstateObject
     * @example
     * // Get one RealEstateObject
     * const realEstateObject = await prisma.realEstateObject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RealEstateObjectFindUniqueArgs>(args: SelectSubset<T, RealEstateObjectFindUniqueArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RealEstateObject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RealEstateObjectFindUniqueOrThrowArgs} args - Arguments to find a RealEstateObject
     * @example
     * // Get one RealEstateObject
     * const realEstateObject = await prisma.realEstateObject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RealEstateObjectFindUniqueOrThrowArgs>(args: SelectSubset<T, RealEstateObjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RealEstateObject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealEstateObjectFindFirstArgs} args - Arguments to find a RealEstateObject
     * @example
     * // Get one RealEstateObject
     * const realEstateObject = await prisma.realEstateObject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RealEstateObjectFindFirstArgs>(args?: SelectSubset<T, RealEstateObjectFindFirstArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RealEstateObject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealEstateObjectFindFirstOrThrowArgs} args - Arguments to find a RealEstateObject
     * @example
     * // Get one RealEstateObject
     * const realEstateObject = await prisma.realEstateObject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RealEstateObjectFindFirstOrThrowArgs>(args?: SelectSubset<T, RealEstateObjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RealEstateObjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealEstateObjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RealEstateObjects
     * const realEstateObjects = await prisma.realEstateObject.findMany()
     * 
     * // Get first 10 RealEstateObjects
     * const realEstateObjects = await prisma.realEstateObject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const realEstateObjectWithIdOnly = await prisma.realEstateObject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RealEstateObjectFindManyArgs>(args?: SelectSubset<T, RealEstateObjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RealEstateObject.
     * @param {RealEstateObjectCreateArgs} args - Arguments to create a RealEstateObject.
     * @example
     * // Create one RealEstateObject
     * const RealEstateObject = await prisma.realEstateObject.create({
     *   data: {
     *     // ... data to create a RealEstateObject
     *   }
     * })
     * 
     */
    create<T extends RealEstateObjectCreateArgs>(args: SelectSubset<T, RealEstateObjectCreateArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RealEstateObjects.
     * @param {RealEstateObjectCreateManyArgs} args - Arguments to create many RealEstateObjects.
     * @example
     * // Create many RealEstateObjects
     * const realEstateObject = await prisma.realEstateObject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RealEstateObjectCreateManyArgs>(args?: SelectSubset<T, RealEstateObjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RealEstateObjects and returns the data saved in the database.
     * @param {RealEstateObjectCreateManyAndReturnArgs} args - Arguments to create many RealEstateObjects.
     * @example
     * // Create many RealEstateObjects
     * const realEstateObject = await prisma.realEstateObject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RealEstateObjects and only return the `id`
     * const realEstateObjectWithIdOnly = await prisma.realEstateObject.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RealEstateObjectCreateManyAndReturnArgs>(args?: SelectSubset<T, RealEstateObjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RealEstateObject.
     * @param {RealEstateObjectDeleteArgs} args - Arguments to delete one RealEstateObject.
     * @example
     * // Delete one RealEstateObject
     * const RealEstateObject = await prisma.realEstateObject.delete({
     *   where: {
     *     // ... filter to delete one RealEstateObject
     *   }
     * })
     * 
     */
    delete<T extends RealEstateObjectDeleteArgs>(args: SelectSubset<T, RealEstateObjectDeleteArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RealEstateObject.
     * @param {RealEstateObjectUpdateArgs} args - Arguments to update one RealEstateObject.
     * @example
     * // Update one RealEstateObject
     * const realEstateObject = await prisma.realEstateObject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RealEstateObjectUpdateArgs>(args: SelectSubset<T, RealEstateObjectUpdateArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RealEstateObjects.
     * @param {RealEstateObjectDeleteManyArgs} args - Arguments to filter RealEstateObjects to delete.
     * @example
     * // Delete a few RealEstateObjects
     * const { count } = await prisma.realEstateObject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RealEstateObjectDeleteManyArgs>(args?: SelectSubset<T, RealEstateObjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RealEstateObjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealEstateObjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RealEstateObjects
     * const realEstateObject = await prisma.realEstateObject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RealEstateObjectUpdateManyArgs>(args: SelectSubset<T, RealEstateObjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RealEstateObjects and returns the data updated in the database.
     * @param {RealEstateObjectUpdateManyAndReturnArgs} args - Arguments to update many RealEstateObjects.
     * @example
     * // Update many RealEstateObjects
     * const realEstateObject = await prisma.realEstateObject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RealEstateObjects and only return the `id`
     * const realEstateObjectWithIdOnly = await prisma.realEstateObject.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RealEstateObjectUpdateManyAndReturnArgs>(args: SelectSubset<T, RealEstateObjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RealEstateObject.
     * @param {RealEstateObjectUpsertArgs} args - Arguments to update or create a RealEstateObject.
     * @example
     * // Update or create a RealEstateObject
     * const realEstateObject = await prisma.realEstateObject.upsert({
     *   create: {
     *     // ... data to create a RealEstateObject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RealEstateObject we want to update
     *   }
     * })
     */
    upsert<T extends RealEstateObjectUpsertArgs>(args: SelectSubset<T, RealEstateObjectUpsertArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RealEstateObjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealEstateObjectCountArgs} args - Arguments to filter RealEstateObjects to count.
     * @example
     * // Count the number of RealEstateObjects
     * const count = await prisma.realEstateObject.count({
     *   where: {
     *     // ... the filter for the RealEstateObjects we want to count
     *   }
     * })
    **/
    count<T extends RealEstateObjectCountArgs>(
      args?: Subset<T, RealEstateObjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RealEstateObjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RealEstateObject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealEstateObjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RealEstateObjectAggregateArgs>(args: Subset<T, RealEstateObjectAggregateArgs>): Prisma.PrismaPromise<GetRealEstateObjectAggregateType<T>>

    /**
     * Group by RealEstateObject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealEstateObjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RealEstateObjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RealEstateObjectGroupByArgs['orderBy'] }
        : { orderBy?: RealEstateObjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RealEstateObjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRealEstateObjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RealEstateObject model
   */
  readonly fields: RealEstateObjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RealEstateObject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RealEstateObjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    images<T extends RealEstateObject$imagesArgs<ExtArgs> = {}>(args?: Subset<T, RealEstateObject$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    amenities<T extends RealEstateObject$amenitiesArgs<ExtArgs> = {}>(args?: Subset<T, RealEstateObject$amenitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preferences<T extends RealEstateObject$preferencesArgs<ExtArgs> = {}>(args?: Subset<T, RealEstateObject$preferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends RealEstateObject$documentsArgs<ExtArgs> = {}>(args?: Subset<T, RealEstateObject$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    units<T extends RealEstateObject$unitsArgs<ExtArgs> = {}>(args?: Subset<T, RealEstateObject$unitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RealEstateObject model
   */
  interface RealEstateObjectFieldRefs {
    readonly id: FieldRef<"RealEstateObject", 'Int'>
    readonly createdAt: FieldRef<"RealEstateObject", 'DateTime'>
    readonly updatedAt: FieldRef<"RealEstateObject", 'DateTime'>
    readonly title: FieldRef<"RealEstateObject", 'String'>
    readonly description: FieldRef<"RealEstateObject", 'String'>
    readonly lotSize: FieldRef<"RealEstateObject", 'Float'>
    readonly yearBuilt: FieldRef<"RealEstateObject", 'Int'>
    readonly realEstateType: FieldRef<"RealEstateObject", 'RealEstateType'>
    readonly marketPrice: FieldRef<"RealEstateObject", 'Float'>
    readonly currency: FieldRef<"RealEstateObject", 'CurrencyCode'>
    readonly street: FieldRef<"RealEstateObject", 'String'>
    readonly city: FieldRef<"RealEstateObject", 'String'>
    readonly state: FieldRef<"RealEstateObject", 'String'>
    readonly zip: FieldRef<"RealEstateObject", 'String'>
    readonly country: FieldRef<"RealEstateObject", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RealEstateObject findUnique
   */
  export type RealEstateObjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
    /**
     * Filter, which RealEstateObject to fetch.
     */
    where: RealEstateObjectWhereUniqueInput
  }

  /**
   * RealEstateObject findUniqueOrThrow
   */
  export type RealEstateObjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
    /**
     * Filter, which RealEstateObject to fetch.
     */
    where: RealEstateObjectWhereUniqueInput
  }

  /**
   * RealEstateObject findFirst
   */
  export type RealEstateObjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
    /**
     * Filter, which RealEstateObject to fetch.
     */
    where?: RealEstateObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RealEstateObjects to fetch.
     */
    orderBy?: RealEstateObjectOrderByWithRelationInput | RealEstateObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RealEstateObjects.
     */
    cursor?: RealEstateObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RealEstateObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RealEstateObjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RealEstateObjects.
     */
    distinct?: RealEstateObjectScalarFieldEnum | RealEstateObjectScalarFieldEnum[]
  }

  /**
   * RealEstateObject findFirstOrThrow
   */
  export type RealEstateObjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
    /**
     * Filter, which RealEstateObject to fetch.
     */
    where?: RealEstateObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RealEstateObjects to fetch.
     */
    orderBy?: RealEstateObjectOrderByWithRelationInput | RealEstateObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RealEstateObjects.
     */
    cursor?: RealEstateObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RealEstateObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RealEstateObjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RealEstateObjects.
     */
    distinct?: RealEstateObjectScalarFieldEnum | RealEstateObjectScalarFieldEnum[]
  }

  /**
   * RealEstateObject findMany
   */
  export type RealEstateObjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
    /**
     * Filter, which RealEstateObjects to fetch.
     */
    where?: RealEstateObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RealEstateObjects to fetch.
     */
    orderBy?: RealEstateObjectOrderByWithRelationInput | RealEstateObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RealEstateObjects.
     */
    cursor?: RealEstateObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RealEstateObjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RealEstateObjects.
     */
    skip?: number
    distinct?: RealEstateObjectScalarFieldEnum | RealEstateObjectScalarFieldEnum[]
  }

  /**
   * RealEstateObject create
   */
  export type RealEstateObjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
    /**
     * The data needed to create a RealEstateObject.
     */
    data: XOR<RealEstateObjectCreateInput, RealEstateObjectUncheckedCreateInput>
  }

  /**
   * RealEstateObject createMany
   */
  export type RealEstateObjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RealEstateObjects.
     */
    data: RealEstateObjectCreateManyInput | RealEstateObjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RealEstateObject createManyAndReturn
   */
  export type RealEstateObjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * The data used to create many RealEstateObjects.
     */
    data: RealEstateObjectCreateManyInput | RealEstateObjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RealEstateObject update
   */
  export type RealEstateObjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
    /**
     * The data needed to update a RealEstateObject.
     */
    data: XOR<RealEstateObjectUpdateInput, RealEstateObjectUncheckedUpdateInput>
    /**
     * Choose, which RealEstateObject to update.
     */
    where: RealEstateObjectWhereUniqueInput
  }

  /**
   * RealEstateObject updateMany
   */
  export type RealEstateObjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RealEstateObjects.
     */
    data: XOR<RealEstateObjectUpdateManyMutationInput, RealEstateObjectUncheckedUpdateManyInput>
    /**
     * Filter which RealEstateObjects to update
     */
    where?: RealEstateObjectWhereInput
    /**
     * Limit how many RealEstateObjects to update.
     */
    limit?: number
  }

  /**
   * RealEstateObject updateManyAndReturn
   */
  export type RealEstateObjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * The data used to update RealEstateObjects.
     */
    data: XOR<RealEstateObjectUpdateManyMutationInput, RealEstateObjectUncheckedUpdateManyInput>
    /**
     * Filter which RealEstateObjects to update
     */
    where?: RealEstateObjectWhereInput
    /**
     * Limit how many RealEstateObjects to update.
     */
    limit?: number
  }

  /**
   * RealEstateObject upsert
   */
  export type RealEstateObjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
    /**
     * The filter to search for the RealEstateObject to update in case it exists.
     */
    where: RealEstateObjectWhereUniqueInput
    /**
     * In case the RealEstateObject found by the `where` argument doesn't exist, create a new RealEstateObject with this data.
     */
    create: XOR<RealEstateObjectCreateInput, RealEstateObjectUncheckedCreateInput>
    /**
     * In case the RealEstateObject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RealEstateObjectUpdateInput, RealEstateObjectUncheckedUpdateInput>
  }

  /**
   * RealEstateObject delete
   */
  export type RealEstateObjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
    /**
     * Filter which RealEstateObject to delete.
     */
    where: RealEstateObjectWhereUniqueInput
  }

  /**
   * RealEstateObject deleteMany
   */
  export type RealEstateObjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RealEstateObjects to delete
     */
    where?: RealEstateObjectWhereInput
    /**
     * Limit how many RealEstateObjects to delete.
     */
    limit?: number
  }

  /**
   * RealEstateObject.images
   */
  export type RealEstateObject$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    cursor?: ImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * RealEstateObject.amenities
   */
  export type RealEstateObject$amenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    where?: AmenitiesOnRealEstateWhereInput
    orderBy?: AmenitiesOnRealEstateOrderByWithRelationInput | AmenitiesOnRealEstateOrderByWithRelationInput[]
    cursor?: AmenitiesOnRealEstateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmenitiesOnRealEstateScalarFieldEnum | AmenitiesOnRealEstateScalarFieldEnum[]
  }

  /**
   * RealEstateObject.preferences
   */
  export type RealEstateObject$preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
    where?: PreferencesOnRealEstateWhereInput
    orderBy?: PreferencesOnRealEstateOrderByWithRelationInput | PreferencesOnRealEstateOrderByWithRelationInput[]
    cursor?: PreferencesOnRealEstateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreferencesOnRealEstateScalarFieldEnum | PreferencesOnRealEstateScalarFieldEnum[]
  }

  /**
   * RealEstateObject.documents
   */
  export type RealEstateObject$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * RealEstateObject.units
   */
  export type RealEstateObject$unitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    cursor?: UnitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * RealEstateObject without action
   */
  export type RealEstateObjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
  }


  /**
   * Model Amenity
   */

  export type AggregateAmenity = {
    _count: AmenityCountAggregateOutputType | null
    _avg: AmenityAvgAggregateOutputType | null
    _sum: AmenitySumAggregateOutputType | null
    _min: AmenityMinAggregateOutputType | null
    _max: AmenityMaxAggregateOutputType | null
  }

  export type AmenityAvgAggregateOutputType = {
    id: number | null
  }

  export type AmenitySumAggregateOutputType = {
    id: number | null
  }

  export type AmenityMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    description: string | null
    category: $Enums.AmenityCategory | null
  }

  export type AmenityMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    description: string | null
    category: $Enums.AmenityCategory | null
  }

  export type AmenityCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    description: number
    category: number
    _all: number
  }


  export type AmenityAvgAggregateInputType = {
    id?: true
  }

  export type AmenitySumAggregateInputType = {
    id?: true
  }

  export type AmenityMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    description?: true
    category?: true
  }

  export type AmenityMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    description?: true
    category?: true
  }

  export type AmenityCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    description?: true
    category?: true
    _all?: true
  }

  export type AmenityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Amenity to aggregate.
     */
    where?: AmenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Amenities to fetch.
     */
    orderBy?: AmenityOrderByWithRelationInput | AmenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AmenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Amenities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Amenities
    **/
    _count?: true | AmenityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AmenityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AmenitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AmenityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AmenityMaxAggregateInputType
  }

  export type GetAmenityAggregateType<T extends AmenityAggregateArgs> = {
        [P in keyof T & keyof AggregateAmenity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAmenity[P]>
      : GetScalarType<T[P], AggregateAmenity[P]>
  }




  export type AmenityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmenityWhereInput
    orderBy?: AmenityOrderByWithAggregationInput | AmenityOrderByWithAggregationInput[]
    by: AmenityScalarFieldEnum[] | AmenityScalarFieldEnum
    having?: AmenityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AmenityCountAggregateInputType | true
    _avg?: AmenityAvgAggregateInputType
    _sum?: AmenitySumAggregateInputType
    _min?: AmenityMinAggregateInputType
    _max?: AmenityMaxAggregateInputType
  }

  export type AmenityGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    name: string
    description: string | null
    category: $Enums.AmenityCategory | null
    _count: AmenityCountAggregateOutputType | null
    _avg: AmenityAvgAggregateOutputType | null
    _sum: AmenitySumAggregateOutputType | null
    _min: AmenityMinAggregateOutputType | null
    _max: AmenityMaxAggregateOutputType | null
  }

  type GetAmenityGroupByPayload<T extends AmenityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AmenityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AmenityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AmenityGroupByOutputType[P]>
            : GetScalarType<T[P], AmenityGroupByOutputType[P]>
        }
      >
    >


  export type AmenitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    realEstateObjects?: boolean | Amenity$realEstateObjectsArgs<ExtArgs>
    _count?: boolean | AmenityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["amenity"]>

  export type AmenitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
  }, ExtArgs["result"]["amenity"]>

  export type AmenitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
  }, ExtArgs["result"]["amenity"]>

  export type AmenitySelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
  }

  export type AmenityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "name" | "description" | "category", ExtArgs["result"]["amenity"]>
  export type AmenityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    realEstateObjects?: boolean | Amenity$realEstateObjectsArgs<ExtArgs>
    _count?: boolean | AmenityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AmenityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AmenityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AmenityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Amenity"
    objects: {
      realEstateObjects: Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      name: string
      description: string | null
      category: $Enums.AmenityCategory | null
    }, ExtArgs["result"]["amenity"]>
    composites: {}
  }

  type AmenityGetPayload<S extends boolean | null | undefined | AmenityDefaultArgs> = $Result.GetResult<Prisma.$AmenityPayload, S>

  type AmenityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AmenityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AmenityCountAggregateInputType | true
    }

  export interface AmenityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Amenity'], meta: { name: 'Amenity' } }
    /**
     * Find zero or one Amenity that matches the filter.
     * @param {AmenityFindUniqueArgs} args - Arguments to find a Amenity
     * @example
     * // Get one Amenity
     * const amenity = await prisma.amenity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AmenityFindUniqueArgs>(args: SelectSubset<T, AmenityFindUniqueArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Amenity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AmenityFindUniqueOrThrowArgs} args - Arguments to find a Amenity
     * @example
     * // Get one Amenity
     * const amenity = await prisma.amenity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AmenityFindUniqueOrThrowArgs>(args: SelectSubset<T, AmenityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Amenity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityFindFirstArgs} args - Arguments to find a Amenity
     * @example
     * // Get one Amenity
     * const amenity = await prisma.amenity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AmenityFindFirstArgs>(args?: SelectSubset<T, AmenityFindFirstArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Amenity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityFindFirstOrThrowArgs} args - Arguments to find a Amenity
     * @example
     * // Get one Amenity
     * const amenity = await prisma.amenity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AmenityFindFirstOrThrowArgs>(args?: SelectSubset<T, AmenityFindFirstOrThrowArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Amenities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Amenities
     * const amenities = await prisma.amenity.findMany()
     * 
     * // Get first 10 Amenities
     * const amenities = await prisma.amenity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const amenityWithIdOnly = await prisma.amenity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AmenityFindManyArgs>(args?: SelectSubset<T, AmenityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Amenity.
     * @param {AmenityCreateArgs} args - Arguments to create a Amenity.
     * @example
     * // Create one Amenity
     * const Amenity = await prisma.amenity.create({
     *   data: {
     *     // ... data to create a Amenity
     *   }
     * })
     * 
     */
    create<T extends AmenityCreateArgs>(args: SelectSubset<T, AmenityCreateArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Amenities.
     * @param {AmenityCreateManyArgs} args - Arguments to create many Amenities.
     * @example
     * // Create many Amenities
     * const amenity = await prisma.amenity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AmenityCreateManyArgs>(args?: SelectSubset<T, AmenityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Amenities and returns the data saved in the database.
     * @param {AmenityCreateManyAndReturnArgs} args - Arguments to create many Amenities.
     * @example
     * // Create many Amenities
     * const amenity = await prisma.amenity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Amenities and only return the `id`
     * const amenityWithIdOnly = await prisma.amenity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AmenityCreateManyAndReturnArgs>(args?: SelectSubset<T, AmenityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Amenity.
     * @param {AmenityDeleteArgs} args - Arguments to delete one Amenity.
     * @example
     * // Delete one Amenity
     * const Amenity = await prisma.amenity.delete({
     *   where: {
     *     // ... filter to delete one Amenity
     *   }
     * })
     * 
     */
    delete<T extends AmenityDeleteArgs>(args: SelectSubset<T, AmenityDeleteArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Amenity.
     * @param {AmenityUpdateArgs} args - Arguments to update one Amenity.
     * @example
     * // Update one Amenity
     * const amenity = await prisma.amenity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AmenityUpdateArgs>(args: SelectSubset<T, AmenityUpdateArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Amenities.
     * @param {AmenityDeleteManyArgs} args - Arguments to filter Amenities to delete.
     * @example
     * // Delete a few Amenities
     * const { count } = await prisma.amenity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AmenityDeleteManyArgs>(args?: SelectSubset<T, AmenityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Amenities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Amenities
     * const amenity = await prisma.amenity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AmenityUpdateManyArgs>(args: SelectSubset<T, AmenityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Amenities and returns the data updated in the database.
     * @param {AmenityUpdateManyAndReturnArgs} args - Arguments to update many Amenities.
     * @example
     * // Update many Amenities
     * const amenity = await prisma.amenity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Amenities and only return the `id`
     * const amenityWithIdOnly = await prisma.amenity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AmenityUpdateManyAndReturnArgs>(args: SelectSubset<T, AmenityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Amenity.
     * @param {AmenityUpsertArgs} args - Arguments to update or create a Amenity.
     * @example
     * // Update or create a Amenity
     * const amenity = await prisma.amenity.upsert({
     *   create: {
     *     // ... data to create a Amenity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Amenity we want to update
     *   }
     * })
     */
    upsert<T extends AmenityUpsertArgs>(args: SelectSubset<T, AmenityUpsertArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Amenities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityCountArgs} args - Arguments to filter Amenities to count.
     * @example
     * // Count the number of Amenities
     * const count = await prisma.amenity.count({
     *   where: {
     *     // ... the filter for the Amenities we want to count
     *   }
     * })
    **/
    count<T extends AmenityCountArgs>(
      args?: Subset<T, AmenityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AmenityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Amenity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AmenityAggregateArgs>(args: Subset<T, AmenityAggregateArgs>): Prisma.PrismaPromise<GetAmenityAggregateType<T>>

    /**
     * Group by Amenity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AmenityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AmenityGroupByArgs['orderBy'] }
        : { orderBy?: AmenityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AmenityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAmenityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Amenity model
   */
  readonly fields: AmenityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Amenity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AmenityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    realEstateObjects<T extends Amenity$realEstateObjectsArgs<ExtArgs> = {}>(args?: Subset<T, Amenity$realEstateObjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Amenity model
   */
  interface AmenityFieldRefs {
    readonly id: FieldRef<"Amenity", 'Int'>
    readonly createdAt: FieldRef<"Amenity", 'DateTime'>
    readonly updatedAt: FieldRef<"Amenity", 'DateTime'>
    readonly name: FieldRef<"Amenity", 'String'>
    readonly description: FieldRef<"Amenity", 'String'>
    readonly category: FieldRef<"Amenity", 'AmenityCategory'>
  }
    

  // Custom InputTypes
  /**
   * Amenity findUnique
   */
  export type AmenityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter, which Amenity to fetch.
     */
    where: AmenityWhereUniqueInput
  }

  /**
   * Amenity findUniqueOrThrow
   */
  export type AmenityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter, which Amenity to fetch.
     */
    where: AmenityWhereUniqueInput
  }

  /**
   * Amenity findFirst
   */
  export type AmenityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter, which Amenity to fetch.
     */
    where?: AmenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Amenities to fetch.
     */
    orderBy?: AmenityOrderByWithRelationInput | AmenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Amenities.
     */
    cursor?: AmenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Amenities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Amenities.
     */
    distinct?: AmenityScalarFieldEnum | AmenityScalarFieldEnum[]
  }

  /**
   * Amenity findFirstOrThrow
   */
  export type AmenityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter, which Amenity to fetch.
     */
    where?: AmenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Amenities to fetch.
     */
    orderBy?: AmenityOrderByWithRelationInput | AmenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Amenities.
     */
    cursor?: AmenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Amenities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Amenities.
     */
    distinct?: AmenityScalarFieldEnum | AmenityScalarFieldEnum[]
  }

  /**
   * Amenity findMany
   */
  export type AmenityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter, which Amenities to fetch.
     */
    where?: AmenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Amenities to fetch.
     */
    orderBy?: AmenityOrderByWithRelationInput | AmenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Amenities.
     */
    cursor?: AmenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Amenities.
     */
    skip?: number
    distinct?: AmenityScalarFieldEnum | AmenityScalarFieldEnum[]
  }

  /**
   * Amenity create
   */
  export type AmenityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * The data needed to create a Amenity.
     */
    data: XOR<AmenityCreateInput, AmenityUncheckedCreateInput>
  }

  /**
   * Amenity createMany
   */
  export type AmenityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Amenities.
     */
    data: AmenityCreateManyInput | AmenityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Amenity createManyAndReturn
   */
  export type AmenityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * The data used to create many Amenities.
     */
    data: AmenityCreateManyInput | AmenityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Amenity update
   */
  export type AmenityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * The data needed to update a Amenity.
     */
    data: XOR<AmenityUpdateInput, AmenityUncheckedUpdateInput>
    /**
     * Choose, which Amenity to update.
     */
    where: AmenityWhereUniqueInput
  }

  /**
   * Amenity updateMany
   */
  export type AmenityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Amenities.
     */
    data: XOR<AmenityUpdateManyMutationInput, AmenityUncheckedUpdateManyInput>
    /**
     * Filter which Amenities to update
     */
    where?: AmenityWhereInput
    /**
     * Limit how many Amenities to update.
     */
    limit?: number
  }

  /**
   * Amenity updateManyAndReturn
   */
  export type AmenityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * The data used to update Amenities.
     */
    data: XOR<AmenityUpdateManyMutationInput, AmenityUncheckedUpdateManyInput>
    /**
     * Filter which Amenities to update
     */
    where?: AmenityWhereInput
    /**
     * Limit how many Amenities to update.
     */
    limit?: number
  }

  /**
   * Amenity upsert
   */
  export type AmenityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * The filter to search for the Amenity to update in case it exists.
     */
    where: AmenityWhereUniqueInput
    /**
     * In case the Amenity found by the `where` argument doesn't exist, create a new Amenity with this data.
     */
    create: XOR<AmenityCreateInput, AmenityUncheckedCreateInput>
    /**
     * In case the Amenity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AmenityUpdateInput, AmenityUncheckedUpdateInput>
  }

  /**
   * Amenity delete
   */
  export type AmenityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter which Amenity to delete.
     */
    where: AmenityWhereUniqueInput
  }

  /**
   * Amenity deleteMany
   */
  export type AmenityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Amenities to delete
     */
    where?: AmenityWhereInput
    /**
     * Limit how many Amenities to delete.
     */
    limit?: number
  }

  /**
   * Amenity.realEstateObjects
   */
  export type Amenity$realEstateObjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    where?: AmenitiesOnRealEstateWhereInput
    orderBy?: AmenitiesOnRealEstateOrderByWithRelationInput | AmenitiesOnRealEstateOrderByWithRelationInput[]
    cursor?: AmenitiesOnRealEstateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmenitiesOnRealEstateScalarFieldEnum | AmenitiesOnRealEstateScalarFieldEnum[]
  }

  /**
   * Amenity without action
   */
  export type AmenityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
  }


  /**
   * Model AmenitiesOnRealEstate
   */

  export type AggregateAmenitiesOnRealEstate = {
    _count: AmenitiesOnRealEstateCountAggregateOutputType | null
    _avg: AmenitiesOnRealEstateAvgAggregateOutputType | null
    _sum: AmenitiesOnRealEstateSumAggregateOutputType | null
    _min: AmenitiesOnRealEstateMinAggregateOutputType | null
    _max: AmenitiesOnRealEstateMaxAggregateOutputType | null
  }

  export type AmenitiesOnRealEstateAvgAggregateOutputType = {
    amenityId: number | null
    realEstateObjectId: number | null
    unitId: number | null
  }

  export type AmenitiesOnRealEstateSumAggregateOutputType = {
    amenityId: number | null
    realEstateObjectId: number | null
    unitId: number | null
  }

  export type AmenitiesOnRealEstateMinAggregateOutputType = {
    amenityId: number | null
    realEstateObjectId: number | null
    assignedAt: Date | null
    assignedBy: string | null
    unitId: number | null
  }

  export type AmenitiesOnRealEstateMaxAggregateOutputType = {
    amenityId: number | null
    realEstateObjectId: number | null
    assignedAt: Date | null
    assignedBy: string | null
    unitId: number | null
  }

  export type AmenitiesOnRealEstateCountAggregateOutputType = {
    amenityId: number
    realEstateObjectId: number
    assignedAt: number
    assignedBy: number
    unitId: number
    _all: number
  }


  export type AmenitiesOnRealEstateAvgAggregateInputType = {
    amenityId?: true
    realEstateObjectId?: true
    unitId?: true
  }

  export type AmenitiesOnRealEstateSumAggregateInputType = {
    amenityId?: true
    realEstateObjectId?: true
    unitId?: true
  }

  export type AmenitiesOnRealEstateMinAggregateInputType = {
    amenityId?: true
    realEstateObjectId?: true
    assignedAt?: true
    assignedBy?: true
    unitId?: true
  }

  export type AmenitiesOnRealEstateMaxAggregateInputType = {
    amenityId?: true
    realEstateObjectId?: true
    assignedAt?: true
    assignedBy?: true
    unitId?: true
  }

  export type AmenitiesOnRealEstateCountAggregateInputType = {
    amenityId?: true
    realEstateObjectId?: true
    assignedAt?: true
    assignedBy?: true
    unitId?: true
    _all?: true
  }

  export type AmenitiesOnRealEstateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AmenitiesOnRealEstate to aggregate.
     */
    where?: AmenitiesOnRealEstateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmenitiesOnRealEstates to fetch.
     */
    orderBy?: AmenitiesOnRealEstateOrderByWithRelationInput | AmenitiesOnRealEstateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AmenitiesOnRealEstateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmenitiesOnRealEstates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmenitiesOnRealEstates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AmenitiesOnRealEstates
    **/
    _count?: true | AmenitiesOnRealEstateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AmenitiesOnRealEstateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AmenitiesOnRealEstateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AmenitiesOnRealEstateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AmenitiesOnRealEstateMaxAggregateInputType
  }

  export type GetAmenitiesOnRealEstateAggregateType<T extends AmenitiesOnRealEstateAggregateArgs> = {
        [P in keyof T & keyof AggregateAmenitiesOnRealEstate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAmenitiesOnRealEstate[P]>
      : GetScalarType<T[P], AggregateAmenitiesOnRealEstate[P]>
  }




  export type AmenitiesOnRealEstateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmenitiesOnRealEstateWhereInput
    orderBy?: AmenitiesOnRealEstateOrderByWithAggregationInput | AmenitiesOnRealEstateOrderByWithAggregationInput[]
    by: AmenitiesOnRealEstateScalarFieldEnum[] | AmenitiesOnRealEstateScalarFieldEnum
    having?: AmenitiesOnRealEstateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AmenitiesOnRealEstateCountAggregateInputType | true
    _avg?: AmenitiesOnRealEstateAvgAggregateInputType
    _sum?: AmenitiesOnRealEstateSumAggregateInputType
    _min?: AmenitiesOnRealEstateMinAggregateInputType
    _max?: AmenitiesOnRealEstateMaxAggregateInputType
  }

  export type AmenitiesOnRealEstateGroupByOutputType = {
    amenityId: number
    realEstateObjectId: number
    assignedAt: Date
    assignedBy: string
    unitId: number | null
    _count: AmenitiesOnRealEstateCountAggregateOutputType | null
    _avg: AmenitiesOnRealEstateAvgAggregateOutputType | null
    _sum: AmenitiesOnRealEstateSumAggregateOutputType | null
    _min: AmenitiesOnRealEstateMinAggregateOutputType | null
    _max: AmenitiesOnRealEstateMaxAggregateOutputType | null
  }

  type GetAmenitiesOnRealEstateGroupByPayload<T extends AmenitiesOnRealEstateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AmenitiesOnRealEstateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AmenitiesOnRealEstateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AmenitiesOnRealEstateGroupByOutputType[P]>
            : GetScalarType<T[P], AmenitiesOnRealEstateGroupByOutputType[P]>
        }
      >
    >


  export type AmenitiesOnRealEstateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    amenityId?: boolean
    realEstateObjectId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
    unitId?: boolean
    amenity?: boolean | AmenityDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    unit?: boolean | AmenitiesOnRealEstate$unitArgs<ExtArgs>
  }, ExtArgs["result"]["amenitiesOnRealEstate"]>

  export type AmenitiesOnRealEstateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    amenityId?: boolean
    realEstateObjectId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
    unitId?: boolean
    amenity?: boolean | AmenityDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    unit?: boolean | AmenitiesOnRealEstate$unitArgs<ExtArgs>
  }, ExtArgs["result"]["amenitiesOnRealEstate"]>

  export type AmenitiesOnRealEstateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    amenityId?: boolean
    realEstateObjectId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
    unitId?: boolean
    amenity?: boolean | AmenityDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    unit?: boolean | AmenitiesOnRealEstate$unitArgs<ExtArgs>
  }, ExtArgs["result"]["amenitiesOnRealEstate"]>

  export type AmenitiesOnRealEstateSelectScalar = {
    amenityId?: boolean
    realEstateObjectId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
    unitId?: boolean
  }

  export type AmenitiesOnRealEstateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"amenityId" | "realEstateObjectId" | "assignedAt" | "assignedBy" | "unitId", ExtArgs["result"]["amenitiesOnRealEstate"]>
  export type AmenitiesOnRealEstateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenity?: boolean | AmenityDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    unit?: boolean | AmenitiesOnRealEstate$unitArgs<ExtArgs>
  }
  export type AmenitiesOnRealEstateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenity?: boolean | AmenityDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    unit?: boolean | AmenitiesOnRealEstate$unitArgs<ExtArgs>
  }
  export type AmenitiesOnRealEstateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenity?: boolean | AmenityDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    unit?: boolean | AmenitiesOnRealEstate$unitArgs<ExtArgs>
  }

  export type $AmenitiesOnRealEstatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AmenitiesOnRealEstate"
    objects: {
      amenity: Prisma.$AmenityPayload<ExtArgs>
      realEstateObject: Prisma.$RealEstateObjectPayload<ExtArgs>
      unit: Prisma.$UnitPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      amenityId: number
      realEstateObjectId: number
      assignedAt: Date
      assignedBy: string
      unitId: number | null
    }, ExtArgs["result"]["amenitiesOnRealEstate"]>
    composites: {}
  }

  type AmenitiesOnRealEstateGetPayload<S extends boolean | null | undefined | AmenitiesOnRealEstateDefaultArgs> = $Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload, S>

  type AmenitiesOnRealEstateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AmenitiesOnRealEstateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AmenitiesOnRealEstateCountAggregateInputType | true
    }

  export interface AmenitiesOnRealEstateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AmenitiesOnRealEstate'], meta: { name: 'AmenitiesOnRealEstate' } }
    /**
     * Find zero or one AmenitiesOnRealEstate that matches the filter.
     * @param {AmenitiesOnRealEstateFindUniqueArgs} args - Arguments to find a AmenitiesOnRealEstate
     * @example
     * // Get one AmenitiesOnRealEstate
     * const amenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AmenitiesOnRealEstateFindUniqueArgs>(args: SelectSubset<T, AmenitiesOnRealEstateFindUniqueArgs<ExtArgs>>): Prisma__AmenitiesOnRealEstateClient<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AmenitiesOnRealEstate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AmenitiesOnRealEstateFindUniqueOrThrowArgs} args - Arguments to find a AmenitiesOnRealEstate
     * @example
     * // Get one AmenitiesOnRealEstate
     * const amenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AmenitiesOnRealEstateFindUniqueOrThrowArgs>(args: SelectSubset<T, AmenitiesOnRealEstateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AmenitiesOnRealEstateClient<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AmenitiesOnRealEstate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenitiesOnRealEstateFindFirstArgs} args - Arguments to find a AmenitiesOnRealEstate
     * @example
     * // Get one AmenitiesOnRealEstate
     * const amenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AmenitiesOnRealEstateFindFirstArgs>(args?: SelectSubset<T, AmenitiesOnRealEstateFindFirstArgs<ExtArgs>>): Prisma__AmenitiesOnRealEstateClient<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AmenitiesOnRealEstate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenitiesOnRealEstateFindFirstOrThrowArgs} args - Arguments to find a AmenitiesOnRealEstate
     * @example
     * // Get one AmenitiesOnRealEstate
     * const amenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AmenitiesOnRealEstateFindFirstOrThrowArgs>(args?: SelectSubset<T, AmenitiesOnRealEstateFindFirstOrThrowArgs<ExtArgs>>): Prisma__AmenitiesOnRealEstateClient<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AmenitiesOnRealEstates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenitiesOnRealEstateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AmenitiesOnRealEstates
     * const amenitiesOnRealEstates = await prisma.amenitiesOnRealEstate.findMany()
     * 
     * // Get first 10 AmenitiesOnRealEstates
     * const amenitiesOnRealEstates = await prisma.amenitiesOnRealEstate.findMany({ take: 10 })
     * 
     * // Only select the `amenityId`
     * const amenitiesOnRealEstateWithAmenityIdOnly = await prisma.amenitiesOnRealEstate.findMany({ select: { amenityId: true } })
     * 
     */
    findMany<T extends AmenitiesOnRealEstateFindManyArgs>(args?: SelectSubset<T, AmenitiesOnRealEstateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AmenitiesOnRealEstate.
     * @param {AmenitiesOnRealEstateCreateArgs} args - Arguments to create a AmenitiesOnRealEstate.
     * @example
     * // Create one AmenitiesOnRealEstate
     * const AmenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.create({
     *   data: {
     *     // ... data to create a AmenitiesOnRealEstate
     *   }
     * })
     * 
     */
    create<T extends AmenitiesOnRealEstateCreateArgs>(args: SelectSubset<T, AmenitiesOnRealEstateCreateArgs<ExtArgs>>): Prisma__AmenitiesOnRealEstateClient<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AmenitiesOnRealEstates.
     * @param {AmenitiesOnRealEstateCreateManyArgs} args - Arguments to create many AmenitiesOnRealEstates.
     * @example
     * // Create many AmenitiesOnRealEstates
     * const amenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AmenitiesOnRealEstateCreateManyArgs>(args?: SelectSubset<T, AmenitiesOnRealEstateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AmenitiesOnRealEstates and returns the data saved in the database.
     * @param {AmenitiesOnRealEstateCreateManyAndReturnArgs} args - Arguments to create many AmenitiesOnRealEstates.
     * @example
     * // Create many AmenitiesOnRealEstates
     * const amenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AmenitiesOnRealEstates and only return the `amenityId`
     * const amenitiesOnRealEstateWithAmenityIdOnly = await prisma.amenitiesOnRealEstate.createManyAndReturn({
     *   select: { amenityId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AmenitiesOnRealEstateCreateManyAndReturnArgs>(args?: SelectSubset<T, AmenitiesOnRealEstateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AmenitiesOnRealEstate.
     * @param {AmenitiesOnRealEstateDeleteArgs} args - Arguments to delete one AmenitiesOnRealEstate.
     * @example
     * // Delete one AmenitiesOnRealEstate
     * const AmenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.delete({
     *   where: {
     *     // ... filter to delete one AmenitiesOnRealEstate
     *   }
     * })
     * 
     */
    delete<T extends AmenitiesOnRealEstateDeleteArgs>(args: SelectSubset<T, AmenitiesOnRealEstateDeleteArgs<ExtArgs>>): Prisma__AmenitiesOnRealEstateClient<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AmenitiesOnRealEstate.
     * @param {AmenitiesOnRealEstateUpdateArgs} args - Arguments to update one AmenitiesOnRealEstate.
     * @example
     * // Update one AmenitiesOnRealEstate
     * const amenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AmenitiesOnRealEstateUpdateArgs>(args: SelectSubset<T, AmenitiesOnRealEstateUpdateArgs<ExtArgs>>): Prisma__AmenitiesOnRealEstateClient<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AmenitiesOnRealEstates.
     * @param {AmenitiesOnRealEstateDeleteManyArgs} args - Arguments to filter AmenitiesOnRealEstates to delete.
     * @example
     * // Delete a few AmenitiesOnRealEstates
     * const { count } = await prisma.amenitiesOnRealEstate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AmenitiesOnRealEstateDeleteManyArgs>(args?: SelectSubset<T, AmenitiesOnRealEstateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AmenitiesOnRealEstates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenitiesOnRealEstateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AmenitiesOnRealEstates
     * const amenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AmenitiesOnRealEstateUpdateManyArgs>(args: SelectSubset<T, AmenitiesOnRealEstateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AmenitiesOnRealEstates and returns the data updated in the database.
     * @param {AmenitiesOnRealEstateUpdateManyAndReturnArgs} args - Arguments to update many AmenitiesOnRealEstates.
     * @example
     * // Update many AmenitiesOnRealEstates
     * const amenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AmenitiesOnRealEstates and only return the `amenityId`
     * const amenitiesOnRealEstateWithAmenityIdOnly = await prisma.amenitiesOnRealEstate.updateManyAndReturn({
     *   select: { amenityId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AmenitiesOnRealEstateUpdateManyAndReturnArgs>(args: SelectSubset<T, AmenitiesOnRealEstateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AmenitiesOnRealEstate.
     * @param {AmenitiesOnRealEstateUpsertArgs} args - Arguments to update or create a AmenitiesOnRealEstate.
     * @example
     * // Update or create a AmenitiesOnRealEstate
     * const amenitiesOnRealEstate = await prisma.amenitiesOnRealEstate.upsert({
     *   create: {
     *     // ... data to create a AmenitiesOnRealEstate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AmenitiesOnRealEstate we want to update
     *   }
     * })
     */
    upsert<T extends AmenitiesOnRealEstateUpsertArgs>(args: SelectSubset<T, AmenitiesOnRealEstateUpsertArgs<ExtArgs>>): Prisma__AmenitiesOnRealEstateClient<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AmenitiesOnRealEstates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenitiesOnRealEstateCountArgs} args - Arguments to filter AmenitiesOnRealEstates to count.
     * @example
     * // Count the number of AmenitiesOnRealEstates
     * const count = await prisma.amenitiesOnRealEstate.count({
     *   where: {
     *     // ... the filter for the AmenitiesOnRealEstates we want to count
     *   }
     * })
    **/
    count<T extends AmenitiesOnRealEstateCountArgs>(
      args?: Subset<T, AmenitiesOnRealEstateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AmenitiesOnRealEstateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AmenitiesOnRealEstate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenitiesOnRealEstateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AmenitiesOnRealEstateAggregateArgs>(args: Subset<T, AmenitiesOnRealEstateAggregateArgs>): Prisma.PrismaPromise<GetAmenitiesOnRealEstateAggregateType<T>>

    /**
     * Group by AmenitiesOnRealEstate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenitiesOnRealEstateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AmenitiesOnRealEstateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AmenitiesOnRealEstateGroupByArgs['orderBy'] }
        : { orderBy?: AmenitiesOnRealEstateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AmenitiesOnRealEstateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAmenitiesOnRealEstateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AmenitiesOnRealEstate model
   */
  readonly fields: AmenitiesOnRealEstateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AmenitiesOnRealEstate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AmenitiesOnRealEstateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    amenity<T extends AmenityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AmenityDefaultArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    realEstateObject<T extends RealEstateObjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RealEstateObjectDefaultArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    unit<T extends AmenitiesOnRealEstate$unitArgs<ExtArgs> = {}>(args?: Subset<T, AmenitiesOnRealEstate$unitArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AmenitiesOnRealEstate model
   */
  interface AmenitiesOnRealEstateFieldRefs {
    readonly amenityId: FieldRef<"AmenitiesOnRealEstate", 'Int'>
    readonly realEstateObjectId: FieldRef<"AmenitiesOnRealEstate", 'Int'>
    readonly assignedAt: FieldRef<"AmenitiesOnRealEstate", 'DateTime'>
    readonly assignedBy: FieldRef<"AmenitiesOnRealEstate", 'String'>
    readonly unitId: FieldRef<"AmenitiesOnRealEstate", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AmenitiesOnRealEstate findUnique
   */
  export type AmenitiesOnRealEstateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter, which AmenitiesOnRealEstate to fetch.
     */
    where: AmenitiesOnRealEstateWhereUniqueInput
  }

  /**
   * AmenitiesOnRealEstate findUniqueOrThrow
   */
  export type AmenitiesOnRealEstateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter, which AmenitiesOnRealEstate to fetch.
     */
    where: AmenitiesOnRealEstateWhereUniqueInput
  }

  /**
   * AmenitiesOnRealEstate findFirst
   */
  export type AmenitiesOnRealEstateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter, which AmenitiesOnRealEstate to fetch.
     */
    where?: AmenitiesOnRealEstateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmenitiesOnRealEstates to fetch.
     */
    orderBy?: AmenitiesOnRealEstateOrderByWithRelationInput | AmenitiesOnRealEstateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AmenitiesOnRealEstates.
     */
    cursor?: AmenitiesOnRealEstateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmenitiesOnRealEstates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmenitiesOnRealEstates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AmenitiesOnRealEstates.
     */
    distinct?: AmenitiesOnRealEstateScalarFieldEnum | AmenitiesOnRealEstateScalarFieldEnum[]
  }

  /**
   * AmenitiesOnRealEstate findFirstOrThrow
   */
  export type AmenitiesOnRealEstateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter, which AmenitiesOnRealEstate to fetch.
     */
    where?: AmenitiesOnRealEstateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmenitiesOnRealEstates to fetch.
     */
    orderBy?: AmenitiesOnRealEstateOrderByWithRelationInput | AmenitiesOnRealEstateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AmenitiesOnRealEstates.
     */
    cursor?: AmenitiesOnRealEstateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmenitiesOnRealEstates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmenitiesOnRealEstates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AmenitiesOnRealEstates.
     */
    distinct?: AmenitiesOnRealEstateScalarFieldEnum | AmenitiesOnRealEstateScalarFieldEnum[]
  }

  /**
   * AmenitiesOnRealEstate findMany
   */
  export type AmenitiesOnRealEstateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter, which AmenitiesOnRealEstates to fetch.
     */
    where?: AmenitiesOnRealEstateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmenitiesOnRealEstates to fetch.
     */
    orderBy?: AmenitiesOnRealEstateOrderByWithRelationInput | AmenitiesOnRealEstateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AmenitiesOnRealEstates.
     */
    cursor?: AmenitiesOnRealEstateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmenitiesOnRealEstates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmenitiesOnRealEstates.
     */
    skip?: number
    distinct?: AmenitiesOnRealEstateScalarFieldEnum | AmenitiesOnRealEstateScalarFieldEnum[]
  }

  /**
   * AmenitiesOnRealEstate create
   */
  export type AmenitiesOnRealEstateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    /**
     * The data needed to create a AmenitiesOnRealEstate.
     */
    data: XOR<AmenitiesOnRealEstateCreateInput, AmenitiesOnRealEstateUncheckedCreateInput>
  }

  /**
   * AmenitiesOnRealEstate createMany
   */
  export type AmenitiesOnRealEstateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AmenitiesOnRealEstates.
     */
    data: AmenitiesOnRealEstateCreateManyInput | AmenitiesOnRealEstateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AmenitiesOnRealEstate createManyAndReturn
   */
  export type AmenitiesOnRealEstateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * The data used to create many AmenitiesOnRealEstates.
     */
    data: AmenitiesOnRealEstateCreateManyInput | AmenitiesOnRealEstateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AmenitiesOnRealEstate update
   */
  export type AmenitiesOnRealEstateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    /**
     * The data needed to update a AmenitiesOnRealEstate.
     */
    data: XOR<AmenitiesOnRealEstateUpdateInput, AmenitiesOnRealEstateUncheckedUpdateInput>
    /**
     * Choose, which AmenitiesOnRealEstate to update.
     */
    where: AmenitiesOnRealEstateWhereUniqueInput
  }

  /**
   * AmenitiesOnRealEstate updateMany
   */
  export type AmenitiesOnRealEstateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AmenitiesOnRealEstates.
     */
    data: XOR<AmenitiesOnRealEstateUpdateManyMutationInput, AmenitiesOnRealEstateUncheckedUpdateManyInput>
    /**
     * Filter which AmenitiesOnRealEstates to update
     */
    where?: AmenitiesOnRealEstateWhereInput
    /**
     * Limit how many AmenitiesOnRealEstates to update.
     */
    limit?: number
  }

  /**
   * AmenitiesOnRealEstate updateManyAndReturn
   */
  export type AmenitiesOnRealEstateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * The data used to update AmenitiesOnRealEstates.
     */
    data: XOR<AmenitiesOnRealEstateUpdateManyMutationInput, AmenitiesOnRealEstateUncheckedUpdateManyInput>
    /**
     * Filter which AmenitiesOnRealEstates to update
     */
    where?: AmenitiesOnRealEstateWhereInput
    /**
     * Limit how many AmenitiesOnRealEstates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AmenitiesOnRealEstate upsert
   */
  export type AmenitiesOnRealEstateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    /**
     * The filter to search for the AmenitiesOnRealEstate to update in case it exists.
     */
    where: AmenitiesOnRealEstateWhereUniqueInput
    /**
     * In case the AmenitiesOnRealEstate found by the `where` argument doesn't exist, create a new AmenitiesOnRealEstate with this data.
     */
    create: XOR<AmenitiesOnRealEstateCreateInput, AmenitiesOnRealEstateUncheckedCreateInput>
    /**
     * In case the AmenitiesOnRealEstate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AmenitiesOnRealEstateUpdateInput, AmenitiesOnRealEstateUncheckedUpdateInput>
  }

  /**
   * AmenitiesOnRealEstate delete
   */
  export type AmenitiesOnRealEstateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter which AmenitiesOnRealEstate to delete.
     */
    where: AmenitiesOnRealEstateWhereUniqueInput
  }

  /**
   * AmenitiesOnRealEstate deleteMany
   */
  export type AmenitiesOnRealEstateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AmenitiesOnRealEstates to delete
     */
    where?: AmenitiesOnRealEstateWhereInput
    /**
     * Limit how many AmenitiesOnRealEstates to delete.
     */
    limit?: number
  }

  /**
   * AmenitiesOnRealEstate.unit
   */
  export type AmenitiesOnRealEstate$unitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
  }

  /**
   * AmenitiesOnRealEstate without action
   */
  export type AmenitiesOnRealEstateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
  }


  /**
   * Model Preference
   */

  export type AggregatePreference = {
    _count: PreferenceCountAggregateOutputType | null
    _avg: PreferenceAvgAggregateOutputType | null
    _sum: PreferenceSumAggregateOutputType | null
    _min: PreferenceMinAggregateOutputType | null
    _max: PreferenceMaxAggregateOutputType | null
  }

  export type PreferenceAvgAggregateOutputType = {
    id: number | null
  }

  export type PreferenceSumAggregateOutputType = {
    id: number | null
  }

  export type PreferenceMinAggregateOutputType = {
    id: number | null
    name: string | null
    enabled: boolean | null
  }

  export type PreferenceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    enabled: boolean | null
  }

  export type PreferenceCountAggregateOutputType = {
    id: number
    name: number
    enabled: number
    _all: number
  }


  export type PreferenceAvgAggregateInputType = {
    id?: true
  }

  export type PreferenceSumAggregateInputType = {
    id?: true
  }

  export type PreferenceMinAggregateInputType = {
    id?: true
    name?: true
    enabled?: true
  }

  export type PreferenceMaxAggregateInputType = {
    id?: true
    name?: true
    enabled?: true
  }

  export type PreferenceCountAggregateInputType = {
    id?: true
    name?: true
    enabled?: true
    _all?: true
  }

  export type PreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Preference to aggregate.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Preferences
    **/
    _count?: true | PreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreferenceMaxAggregateInputType
  }

  export type GetPreferenceAggregateType<T extends PreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregatePreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreference[P]>
      : GetScalarType<T[P], AggregatePreference[P]>
  }




  export type PreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferenceWhereInput
    orderBy?: PreferenceOrderByWithAggregationInput | PreferenceOrderByWithAggregationInput[]
    by: PreferenceScalarFieldEnum[] | PreferenceScalarFieldEnum
    having?: PreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreferenceCountAggregateInputType | true
    _avg?: PreferenceAvgAggregateInputType
    _sum?: PreferenceSumAggregateInputType
    _min?: PreferenceMinAggregateInputType
    _max?: PreferenceMaxAggregateInputType
  }

  export type PreferenceGroupByOutputType = {
    id: number
    name: string
    enabled: boolean | null
    _count: PreferenceCountAggregateOutputType | null
    _avg: PreferenceAvgAggregateOutputType | null
    _sum: PreferenceSumAggregateOutputType | null
    _min: PreferenceMinAggregateOutputType | null
    _max: PreferenceMaxAggregateOutputType | null
  }

  type GetPreferenceGroupByPayload<T extends PreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], PreferenceGroupByOutputType[P]>
        }
      >
    >


  export type PreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    enabled?: boolean
    realEstateObjects?: boolean | Preference$realEstateObjectsArgs<ExtArgs>
    _count?: boolean | PreferenceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preference"]>

  export type PreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    enabled?: boolean
  }, ExtArgs["result"]["preference"]>

  export type PreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    enabled?: boolean
  }, ExtArgs["result"]["preference"]>

  export type PreferenceSelectScalar = {
    id?: boolean
    name?: boolean
    enabled?: boolean
  }

  export type PreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "enabled", ExtArgs["result"]["preference"]>
  export type PreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    realEstateObjects?: boolean | Preference$realEstateObjectsArgs<ExtArgs>
    _count?: boolean | PreferenceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PreferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PreferenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Preference"
    objects: {
      realEstateObjects: Prisma.$PreferencesOnRealEstatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      enabled: boolean | null
    }, ExtArgs["result"]["preference"]>
    composites: {}
  }

  type PreferenceGetPayload<S extends boolean | null | undefined | PreferenceDefaultArgs> = $Result.GetResult<Prisma.$PreferencePayload, S>

  type PreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PreferenceCountAggregateInputType | true
    }

  export interface PreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Preference'], meta: { name: 'Preference' } }
    /**
     * Find zero or one Preference that matches the filter.
     * @param {PreferenceFindUniqueArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreferenceFindUniqueArgs>(args: SelectSubset<T, PreferenceFindUniqueArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Preference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PreferenceFindUniqueOrThrowArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, PreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Preference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceFindFirstArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreferenceFindFirstArgs>(args?: SelectSubset<T, PreferenceFindFirstArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Preference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceFindFirstOrThrowArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, PreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Preferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Preferences
     * const preferences = await prisma.preference.findMany()
     * 
     * // Get first 10 Preferences
     * const preferences = await prisma.preference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preferenceWithIdOnly = await prisma.preference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreferenceFindManyArgs>(args?: SelectSubset<T, PreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Preference.
     * @param {PreferenceCreateArgs} args - Arguments to create a Preference.
     * @example
     * // Create one Preference
     * const Preference = await prisma.preference.create({
     *   data: {
     *     // ... data to create a Preference
     *   }
     * })
     * 
     */
    create<T extends PreferenceCreateArgs>(args: SelectSubset<T, PreferenceCreateArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Preferences.
     * @param {PreferenceCreateManyArgs} args - Arguments to create many Preferences.
     * @example
     * // Create many Preferences
     * const preference = await prisma.preference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreferenceCreateManyArgs>(args?: SelectSubset<T, PreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Preferences and returns the data saved in the database.
     * @param {PreferenceCreateManyAndReturnArgs} args - Arguments to create many Preferences.
     * @example
     * // Create many Preferences
     * const preference = await prisma.preference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Preferences and only return the `id`
     * const preferenceWithIdOnly = await prisma.preference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, PreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Preference.
     * @param {PreferenceDeleteArgs} args - Arguments to delete one Preference.
     * @example
     * // Delete one Preference
     * const Preference = await prisma.preference.delete({
     *   where: {
     *     // ... filter to delete one Preference
     *   }
     * })
     * 
     */
    delete<T extends PreferenceDeleteArgs>(args: SelectSubset<T, PreferenceDeleteArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Preference.
     * @param {PreferenceUpdateArgs} args - Arguments to update one Preference.
     * @example
     * // Update one Preference
     * const preference = await prisma.preference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreferenceUpdateArgs>(args: SelectSubset<T, PreferenceUpdateArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Preferences.
     * @param {PreferenceDeleteManyArgs} args - Arguments to filter Preferences to delete.
     * @example
     * // Delete a few Preferences
     * const { count } = await prisma.preference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreferenceDeleteManyArgs>(args?: SelectSubset<T, PreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Preferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Preferences
     * const preference = await prisma.preference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreferenceUpdateManyArgs>(args: SelectSubset<T, PreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Preferences and returns the data updated in the database.
     * @param {PreferenceUpdateManyAndReturnArgs} args - Arguments to update many Preferences.
     * @example
     * // Update many Preferences
     * const preference = await prisma.preference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Preferences and only return the `id`
     * const preferenceWithIdOnly = await prisma.preference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, PreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Preference.
     * @param {PreferenceUpsertArgs} args - Arguments to update or create a Preference.
     * @example
     * // Update or create a Preference
     * const preference = await prisma.preference.upsert({
     *   create: {
     *     // ... data to create a Preference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Preference we want to update
     *   }
     * })
     */
    upsert<T extends PreferenceUpsertArgs>(args: SelectSubset<T, PreferenceUpsertArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Preferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceCountArgs} args - Arguments to filter Preferences to count.
     * @example
     * // Count the number of Preferences
     * const count = await prisma.preference.count({
     *   where: {
     *     // ... the filter for the Preferences we want to count
     *   }
     * })
    **/
    count<T extends PreferenceCountArgs>(
      args?: Subset<T, PreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Preference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreferenceAggregateArgs>(args: Subset<T, PreferenceAggregateArgs>): Prisma.PrismaPromise<GetPreferenceAggregateType<T>>

    /**
     * Group by Preference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreferenceGroupByArgs['orderBy'] }
        : { orderBy?: PreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Preference model
   */
  readonly fields: PreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Preference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    realEstateObjects<T extends Preference$realEstateObjectsArgs<ExtArgs> = {}>(args?: Subset<T, Preference$realEstateObjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Preference model
   */
  interface PreferenceFieldRefs {
    readonly id: FieldRef<"Preference", 'Int'>
    readonly name: FieldRef<"Preference", 'String'>
    readonly enabled: FieldRef<"Preference", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Preference findUnique
   */
  export type PreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference findUniqueOrThrow
   */
  export type PreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference findFirst
   */
  export type PreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Preferences.
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Preferences.
     */
    distinct?: PreferenceScalarFieldEnum | PreferenceScalarFieldEnum[]
  }

  /**
   * Preference findFirstOrThrow
   */
  export type PreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Preferences.
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Preferences.
     */
    distinct?: PreferenceScalarFieldEnum | PreferenceScalarFieldEnum[]
  }

  /**
   * Preference findMany
   */
  export type PreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter, which Preferences to fetch.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Preferences.
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    distinct?: PreferenceScalarFieldEnum | PreferenceScalarFieldEnum[]
  }

  /**
   * Preference create
   */
  export type PreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Preference.
     */
    data: XOR<PreferenceCreateInput, PreferenceUncheckedCreateInput>
  }

  /**
   * Preference createMany
   */
  export type PreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Preferences.
     */
    data: PreferenceCreateManyInput | PreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Preference createManyAndReturn
   */
  export type PreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many Preferences.
     */
    data: PreferenceCreateManyInput | PreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Preference update
   */
  export type PreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Preference.
     */
    data: XOR<PreferenceUpdateInput, PreferenceUncheckedUpdateInput>
    /**
     * Choose, which Preference to update.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference updateMany
   */
  export type PreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Preferences.
     */
    data: XOR<PreferenceUpdateManyMutationInput, PreferenceUncheckedUpdateManyInput>
    /**
     * Filter which Preferences to update
     */
    where?: PreferenceWhereInput
    /**
     * Limit how many Preferences to update.
     */
    limit?: number
  }

  /**
   * Preference updateManyAndReturn
   */
  export type PreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * The data used to update Preferences.
     */
    data: XOR<PreferenceUpdateManyMutationInput, PreferenceUncheckedUpdateManyInput>
    /**
     * Filter which Preferences to update
     */
    where?: PreferenceWhereInput
    /**
     * Limit how many Preferences to update.
     */
    limit?: number
  }

  /**
   * Preference upsert
   */
  export type PreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Preference to update in case it exists.
     */
    where: PreferenceWhereUniqueInput
    /**
     * In case the Preference found by the `where` argument doesn't exist, create a new Preference with this data.
     */
    create: XOR<PreferenceCreateInput, PreferenceUncheckedCreateInput>
    /**
     * In case the Preference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreferenceUpdateInput, PreferenceUncheckedUpdateInput>
  }

  /**
   * Preference delete
   */
  export type PreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter which Preference to delete.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference deleteMany
   */
  export type PreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Preferences to delete
     */
    where?: PreferenceWhereInput
    /**
     * Limit how many Preferences to delete.
     */
    limit?: number
  }

  /**
   * Preference.realEstateObjects
   */
  export type Preference$realEstateObjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
    where?: PreferencesOnRealEstateWhereInput
    orderBy?: PreferencesOnRealEstateOrderByWithRelationInput | PreferencesOnRealEstateOrderByWithRelationInput[]
    cursor?: PreferencesOnRealEstateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreferencesOnRealEstateScalarFieldEnum | PreferencesOnRealEstateScalarFieldEnum[]
  }

  /**
   * Preference without action
   */
  export type PreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
  }


  /**
   * Model PreferencesOnRealEstate
   */

  export type AggregatePreferencesOnRealEstate = {
    _count: PreferencesOnRealEstateCountAggregateOutputType | null
    _avg: PreferencesOnRealEstateAvgAggregateOutputType | null
    _sum: PreferencesOnRealEstateSumAggregateOutputType | null
    _min: PreferencesOnRealEstateMinAggregateOutputType | null
    _max: PreferencesOnRealEstateMaxAggregateOutputType | null
  }

  export type PreferencesOnRealEstateAvgAggregateOutputType = {
    preferenceId: number | null
    realEstateObjectId: number | null
  }

  export type PreferencesOnRealEstateSumAggregateOutputType = {
    preferenceId: number | null
    realEstateObjectId: number | null
  }

  export type PreferencesOnRealEstateMinAggregateOutputType = {
    preferenceId: number | null
    realEstateObjectId: number | null
    assignedAt: Date | null
    assignedBy: string | null
  }

  export type PreferencesOnRealEstateMaxAggregateOutputType = {
    preferenceId: number | null
    realEstateObjectId: number | null
    assignedAt: Date | null
    assignedBy: string | null
  }

  export type PreferencesOnRealEstateCountAggregateOutputType = {
    preferenceId: number
    realEstateObjectId: number
    assignedAt: number
    assignedBy: number
    _all: number
  }


  export type PreferencesOnRealEstateAvgAggregateInputType = {
    preferenceId?: true
    realEstateObjectId?: true
  }

  export type PreferencesOnRealEstateSumAggregateInputType = {
    preferenceId?: true
    realEstateObjectId?: true
  }

  export type PreferencesOnRealEstateMinAggregateInputType = {
    preferenceId?: true
    realEstateObjectId?: true
    assignedAt?: true
    assignedBy?: true
  }

  export type PreferencesOnRealEstateMaxAggregateInputType = {
    preferenceId?: true
    realEstateObjectId?: true
    assignedAt?: true
    assignedBy?: true
  }

  export type PreferencesOnRealEstateCountAggregateInputType = {
    preferenceId?: true
    realEstateObjectId?: true
    assignedAt?: true
    assignedBy?: true
    _all?: true
  }

  export type PreferencesOnRealEstateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreferencesOnRealEstate to aggregate.
     */
    where?: PreferencesOnRealEstateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferencesOnRealEstates to fetch.
     */
    orderBy?: PreferencesOnRealEstateOrderByWithRelationInput | PreferencesOnRealEstateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreferencesOnRealEstateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferencesOnRealEstates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferencesOnRealEstates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PreferencesOnRealEstates
    **/
    _count?: true | PreferencesOnRealEstateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreferencesOnRealEstateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreferencesOnRealEstateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreferencesOnRealEstateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreferencesOnRealEstateMaxAggregateInputType
  }

  export type GetPreferencesOnRealEstateAggregateType<T extends PreferencesOnRealEstateAggregateArgs> = {
        [P in keyof T & keyof AggregatePreferencesOnRealEstate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreferencesOnRealEstate[P]>
      : GetScalarType<T[P], AggregatePreferencesOnRealEstate[P]>
  }




  export type PreferencesOnRealEstateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferencesOnRealEstateWhereInput
    orderBy?: PreferencesOnRealEstateOrderByWithAggregationInput | PreferencesOnRealEstateOrderByWithAggregationInput[]
    by: PreferencesOnRealEstateScalarFieldEnum[] | PreferencesOnRealEstateScalarFieldEnum
    having?: PreferencesOnRealEstateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreferencesOnRealEstateCountAggregateInputType | true
    _avg?: PreferencesOnRealEstateAvgAggregateInputType
    _sum?: PreferencesOnRealEstateSumAggregateInputType
    _min?: PreferencesOnRealEstateMinAggregateInputType
    _max?: PreferencesOnRealEstateMaxAggregateInputType
  }

  export type PreferencesOnRealEstateGroupByOutputType = {
    preferenceId: number
    realEstateObjectId: number
    assignedAt: Date
    assignedBy: string
    _count: PreferencesOnRealEstateCountAggregateOutputType | null
    _avg: PreferencesOnRealEstateAvgAggregateOutputType | null
    _sum: PreferencesOnRealEstateSumAggregateOutputType | null
    _min: PreferencesOnRealEstateMinAggregateOutputType | null
    _max: PreferencesOnRealEstateMaxAggregateOutputType | null
  }

  type GetPreferencesOnRealEstateGroupByPayload<T extends PreferencesOnRealEstateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreferencesOnRealEstateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreferencesOnRealEstateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreferencesOnRealEstateGroupByOutputType[P]>
            : GetScalarType<T[P], PreferencesOnRealEstateGroupByOutputType[P]>
        }
      >
    >


  export type PreferencesOnRealEstateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    preferenceId?: boolean
    realEstateObjectId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
    preference?: boolean | PreferenceDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferencesOnRealEstate"]>

  export type PreferencesOnRealEstateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    preferenceId?: boolean
    realEstateObjectId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
    preference?: boolean | PreferenceDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferencesOnRealEstate"]>

  export type PreferencesOnRealEstateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    preferenceId?: boolean
    realEstateObjectId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
    preference?: boolean | PreferenceDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferencesOnRealEstate"]>

  export type PreferencesOnRealEstateSelectScalar = {
    preferenceId?: boolean
    realEstateObjectId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
  }

  export type PreferencesOnRealEstateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"preferenceId" | "realEstateObjectId" | "assignedAt" | "assignedBy", ExtArgs["result"]["preferencesOnRealEstate"]>
  export type PreferencesOnRealEstateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    preference?: boolean | PreferenceDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
  }
  export type PreferencesOnRealEstateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    preference?: boolean | PreferenceDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
  }
  export type PreferencesOnRealEstateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    preference?: boolean | PreferenceDefaultArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
  }

  export type $PreferencesOnRealEstatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PreferencesOnRealEstate"
    objects: {
      preference: Prisma.$PreferencePayload<ExtArgs>
      realEstateObject: Prisma.$RealEstateObjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      preferenceId: number
      realEstateObjectId: number
      assignedAt: Date
      assignedBy: string
    }, ExtArgs["result"]["preferencesOnRealEstate"]>
    composites: {}
  }

  type PreferencesOnRealEstateGetPayload<S extends boolean | null | undefined | PreferencesOnRealEstateDefaultArgs> = $Result.GetResult<Prisma.$PreferencesOnRealEstatePayload, S>

  type PreferencesOnRealEstateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PreferencesOnRealEstateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PreferencesOnRealEstateCountAggregateInputType | true
    }

  export interface PreferencesOnRealEstateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PreferencesOnRealEstate'], meta: { name: 'PreferencesOnRealEstate' } }
    /**
     * Find zero or one PreferencesOnRealEstate that matches the filter.
     * @param {PreferencesOnRealEstateFindUniqueArgs} args - Arguments to find a PreferencesOnRealEstate
     * @example
     * // Get one PreferencesOnRealEstate
     * const preferencesOnRealEstate = await prisma.preferencesOnRealEstate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreferencesOnRealEstateFindUniqueArgs>(args: SelectSubset<T, PreferencesOnRealEstateFindUniqueArgs<ExtArgs>>): Prisma__PreferencesOnRealEstateClient<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PreferencesOnRealEstate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PreferencesOnRealEstateFindUniqueOrThrowArgs} args - Arguments to find a PreferencesOnRealEstate
     * @example
     * // Get one PreferencesOnRealEstate
     * const preferencesOnRealEstate = await prisma.preferencesOnRealEstate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreferencesOnRealEstateFindUniqueOrThrowArgs>(args: SelectSubset<T, PreferencesOnRealEstateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreferencesOnRealEstateClient<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreferencesOnRealEstate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesOnRealEstateFindFirstArgs} args - Arguments to find a PreferencesOnRealEstate
     * @example
     * // Get one PreferencesOnRealEstate
     * const preferencesOnRealEstate = await prisma.preferencesOnRealEstate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreferencesOnRealEstateFindFirstArgs>(args?: SelectSubset<T, PreferencesOnRealEstateFindFirstArgs<ExtArgs>>): Prisma__PreferencesOnRealEstateClient<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreferencesOnRealEstate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesOnRealEstateFindFirstOrThrowArgs} args - Arguments to find a PreferencesOnRealEstate
     * @example
     * // Get one PreferencesOnRealEstate
     * const preferencesOnRealEstate = await prisma.preferencesOnRealEstate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreferencesOnRealEstateFindFirstOrThrowArgs>(args?: SelectSubset<T, PreferencesOnRealEstateFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreferencesOnRealEstateClient<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PreferencesOnRealEstates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesOnRealEstateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PreferencesOnRealEstates
     * const preferencesOnRealEstates = await prisma.preferencesOnRealEstate.findMany()
     * 
     * // Get first 10 PreferencesOnRealEstates
     * const preferencesOnRealEstates = await prisma.preferencesOnRealEstate.findMany({ take: 10 })
     * 
     * // Only select the `preferenceId`
     * const preferencesOnRealEstateWithPreferenceIdOnly = await prisma.preferencesOnRealEstate.findMany({ select: { preferenceId: true } })
     * 
     */
    findMany<T extends PreferencesOnRealEstateFindManyArgs>(args?: SelectSubset<T, PreferencesOnRealEstateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PreferencesOnRealEstate.
     * @param {PreferencesOnRealEstateCreateArgs} args - Arguments to create a PreferencesOnRealEstate.
     * @example
     * // Create one PreferencesOnRealEstate
     * const PreferencesOnRealEstate = await prisma.preferencesOnRealEstate.create({
     *   data: {
     *     // ... data to create a PreferencesOnRealEstate
     *   }
     * })
     * 
     */
    create<T extends PreferencesOnRealEstateCreateArgs>(args: SelectSubset<T, PreferencesOnRealEstateCreateArgs<ExtArgs>>): Prisma__PreferencesOnRealEstateClient<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PreferencesOnRealEstates.
     * @param {PreferencesOnRealEstateCreateManyArgs} args - Arguments to create many PreferencesOnRealEstates.
     * @example
     * // Create many PreferencesOnRealEstates
     * const preferencesOnRealEstate = await prisma.preferencesOnRealEstate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreferencesOnRealEstateCreateManyArgs>(args?: SelectSubset<T, PreferencesOnRealEstateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PreferencesOnRealEstates and returns the data saved in the database.
     * @param {PreferencesOnRealEstateCreateManyAndReturnArgs} args - Arguments to create many PreferencesOnRealEstates.
     * @example
     * // Create many PreferencesOnRealEstates
     * const preferencesOnRealEstate = await prisma.preferencesOnRealEstate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PreferencesOnRealEstates and only return the `preferenceId`
     * const preferencesOnRealEstateWithPreferenceIdOnly = await prisma.preferencesOnRealEstate.createManyAndReturn({
     *   select: { preferenceId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreferencesOnRealEstateCreateManyAndReturnArgs>(args?: SelectSubset<T, PreferencesOnRealEstateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PreferencesOnRealEstate.
     * @param {PreferencesOnRealEstateDeleteArgs} args - Arguments to delete one PreferencesOnRealEstate.
     * @example
     * // Delete one PreferencesOnRealEstate
     * const PreferencesOnRealEstate = await prisma.preferencesOnRealEstate.delete({
     *   where: {
     *     // ... filter to delete one PreferencesOnRealEstate
     *   }
     * })
     * 
     */
    delete<T extends PreferencesOnRealEstateDeleteArgs>(args: SelectSubset<T, PreferencesOnRealEstateDeleteArgs<ExtArgs>>): Prisma__PreferencesOnRealEstateClient<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PreferencesOnRealEstate.
     * @param {PreferencesOnRealEstateUpdateArgs} args - Arguments to update one PreferencesOnRealEstate.
     * @example
     * // Update one PreferencesOnRealEstate
     * const preferencesOnRealEstate = await prisma.preferencesOnRealEstate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreferencesOnRealEstateUpdateArgs>(args: SelectSubset<T, PreferencesOnRealEstateUpdateArgs<ExtArgs>>): Prisma__PreferencesOnRealEstateClient<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PreferencesOnRealEstates.
     * @param {PreferencesOnRealEstateDeleteManyArgs} args - Arguments to filter PreferencesOnRealEstates to delete.
     * @example
     * // Delete a few PreferencesOnRealEstates
     * const { count } = await prisma.preferencesOnRealEstate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreferencesOnRealEstateDeleteManyArgs>(args?: SelectSubset<T, PreferencesOnRealEstateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreferencesOnRealEstates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesOnRealEstateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PreferencesOnRealEstates
     * const preferencesOnRealEstate = await prisma.preferencesOnRealEstate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreferencesOnRealEstateUpdateManyArgs>(args: SelectSubset<T, PreferencesOnRealEstateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreferencesOnRealEstates and returns the data updated in the database.
     * @param {PreferencesOnRealEstateUpdateManyAndReturnArgs} args - Arguments to update many PreferencesOnRealEstates.
     * @example
     * // Update many PreferencesOnRealEstates
     * const preferencesOnRealEstate = await prisma.preferencesOnRealEstate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PreferencesOnRealEstates and only return the `preferenceId`
     * const preferencesOnRealEstateWithPreferenceIdOnly = await prisma.preferencesOnRealEstate.updateManyAndReturn({
     *   select: { preferenceId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PreferencesOnRealEstateUpdateManyAndReturnArgs>(args: SelectSubset<T, PreferencesOnRealEstateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PreferencesOnRealEstate.
     * @param {PreferencesOnRealEstateUpsertArgs} args - Arguments to update or create a PreferencesOnRealEstate.
     * @example
     * // Update or create a PreferencesOnRealEstate
     * const preferencesOnRealEstate = await prisma.preferencesOnRealEstate.upsert({
     *   create: {
     *     // ... data to create a PreferencesOnRealEstate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PreferencesOnRealEstate we want to update
     *   }
     * })
     */
    upsert<T extends PreferencesOnRealEstateUpsertArgs>(args: SelectSubset<T, PreferencesOnRealEstateUpsertArgs<ExtArgs>>): Prisma__PreferencesOnRealEstateClient<$Result.GetResult<Prisma.$PreferencesOnRealEstatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PreferencesOnRealEstates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesOnRealEstateCountArgs} args - Arguments to filter PreferencesOnRealEstates to count.
     * @example
     * // Count the number of PreferencesOnRealEstates
     * const count = await prisma.preferencesOnRealEstate.count({
     *   where: {
     *     // ... the filter for the PreferencesOnRealEstates we want to count
     *   }
     * })
    **/
    count<T extends PreferencesOnRealEstateCountArgs>(
      args?: Subset<T, PreferencesOnRealEstateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreferencesOnRealEstateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PreferencesOnRealEstate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesOnRealEstateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreferencesOnRealEstateAggregateArgs>(args: Subset<T, PreferencesOnRealEstateAggregateArgs>): Prisma.PrismaPromise<GetPreferencesOnRealEstateAggregateType<T>>

    /**
     * Group by PreferencesOnRealEstate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesOnRealEstateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreferencesOnRealEstateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreferencesOnRealEstateGroupByArgs['orderBy'] }
        : { orderBy?: PreferencesOnRealEstateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreferencesOnRealEstateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreferencesOnRealEstateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PreferencesOnRealEstate model
   */
  readonly fields: PreferencesOnRealEstateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PreferencesOnRealEstate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreferencesOnRealEstateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    preference<T extends PreferenceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PreferenceDefaultArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    realEstateObject<T extends RealEstateObjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RealEstateObjectDefaultArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PreferencesOnRealEstate model
   */
  interface PreferencesOnRealEstateFieldRefs {
    readonly preferenceId: FieldRef<"PreferencesOnRealEstate", 'Int'>
    readonly realEstateObjectId: FieldRef<"PreferencesOnRealEstate", 'Int'>
    readonly assignedAt: FieldRef<"PreferencesOnRealEstate", 'DateTime'>
    readonly assignedBy: FieldRef<"PreferencesOnRealEstate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PreferencesOnRealEstate findUnique
   */
  export type PreferencesOnRealEstateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter, which PreferencesOnRealEstate to fetch.
     */
    where: PreferencesOnRealEstateWhereUniqueInput
  }

  /**
   * PreferencesOnRealEstate findUniqueOrThrow
   */
  export type PreferencesOnRealEstateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter, which PreferencesOnRealEstate to fetch.
     */
    where: PreferencesOnRealEstateWhereUniqueInput
  }

  /**
   * PreferencesOnRealEstate findFirst
   */
  export type PreferencesOnRealEstateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter, which PreferencesOnRealEstate to fetch.
     */
    where?: PreferencesOnRealEstateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferencesOnRealEstates to fetch.
     */
    orderBy?: PreferencesOnRealEstateOrderByWithRelationInput | PreferencesOnRealEstateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreferencesOnRealEstates.
     */
    cursor?: PreferencesOnRealEstateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferencesOnRealEstates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferencesOnRealEstates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreferencesOnRealEstates.
     */
    distinct?: PreferencesOnRealEstateScalarFieldEnum | PreferencesOnRealEstateScalarFieldEnum[]
  }

  /**
   * PreferencesOnRealEstate findFirstOrThrow
   */
  export type PreferencesOnRealEstateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter, which PreferencesOnRealEstate to fetch.
     */
    where?: PreferencesOnRealEstateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferencesOnRealEstates to fetch.
     */
    orderBy?: PreferencesOnRealEstateOrderByWithRelationInput | PreferencesOnRealEstateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreferencesOnRealEstates.
     */
    cursor?: PreferencesOnRealEstateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferencesOnRealEstates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferencesOnRealEstates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreferencesOnRealEstates.
     */
    distinct?: PreferencesOnRealEstateScalarFieldEnum | PreferencesOnRealEstateScalarFieldEnum[]
  }

  /**
   * PreferencesOnRealEstate findMany
   */
  export type PreferencesOnRealEstateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter, which PreferencesOnRealEstates to fetch.
     */
    where?: PreferencesOnRealEstateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferencesOnRealEstates to fetch.
     */
    orderBy?: PreferencesOnRealEstateOrderByWithRelationInput | PreferencesOnRealEstateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PreferencesOnRealEstates.
     */
    cursor?: PreferencesOnRealEstateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferencesOnRealEstates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferencesOnRealEstates.
     */
    skip?: number
    distinct?: PreferencesOnRealEstateScalarFieldEnum | PreferencesOnRealEstateScalarFieldEnum[]
  }

  /**
   * PreferencesOnRealEstate create
   */
  export type PreferencesOnRealEstateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
    /**
     * The data needed to create a PreferencesOnRealEstate.
     */
    data: XOR<PreferencesOnRealEstateCreateInput, PreferencesOnRealEstateUncheckedCreateInput>
  }

  /**
   * PreferencesOnRealEstate createMany
   */
  export type PreferencesOnRealEstateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PreferencesOnRealEstates.
     */
    data: PreferencesOnRealEstateCreateManyInput | PreferencesOnRealEstateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PreferencesOnRealEstate createManyAndReturn
   */
  export type PreferencesOnRealEstateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * The data used to create many PreferencesOnRealEstates.
     */
    data: PreferencesOnRealEstateCreateManyInput | PreferencesOnRealEstateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreferencesOnRealEstate update
   */
  export type PreferencesOnRealEstateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
    /**
     * The data needed to update a PreferencesOnRealEstate.
     */
    data: XOR<PreferencesOnRealEstateUpdateInput, PreferencesOnRealEstateUncheckedUpdateInput>
    /**
     * Choose, which PreferencesOnRealEstate to update.
     */
    where: PreferencesOnRealEstateWhereUniqueInput
  }

  /**
   * PreferencesOnRealEstate updateMany
   */
  export type PreferencesOnRealEstateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PreferencesOnRealEstates.
     */
    data: XOR<PreferencesOnRealEstateUpdateManyMutationInput, PreferencesOnRealEstateUncheckedUpdateManyInput>
    /**
     * Filter which PreferencesOnRealEstates to update
     */
    where?: PreferencesOnRealEstateWhereInput
    /**
     * Limit how many PreferencesOnRealEstates to update.
     */
    limit?: number
  }

  /**
   * PreferencesOnRealEstate updateManyAndReturn
   */
  export type PreferencesOnRealEstateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * The data used to update PreferencesOnRealEstates.
     */
    data: XOR<PreferencesOnRealEstateUpdateManyMutationInput, PreferencesOnRealEstateUncheckedUpdateManyInput>
    /**
     * Filter which PreferencesOnRealEstates to update
     */
    where?: PreferencesOnRealEstateWhereInput
    /**
     * Limit how many PreferencesOnRealEstates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreferencesOnRealEstate upsert
   */
  export type PreferencesOnRealEstateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
    /**
     * The filter to search for the PreferencesOnRealEstate to update in case it exists.
     */
    where: PreferencesOnRealEstateWhereUniqueInput
    /**
     * In case the PreferencesOnRealEstate found by the `where` argument doesn't exist, create a new PreferencesOnRealEstate with this data.
     */
    create: XOR<PreferencesOnRealEstateCreateInput, PreferencesOnRealEstateUncheckedCreateInput>
    /**
     * In case the PreferencesOnRealEstate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreferencesOnRealEstateUpdateInput, PreferencesOnRealEstateUncheckedUpdateInput>
  }

  /**
   * PreferencesOnRealEstate delete
   */
  export type PreferencesOnRealEstateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
    /**
     * Filter which PreferencesOnRealEstate to delete.
     */
    where: PreferencesOnRealEstateWhereUniqueInput
  }

  /**
   * PreferencesOnRealEstate deleteMany
   */
  export type PreferencesOnRealEstateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreferencesOnRealEstates to delete
     */
    where?: PreferencesOnRealEstateWhereInput
    /**
     * Limit how many PreferencesOnRealEstates to delete.
     */
    limit?: number
  }

  /**
   * PreferencesOnRealEstate without action
   */
  export type PreferencesOnRealEstateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesOnRealEstate
     */
    select?: PreferencesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferencesOnRealEstate
     */
    omit?: PreferencesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesOnRealEstateInclude<ExtArgs> | null
  }


  /**
   * Model Unit
   */

  export type AggregateUnit = {
    _count: UnitCountAggregateOutputType | null
    _avg: UnitAvgAggregateOutputType | null
    _sum: UnitSumAggregateOutputType | null
    _min: UnitMinAggregateOutputType | null
    _max: UnitMaxAggregateOutputType | null
  }

  export type UnitAvgAggregateOutputType = {
    id: number | null
    floor: number | null
    unitSize: number | null
    numOfFloors: number | null
    numOfRooms: number | null
    numOfBedrooms: number | null
    numOfBathrooms: number | null
    garages: number | null
    rentalPrice: number | null
    realEstateObjectId: number | null
    tenantId: number | null
  }

  export type UnitSumAggregateOutputType = {
    id: number | null
    floor: number | null
    unitSize: number | null
    numOfFloors: number | null
    numOfRooms: number | null
    numOfBedrooms: number | null
    numOfBathrooms: number | null
    garages: number | null
    rentalPrice: number | null
    realEstateObjectId: number | null
    tenantId: number | null
  }

  export type UnitMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    unitIdentifier: string | null
    unitNumber: string | null
    floor: number | null
    unitSize: number | null
    numOfFloors: number | null
    numOfRooms: number | null
    numOfBedrooms: number | null
    numOfBathrooms: number | null
    garages: number | null
    rentalPrice: number | null
    currency: $Enums.CurrencyCode | null
    status: $Enums.ListingStatus | null
    realEstateObjectId: number | null
    tenantId: number | null
  }

  export type UnitMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    unitIdentifier: string | null
    unitNumber: string | null
    floor: number | null
    unitSize: number | null
    numOfFloors: number | null
    numOfRooms: number | null
    numOfBedrooms: number | null
    numOfBathrooms: number | null
    garages: number | null
    rentalPrice: number | null
    currency: $Enums.CurrencyCode | null
    status: $Enums.ListingStatus | null
    realEstateObjectId: number | null
    tenantId: number | null
  }

  export type UnitCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    unitIdentifier: number
    unitNumber: number
    floor: number
    unitSize: number
    numOfFloors: number
    numOfRooms: number
    numOfBedrooms: number
    numOfBathrooms: number
    garages: number
    rentalPrice: number
    currency: number
    status: number
    realEstateObjectId: number
    tenantId: number
    _all: number
  }


  export type UnitAvgAggregateInputType = {
    id?: true
    floor?: true
    unitSize?: true
    numOfFloors?: true
    numOfRooms?: true
    numOfBedrooms?: true
    numOfBathrooms?: true
    garages?: true
    rentalPrice?: true
    realEstateObjectId?: true
    tenantId?: true
  }

  export type UnitSumAggregateInputType = {
    id?: true
    floor?: true
    unitSize?: true
    numOfFloors?: true
    numOfRooms?: true
    numOfBedrooms?: true
    numOfBathrooms?: true
    garages?: true
    rentalPrice?: true
    realEstateObjectId?: true
    tenantId?: true
  }

  export type UnitMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    unitIdentifier?: true
    unitNumber?: true
    floor?: true
    unitSize?: true
    numOfFloors?: true
    numOfRooms?: true
    numOfBedrooms?: true
    numOfBathrooms?: true
    garages?: true
    rentalPrice?: true
    currency?: true
    status?: true
    realEstateObjectId?: true
    tenantId?: true
  }

  export type UnitMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    unitIdentifier?: true
    unitNumber?: true
    floor?: true
    unitSize?: true
    numOfFloors?: true
    numOfRooms?: true
    numOfBedrooms?: true
    numOfBathrooms?: true
    garages?: true
    rentalPrice?: true
    currency?: true
    status?: true
    realEstateObjectId?: true
    tenantId?: true
  }

  export type UnitCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    unitIdentifier?: true
    unitNumber?: true
    floor?: true
    unitSize?: true
    numOfFloors?: true
    numOfRooms?: true
    numOfBedrooms?: true
    numOfBathrooms?: true
    garages?: true
    rentalPrice?: true
    currency?: true
    status?: true
    realEstateObjectId?: true
    tenantId?: true
    _all?: true
  }

  export type UnitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Unit to aggregate.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Units
    **/
    _count?: true | UnitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UnitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UnitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnitMaxAggregateInputType
  }

  export type GetUnitAggregateType<T extends UnitAggregateArgs> = {
        [P in keyof T & keyof AggregateUnit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnit[P]>
      : GetScalarType<T[P], AggregateUnit[P]>
  }




  export type UnitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitWhereInput
    orderBy?: UnitOrderByWithAggregationInput | UnitOrderByWithAggregationInput[]
    by: UnitScalarFieldEnum[] | UnitScalarFieldEnum
    having?: UnitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnitCountAggregateInputType | true
    _avg?: UnitAvgAggregateInputType
    _sum?: UnitSumAggregateInputType
    _min?: UnitMinAggregateInputType
    _max?: UnitMaxAggregateInputType
  }

  export type UnitGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    unitIdentifier: string | null
    unitNumber: string | null
    floor: number | null
    unitSize: number | null
    numOfFloors: number | null
    numOfRooms: number | null
    numOfBedrooms: number | null
    numOfBathrooms: number | null
    garages: number | null
    rentalPrice: number | null
    currency: $Enums.CurrencyCode | null
    status: $Enums.ListingStatus | null
    realEstateObjectId: number
    tenantId: number | null
    _count: UnitCountAggregateOutputType | null
    _avg: UnitAvgAggregateOutputType | null
    _sum: UnitSumAggregateOutputType | null
    _min: UnitMinAggregateOutputType | null
    _max: UnitMaxAggregateOutputType | null
  }

  type GetUnitGroupByPayload<T extends UnitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UnitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnitGroupByOutputType[P]>
            : GetScalarType<T[P], UnitGroupByOutputType[P]>
        }
      >
    >


  export type UnitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    unitIdentifier?: boolean
    unitNumber?: boolean
    floor?: boolean
    unitSize?: boolean
    numOfFloors?: boolean
    numOfRooms?: boolean
    numOfBedrooms?: boolean
    numOfBathrooms?: boolean
    garages?: boolean
    rentalPrice?: boolean
    currency?: boolean
    status?: boolean
    realEstateObjectId?: boolean
    tenantId?: boolean
    amenities?: boolean | Unit$amenitiesArgs<ExtArgs>
    documents?: boolean | Unit$documentsArgs<ExtArgs>
    images?: boolean | Unit$imagesArgs<ExtArgs>
    maintenanceRequests?: boolean | Unit$maintenanceRequestsArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    tenant?: boolean | Unit$tenantArgs<ExtArgs>
    leases?: boolean | Unit$leasesArgs<ExtArgs>
    expenses?: boolean | Unit$expensesArgs<ExtArgs>
    owners?: boolean | Unit$ownersArgs<ExtArgs>
    overwriteCodes?: boolean | Unit$overwriteCodesArgs<ExtArgs>
    _count?: boolean | UnitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unit"]>

  export type UnitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    unitIdentifier?: boolean
    unitNumber?: boolean
    floor?: boolean
    unitSize?: boolean
    numOfFloors?: boolean
    numOfRooms?: boolean
    numOfBedrooms?: boolean
    numOfBathrooms?: boolean
    garages?: boolean
    rentalPrice?: boolean
    currency?: boolean
    status?: boolean
    realEstateObjectId?: boolean
    tenantId?: boolean
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    tenant?: boolean | Unit$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["unit"]>

  export type UnitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    unitIdentifier?: boolean
    unitNumber?: boolean
    floor?: boolean
    unitSize?: boolean
    numOfFloors?: boolean
    numOfRooms?: boolean
    numOfBedrooms?: boolean
    numOfBathrooms?: boolean
    garages?: boolean
    rentalPrice?: boolean
    currency?: boolean
    status?: boolean
    realEstateObjectId?: boolean
    tenantId?: boolean
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    tenant?: boolean | Unit$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["unit"]>

  export type UnitSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    unitIdentifier?: boolean
    unitNumber?: boolean
    floor?: boolean
    unitSize?: boolean
    numOfFloors?: boolean
    numOfRooms?: boolean
    numOfBedrooms?: boolean
    numOfBathrooms?: boolean
    garages?: boolean
    rentalPrice?: boolean
    currency?: boolean
    status?: boolean
    realEstateObjectId?: boolean
    tenantId?: boolean
  }

  export type UnitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "unitIdentifier" | "unitNumber" | "floor" | "unitSize" | "numOfFloors" | "numOfRooms" | "numOfBedrooms" | "numOfBathrooms" | "garages" | "rentalPrice" | "currency" | "status" | "realEstateObjectId" | "tenantId", ExtArgs["result"]["unit"]>
  export type UnitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenities?: boolean | Unit$amenitiesArgs<ExtArgs>
    documents?: boolean | Unit$documentsArgs<ExtArgs>
    images?: boolean | Unit$imagesArgs<ExtArgs>
    maintenanceRequests?: boolean | Unit$maintenanceRequestsArgs<ExtArgs>
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    tenant?: boolean | Unit$tenantArgs<ExtArgs>
    leases?: boolean | Unit$leasesArgs<ExtArgs>
    expenses?: boolean | Unit$expensesArgs<ExtArgs>
    owners?: boolean | Unit$ownersArgs<ExtArgs>
    overwriteCodes?: boolean | Unit$overwriteCodesArgs<ExtArgs>
    _count?: boolean | UnitCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UnitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    tenant?: boolean | Unit$tenantArgs<ExtArgs>
  }
  export type UnitIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    realEstateObject?: boolean | RealEstateObjectDefaultArgs<ExtArgs>
    tenant?: boolean | Unit$tenantArgs<ExtArgs>
  }

  export type $UnitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Unit"
    objects: {
      amenities: Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      images: Prisma.$ImagePayload<ExtArgs>[]
      maintenanceRequests: Prisma.$MaintenanceRequestPayload<ExtArgs>[]
      realEstateObject: Prisma.$RealEstateObjectPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs> | null
      leases: Prisma.$LeasePayload<ExtArgs>[]
      expenses: Prisma.$ExpensePayload<ExtArgs>[]
      owners: Prisma.$UserPayload<ExtArgs>[]
      overwriteCodes: Prisma.$OverwriteCodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      unitIdentifier: string | null
      unitNumber: string | null
      floor: number | null
      unitSize: number | null
      numOfFloors: number | null
      numOfRooms: number | null
      numOfBedrooms: number | null
      numOfBathrooms: number | null
      garages: number | null
      rentalPrice: number | null
      currency: $Enums.CurrencyCode | null
      status: $Enums.ListingStatus | null
      realEstateObjectId: number
      tenantId: number | null
    }, ExtArgs["result"]["unit"]>
    composites: {}
  }

  type UnitGetPayload<S extends boolean | null | undefined | UnitDefaultArgs> = $Result.GetResult<Prisma.$UnitPayload, S>

  type UnitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UnitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UnitCountAggregateInputType | true
    }

  export interface UnitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Unit'], meta: { name: 'Unit' } }
    /**
     * Find zero or one Unit that matches the filter.
     * @param {UnitFindUniqueArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UnitFindUniqueArgs>(args: SelectSubset<T, UnitFindUniqueArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Unit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UnitFindUniqueOrThrowArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UnitFindUniqueOrThrowArgs>(args: SelectSubset<T, UnitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Unit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindFirstArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UnitFindFirstArgs>(args?: SelectSubset<T, UnitFindFirstArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Unit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindFirstOrThrowArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UnitFindFirstOrThrowArgs>(args?: SelectSubset<T, UnitFindFirstOrThrowArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Units that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Units
     * const units = await prisma.unit.findMany()
     * 
     * // Get first 10 Units
     * const units = await prisma.unit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const unitWithIdOnly = await prisma.unit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UnitFindManyArgs>(args?: SelectSubset<T, UnitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Unit.
     * @param {UnitCreateArgs} args - Arguments to create a Unit.
     * @example
     * // Create one Unit
     * const Unit = await prisma.unit.create({
     *   data: {
     *     // ... data to create a Unit
     *   }
     * })
     * 
     */
    create<T extends UnitCreateArgs>(args: SelectSubset<T, UnitCreateArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Units.
     * @param {UnitCreateManyArgs} args - Arguments to create many Units.
     * @example
     * // Create many Units
     * const unit = await prisma.unit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UnitCreateManyArgs>(args?: SelectSubset<T, UnitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Units and returns the data saved in the database.
     * @param {UnitCreateManyAndReturnArgs} args - Arguments to create many Units.
     * @example
     * // Create many Units
     * const unit = await prisma.unit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Units and only return the `id`
     * const unitWithIdOnly = await prisma.unit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UnitCreateManyAndReturnArgs>(args?: SelectSubset<T, UnitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Unit.
     * @param {UnitDeleteArgs} args - Arguments to delete one Unit.
     * @example
     * // Delete one Unit
     * const Unit = await prisma.unit.delete({
     *   where: {
     *     // ... filter to delete one Unit
     *   }
     * })
     * 
     */
    delete<T extends UnitDeleteArgs>(args: SelectSubset<T, UnitDeleteArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Unit.
     * @param {UnitUpdateArgs} args - Arguments to update one Unit.
     * @example
     * // Update one Unit
     * const unit = await prisma.unit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UnitUpdateArgs>(args: SelectSubset<T, UnitUpdateArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Units.
     * @param {UnitDeleteManyArgs} args - Arguments to filter Units to delete.
     * @example
     * // Delete a few Units
     * const { count } = await prisma.unit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UnitDeleteManyArgs>(args?: SelectSubset<T, UnitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Units
     * const unit = await prisma.unit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UnitUpdateManyArgs>(args: SelectSubset<T, UnitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Units and returns the data updated in the database.
     * @param {UnitUpdateManyAndReturnArgs} args - Arguments to update many Units.
     * @example
     * // Update many Units
     * const unit = await prisma.unit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Units and only return the `id`
     * const unitWithIdOnly = await prisma.unit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UnitUpdateManyAndReturnArgs>(args: SelectSubset<T, UnitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Unit.
     * @param {UnitUpsertArgs} args - Arguments to update or create a Unit.
     * @example
     * // Update or create a Unit
     * const unit = await prisma.unit.upsert({
     *   create: {
     *     // ... data to create a Unit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Unit we want to update
     *   }
     * })
     */
    upsert<T extends UnitUpsertArgs>(args: SelectSubset<T, UnitUpsertArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitCountArgs} args - Arguments to filter Units to count.
     * @example
     * // Count the number of Units
     * const count = await prisma.unit.count({
     *   where: {
     *     // ... the filter for the Units we want to count
     *   }
     * })
    **/
    count<T extends UnitCountArgs>(
      args?: Subset<T, UnitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Unit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnitAggregateArgs>(args: Subset<T, UnitAggregateArgs>): Prisma.PrismaPromise<GetUnitAggregateType<T>>

    /**
     * Group by Unit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnitGroupByArgs['orderBy'] }
        : { orderBy?: UnitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Unit model
   */
  readonly fields: UnitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Unit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UnitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    amenities<T extends Unit$amenitiesArgs<ExtArgs> = {}>(args?: Subset<T, Unit$amenitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenitiesOnRealEstatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends Unit$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Unit$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends Unit$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Unit$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    maintenanceRequests<T extends Unit$maintenanceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Unit$maintenanceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    realEstateObject<T extends RealEstateObjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RealEstateObjectDefaultArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tenant<T extends Unit$tenantArgs<ExtArgs> = {}>(args?: Subset<T, Unit$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    leases<T extends Unit$leasesArgs<ExtArgs> = {}>(args?: Subset<T, Unit$leasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    expenses<T extends Unit$expensesArgs<ExtArgs> = {}>(args?: Subset<T, Unit$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    owners<T extends Unit$ownersArgs<ExtArgs> = {}>(args?: Subset<T, Unit$ownersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    overwriteCodes<T extends Unit$overwriteCodesArgs<ExtArgs> = {}>(args?: Subset<T, Unit$overwriteCodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Unit model
   */
  interface UnitFieldRefs {
    readonly id: FieldRef<"Unit", 'Int'>
    readonly createdAt: FieldRef<"Unit", 'DateTime'>
    readonly updatedAt: FieldRef<"Unit", 'DateTime'>
    readonly unitIdentifier: FieldRef<"Unit", 'String'>
    readonly unitNumber: FieldRef<"Unit", 'String'>
    readonly floor: FieldRef<"Unit", 'Int'>
    readonly unitSize: FieldRef<"Unit", 'Float'>
    readonly numOfFloors: FieldRef<"Unit", 'Int'>
    readonly numOfRooms: FieldRef<"Unit", 'Int'>
    readonly numOfBedrooms: FieldRef<"Unit", 'Int'>
    readonly numOfBathrooms: FieldRef<"Unit", 'Int'>
    readonly garages: FieldRef<"Unit", 'Int'>
    readonly rentalPrice: FieldRef<"Unit", 'Float'>
    readonly currency: FieldRef<"Unit", 'CurrencyCode'>
    readonly status: FieldRef<"Unit", 'ListingStatus'>
    readonly realEstateObjectId: FieldRef<"Unit", 'Int'>
    readonly tenantId: FieldRef<"Unit", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Unit findUnique
   */
  export type UnitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit findUniqueOrThrow
   */
  export type UnitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit findFirst
   */
  export type UnitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Units.
     */
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit findFirstOrThrow
   */
  export type UnitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Units.
     */
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit findMany
   */
  export type UnitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Units to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit create
   */
  export type UnitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The data needed to create a Unit.
     */
    data: XOR<UnitCreateInput, UnitUncheckedCreateInput>
  }

  /**
   * Unit createMany
   */
  export type UnitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Units.
     */
    data: UnitCreateManyInput | UnitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Unit createManyAndReturn
   */
  export type UnitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * The data used to create many Units.
     */
    data: UnitCreateManyInput | UnitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Unit update
   */
  export type UnitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The data needed to update a Unit.
     */
    data: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
    /**
     * Choose, which Unit to update.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit updateMany
   */
  export type UnitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Units.
     */
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyInput>
    /**
     * Filter which Units to update
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to update.
     */
    limit?: number
  }

  /**
   * Unit updateManyAndReturn
   */
  export type UnitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * The data used to update Units.
     */
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyInput>
    /**
     * Filter which Units to update
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Unit upsert
   */
  export type UnitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The filter to search for the Unit to update in case it exists.
     */
    where: UnitWhereUniqueInput
    /**
     * In case the Unit found by the `where` argument doesn't exist, create a new Unit with this data.
     */
    create: XOR<UnitCreateInput, UnitUncheckedCreateInput>
    /**
     * In case the Unit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
  }

  /**
   * Unit delete
   */
  export type UnitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter which Unit to delete.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit deleteMany
   */
  export type UnitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Units to delete
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to delete.
     */
    limit?: number
  }

  /**
   * Unit.amenities
   */
  export type Unit$amenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenitiesOnRealEstate
     */
    select?: AmenitiesOnRealEstateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmenitiesOnRealEstate
     */
    omit?: AmenitiesOnRealEstateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenitiesOnRealEstateInclude<ExtArgs> | null
    where?: AmenitiesOnRealEstateWhereInput
    orderBy?: AmenitiesOnRealEstateOrderByWithRelationInput | AmenitiesOnRealEstateOrderByWithRelationInput[]
    cursor?: AmenitiesOnRealEstateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmenitiesOnRealEstateScalarFieldEnum | AmenitiesOnRealEstateScalarFieldEnum[]
  }

  /**
   * Unit.documents
   */
  export type Unit$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Unit.images
   */
  export type Unit$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    cursor?: ImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Unit.maintenanceRequests
   */
  export type Unit$maintenanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    where?: MaintenanceRequestWhereInput
    orderBy?: MaintenanceRequestOrderByWithRelationInput | MaintenanceRequestOrderByWithRelationInput[]
    cursor?: MaintenanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceRequestScalarFieldEnum | MaintenanceRequestScalarFieldEnum[]
  }

  /**
   * Unit.tenant
   */
  export type Unit$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * Unit.leases
   */
  export type Unit$leasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    where?: LeaseWhereInput
    orderBy?: LeaseOrderByWithRelationInput | LeaseOrderByWithRelationInput[]
    cursor?: LeaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaseScalarFieldEnum | LeaseScalarFieldEnum[]
  }

  /**
   * Unit.expenses
   */
  export type Unit$expensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    where?: ExpenseWhereInput
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    cursor?: ExpenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Unit.owners
   */
  export type Unit$ownersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Unit.overwriteCodes
   */
  export type Unit$overwriteCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
    where?: OverwriteCodeWhereInput
    orderBy?: OverwriteCodeOrderByWithRelationInput | OverwriteCodeOrderByWithRelationInput[]
    cursor?: OverwriteCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OverwriteCodeScalarFieldEnum | OverwriteCodeScalarFieldEnum[]
  }

  /**
   * Unit without action
   */
  export type UnitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
  }


  /**
   * Model Lease
   */

  export type AggregateLease = {
    _count: LeaseCountAggregateOutputType | null
    _avg: LeaseAvgAggregateOutputType | null
    _sum: LeaseSumAggregateOutputType | null
    _min: LeaseMinAggregateOutputType | null
    _max: LeaseMaxAggregateOutputType | null
  }

  export type LeaseAvgAggregateOutputType = {
    id: number | null
    rentalPrice: number | null
    totalRentDue: number | null
    rentPaid: number | null
    tenantId: number | null
    unitId: number | null
  }

  export type LeaseSumAggregateOutputType = {
    id: number | null
    rentalPrice: number | null
    totalRentDue: number | null
    rentPaid: number | null
    tenantId: number | null
    unitId: number | null
  }

  export type LeaseMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    startDate: Date | null
    endDate: Date | null
    rentalPrice: number | null
    status: $Enums.LeaseStatus | null
    paymentFrequency: $Enums.PaymentFrequency | null
    notes: string | null
    specialTerms: string | null
    currency: $Enums.CurrencyCode | null
    totalRentDue: number | null
    rentPaid: number | null
    tenantId: number | null
    unitId: number | null
  }

  export type LeaseMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    startDate: Date | null
    endDate: Date | null
    rentalPrice: number | null
    status: $Enums.LeaseStatus | null
    paymentFrequency: $Enums.PaymentFrequency | null
    notes: string | null
    specialTerms: string | null
    currency: $Enums.CurrencyCode | null
    totalRentDue: number | null
    rentPaid: number | null
    tenantId: number | null
    unitId: number | null
  }

  export type LeaseCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    startDate: number
    endDate: number
    rentalPrice: number
    status: number
    paymentFrequency: number
    notes: number
    specialTerms: number
    currency: number
    totalRentDue: number
    rentPaid: number
    tenantId: number
    unitId: number
    _all: number
  }


  export type LeaseAvgAggregateInputType = {
    id?: true
    rentalPrice?: true
    totalRentDue?: true
    rentPaid?: true
    tenantId?: true
    unitId?: true
  }

  export type LeaseSumAggregateInputType = {
    id?: true
    rentalPrice?: true
    totalRentDue?: true
    rentPaid?: true
    tenantId?: true
    unitId?: true
  }

  export type LeaseMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    startDate?: true
    endDate?: true
    rentalPrice?: true
    status?: true
    paymentFrequency?: true
    notes?: true
    specialTerms?: true
    currency?: true
    totalRentDue?: true
    rentPaid?: true
    tenantId?: true
    unitId?: true
  }

  export type LeaseMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    startDate?: true
    endDate?: true
    rentalPrice?: true
    status?: true
    paymentFrequency?: true
    notes?: true
    specialTerms?: true
    currency?: true
    totalRentDue?: true
    rentPaid?: true
    tenantId?: true
    unitId?: true
  }

  export type LeaseCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    startDate?: true
    endDate?: true
    rentalPrice?: true
    status?: true
    paymentFrequency?: true
    notes?: true
    specialTerms?: true
    currency?: true
    totalRentDue?: true
    rentPaid?: true
    tenantId?: true
    unitId?: true
    _all?: true
  }

  export type LeaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lease to aggregate.
     */
    where?: LeaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leases to fetch.
     */
    orderBy?: LeaseOrderByWithRelationInput | LeaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leases
    **/
    _count?: true | LeaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaseMaxAggregateInputType
  }

  export type GetLeaseAggregateType<T extends LeaseAggregateArgs> = {
        [P in keyof T & keyof AggregateLease]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLease[P]>
      : GetScalarType<T[P], AggregateLease[P]>
  }




  export type LeaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaseWhereInput
    orderBy?: LeaseOrderByWithAggregationInput | LeaseOrderByWithAggregationInput[]
    by: LeaseScalarFieldEnum[] | LeaseScalarFieldEnum
    having?: LeaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaseCountAggregateInputType | true
    _avg?: LeaseAvgAggregateInputType
    _sum?: LeaseSumAggregateInputType
    _min?: LeaseMinAggregateInputType
    _max?: LeaseMaxAggregateInputType
  }

  export type LeaseGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    startDate: Date | null
    endDate: Date | null
    rentalPrice: number | null
    status: $Enums.LeaseStatus | null
    paymentFrequency: $Enums.PaymentFrequency | null
    notes: string | null
    specialTerms: string | null
    currency: $Enums.CurrencyCode | null
    totalRentDue: number | null
    rentPaid: number | null
    tenantId: number | null
    unitId: number | null
    _count: LeaseCountAggregateOutputType | null
    _avg: LeaseAvgAggregateOutputType | null
    _sum: LeaseSumAggregateOutputType | null
    _min: LeaseMinAggregateOutputType | null
    _max: LeaseMaxAggregateOutputType | null
  }

  type GetLeaseGroupByPayload<T extends LeaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaseGroupByOutputType[P]>
            : GetScalarType<T[P], LeaseGroupByOutputType[P]>
        }
      >
    >


  export type LeaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startDate?: boolean
    endDate?: boolean
    rentalPrice?: boolean
    status?: boolean
    paymentFrequency?: boolean
    notes?: boolean
    specialTerms?: boolean
    currency?: boolean
    totalRentDue?: boolean
    rentPaid?: boolean
    tenantId?: boolean
    unitId?: boolean
    documents?: boolean | Lease$documentsArgs<ExtArgs>
    tenant?: boolean | Lease$tenantArgs<ExtArgs>
    unit?: boolean | Lease$unitArgs<ExtArgs>
    expenses?: boolean | Lease$expensesArgs<ExtArgs>
    rentPayments?: boolean | Lease$rentPaymentsArgs<ExtArgs>
    paymentSchedule?: boolean | Lease$paymentScheduleArgs<ExtArgs>
    _count?: boolean | LeaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lease"]>

  export type LeaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startDate?: boolean
    endDate?: boolean
    rentalPrice?: boolean
    status?: boolean
    paymentFrequency?: boolean
    notes?: boolean
    specialTerms?: boolean
    currency?: boolean
    totalRentDue?: boolean
    rentPaid?: boolean
    tenantId?: boolean
    unitId?: boolean
    tenant?: boolean | Lease$tenantArgs<ExtArgs>
    unit?: boolean | Lease$unitArgs<ExtArgs>
  }, ExtArgs["result"]["lease"]>

  export type LeaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startDate?: boolean
    endDate?: boolean
    rentalPrice?: boolean
    status?: boolean
    paymentFrequency?: boolean
    notes?: boolean
    specialTerms?: boolean
    currency?: boolean
    totalRentDue?: boolean
    rentPaid?: boolean
    tenantId?: boolean
    unitId?: boolean
    tenant?: boolean | Lease$tenantArgs<ExtArgs>
    unit?: boolean | Lease$unitArgs<ExtArgs>
  }, ExtArgs["result"]["lease"]>

  export type LeaseSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    startDate?: boolean
    endDate?: boolean
    rentalPrice?: boolean
    status?: boolean
    paymentFrequency?: boolean
    notes?: boolean
    specialTerms?: boolean
    currency?: boolean
    totalRentDue?: boolean
    rentPaid?: boolean
    tenantId?: boolean
    unitId?: boolean
  }

  export type LeaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "startDate" | "endDate" | "rentalPrice" | "status" | "paymentFrequency" | "notes" | "specialTerms" | "currency" | "totalRentDue" | "rentPaid" | "tenantId" | "unitId", ExtArgs["result"]["lease"]>
  export type LeaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | Lease$documentsArgs<ExtArgs>
    tenant?: boolean | Lease$tenantArgs<ExtArgs>
    unit?: boolean | Lease$unitArgs<ExtArgs>
    expenses?: boolean | Lease$expensesArgs<ExtArgs>
    rentPayments?: boolean | Lease$rentPaymentsArgs<ExtArgs>
    paymentSchedule?: boolean | Lease$paymentScheduleArgs<ExtArgs>
    _count?: boolean | LeaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | Lease$tenantArgs<ExtArgs>
    unit?: boolean | Lease$unitArgs<ExtArgs>
  }
  export type LeaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | Lease$tenantArgs<ExtArgs>
    unit?: boolean | Lease$unitArgs<ExtArgs>
  }

  export type $LeasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lease"
    objects: {
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs> | null
      unit: Prisma.$UnitPayload<ExtArgs> | null
      expenses: Prisma.$ExpensePayload<ExtArgs>[]
      rentPayments: Prisma.$RentPaymentPayload<ExtArgs>[]
      paymentSchedule: Prisma.$LeasePaymentSchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      startDate: Date | null
      endDate: Date | null
      rentalPrice: number | null
      status: $Enums.LeaseStatus | null
      paymentFrequency: $Enums.PaymentFrequency | null
      notes: string | null
      specialTerms: string | null
      currency: $Enums.CurrencyCode | null
      totalRentDue: number | null
      rentPaid: number | null
      tenantId: number | null
      unitId: number | null
    }, ExtArgs["result"]["lease"]>
    composites: {}
  }

  type LeaseGetPayload<S extends boolean | null | undefined | LeaseDefaultArgs> = $Result.GetResult<Prisma.$LeasePayload, S>

  type LeaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeaseCountAggregateInputType | true
    }

  export interface LeaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lease'], meta: { name: 'Lease' } }
    /**
     * Find zero or one Lease that matches the filter.
     * @param {LeaseFindUniqueArgs} args - Arguments to find a Lease
     * @example
     * // Get one Lease
     * const lease = await prisma.lease.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaseFindUniqueArgs>(args: SelectSubset<T, LeaseFindUniqueArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lease that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeaseFindUniqueOrThrowArgs} args - Arguments to find a Lease
     * @example
     * // Get one Lease
     * const lease = await prisma.lease.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaseFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lease that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaseFindFirstArgs} args - Arguments to find a Lease
     * @example
     * // Get one Lease
     * const lease = await prisma.lease.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaseFindFirstArgs>(args?: SelectSubset<T, LeaseFindFirstArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lease that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaseFindFirstOrThrowArgs} args - Arguments to find a Lease
     * @example
     * // Get one Lease
     * const lease = await prisma.lease.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaseFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Leases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leases
     * const leases = await prisma.lease.findMany()
     * 
     * // Get first 10 Leases
     * const leases = await prisma.lease.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaseWithIdOnly = await prisma.lease.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaseFindManyArgs>(args?: SelectSubset<T, LeaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lease.
     * @param {LeaseCreateArgs} args - Arguments to create a Lease.
     * @example
     * // Create one Lease
     * const Lease = await prisma.lease.create({
     *   data: {
     *     // ... data to create a Lease
     *   }
     * })
     * 
     */
    create<T extends LeaseCreateArgs>(args: SelectSubset<T, LeaseCreateArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Leases.
     * @param {LeaseCreateManyArgs} args - Arguments to create many Leases.
     * @example
     * // Create many Leases
     * const lease = await prisma.lease.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaseCreateManyArgs>(args?: SelectSubset<T, LeaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leases and returns the data saved in the database.
     * @param {LeaseCreateManyAndReturnArgs} args - Arguments to create many Leases.
     * @example
     * // Create many Leases
     * const lease = await prisma.lease.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leases and only return the `id`
     * const leaseWithIdOnly = await prisma.lease.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaseCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lease.
     * @param {LeaseDeleteArgs} args - Arguments to delete one Lease.
     * @example
     * // Delete one Lease
     * const Lease = await prisma.lease.delete({
     *   where: {
     *     // ... filter to delete one Lease
     *   }
     * })
     * 
     */
    delete<T extends LeaseDeleteArgs>(args: SelectSubset<T, LeaseDeleteArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lease.
     * @param {LeaseUpdateArgs} args - Arguments to update one Lease.
     * @example
     * // Update one Lease
     * const lease = await prisma.lease.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaseUpdateArgs>(args: SelectSubset<T, LeaseUpdateArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Leases.
     * @param {LeaseDeleteManyArgs} args - Arguments to filter Leases to delete.
     * @example
     * // Delete a few Leases
     * const { count } = await prisma.lease.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaseDeleteManyArgs>(args?: SelectSubset<T, LeaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leases
     * const lease = await prisma.lease.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaseUpdateManyArgs>(args: SelectSubset<T, LeaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leases and returns the data updated in the database.
     * @param {LeaseUpdateManyAndReturnArgs} args - Arguments to update many Leases.
     * @example
     * // Update many Leases
     * const lease = await prisma.lease.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Leases and only return the `id`
     * const leaseWithIdOnly = await prisma.lease.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeaseUpdateManyAndReturnArgs>(args: SelectSubset<T, LeaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lease.
     * @param {LeaseUpsertArgs} args - Arguments to update or create a Lease.
     * @example
     * // Update or create a Lease
     * const lease = await prisma.lease.upsert({
     *   create: {
     *     // ... data to create a Lease
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lease we want to update
     *   }
     * })
     */
    upsert<T extends LeaseUpsertArgs>(args: SelectSubset<T, LeaseUpsertArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Leases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaseCountArgs} args - Arguments to filter Leases to count.
     * @example
     * // Count the number of Leases
     * const count = await prisma.lease.count({
     *   where: {
     *     // ... the filter for the Leases we want to count
     *   }
     * })
    **/
    count<T extends LeaseCountArgs>(
      args?: Subset<T, LeaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lease.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaseAggregateArgs>(args: Subset<T, LeaseAggregateArgs>): Prisma.PrismaPromise<GetLeaseAggregateType<T>>

    /**
     * Group by Lease.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaseGroupByArgs['orderBy'] }
        : { orderBy?: LeaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lease model
   */
  readonly fields: LeaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lease.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documents<T extends Lease$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Lease$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tenant<T extends Lease$tenantArgs<ExtArgs> = {}>(args?: Subset<T, Lease$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    unit<T extends Lease$unitArgs<ExtArgs> = {}>(args?: Subset<T, Lease$unitArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    expenses<T extends Lease$expensesArgs<ExtArgs> = {}>(args?: Subset<T, Lease$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rentPayments<T extends Lease$rentPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, Lease$rentPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paymentSchedule<T extends Lease$paymentScheduleArgs<ExtArgs> = {}>(args?: Subset<T, Lease$paymentScheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lease model
   */
  interface LeaseFieldRefs {
    readonly id: FieldRef<"Lease", 'Int'>
    readonly createdAt: FieldRef<"Lease", 'DateTime'>
    readonly updatedAt: FieldRef<"Lease", 'DateTime'>
    readonly startDate: FieldRef<"Lease", 'DateTime'>
    readonly endDate: FieldRef<"Lease", 'DateTime'>
    readonly rentalPrice: FieldRef<"Lease", 'Float'>
    readonly status: FieldRef<"Lease", 'LeaseStatus'>
    readonly paymentFrequency: FieldRef<"Lease", 'PaymentFrequency'>
    readonly notes: FieldRef<"Lease", 'String'>
    readonly specialTerms: FieldRef<"Lease", 'String'>
    readonly currency: FieldRef<"Lease", 'CurrencyCode'>
    readonly totalRentDue: FieldRef<"Lease", 'Float'>
    readonly rentPaid: FieldRef<"Lease", 'Float'>
    readonly tenantId: FieldRef<"Lease", 'Int'>
    readonly unitId: FieldRef<"Lease", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Lease findUnique
   */
  export type LeaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    /**
     * Filter, which Lease to fetch.
     */
    where: LeaseWhereUniqueInput
  }

  /**
   * Lease findUniqueOrThrow
   */
  export type LeaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    /**
     * Filter, which Lease to fetch.
     */
    where: LeaseWhereUniqueInput
  }

  /**
   * Lease findFirst
   */
  export type LeaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    /**
     * Filter, which Lease to fetch.
     */
    where?: LeaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leases to fetch.
     */
    orderBy?: LeaseOrderByWithRelationInput | LeaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leases.
     */
    cursor?: LeaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leases.
     */
    distinct?: LeaseScalarFieldEnum | LeaseScalarFieldEnum[]
  }

  /**
   * Lease findFirstOrThrow
   */
  export type LeaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    /**
     * Filter, which Lease to fetch.
     */
    where?: LeaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leases to fetch.
     */
    orderBy?: LeaseOrderByWithRelationInput | LeaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leases.
     */
    cursor?: LeaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leases.
     */
    distinct?: LeaseScalarFieldEnum | LeaseScalarFieldEnum[]
  }

  /**
   * Lease findMany
   */
  export type LeaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    /**
     * Filter, which Leases to fetch.
     */
    where?: LeaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leases to fetch.
     */
    orderBy?: LeaseOrderByWithRelationInput | LeaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leases.
     */
    cursor?: LeaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leases.
     */
    skip?: number
    distinct?: LeaseScalarFieldEnum | LeaseScalarFieldEnum[]
  }

  /**
   * Lease create
   */
  export type LeaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Lease.
     */
    data?: XOR<LeaseCreateInput, LeaseUncheckedCreateInput>
  }

  /**
   * Lease createMany
   */
  export type LeaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leases.
     */
    data: LeaseCreateManyInput | LeaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lease createManyAndReturn
   */
  export type LeaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * The data used to create many Leases.
     */
    data: LeaseCreateManyInput | LeaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lease update
   */
  export type LeaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Lease.
     */
    data: XOR<LeaseUpdateInput, LeaseUncheckedUpdateInput>
    /**
     * Choose, which Lease to update.
     */
    where: LeaseWhereUniqueInput
  }

  /**
   * Lease updateMany
   */
  export type LeaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leases.
     */
    data: XOR<LeaseUpdateManyMutationInput, LeaseUncheckedUpdateManyInput>
    /**
     * Filter which Leases to update
     */
    where?: LeaseWhereInput
    /**
     * Limit how many Leases to update.
     */
    limit?: number
  }

  /**
   * Lease updateManyAndReturn
   */
  export type LeaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * The data used to update Leases.
     */
    data: XOR<LeaseUpdateManyMutationInput, LeaseUncheckedUpdateManyInput>
    /**
     * Filter which Leases to update
     */
    where?: LeaseWhereInput
    /**
     * Limit how many Leases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lease upsert
   */
  export type LeaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Lease to update in case it exists.
     */
    where: LeaseWhereUniqueInput
    /**
     * In case the Lease found by the `where` argument doesn't exist, create a new Lease with this data.
     */
    create: XOR<LeaseCreateInput, LeaseUncheckedCreateInput>
    /**
     * In case the Lease was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaseUpdateInput, LeaseUncheckedUpdateInput>
  }

  /**
   * Lease delete
   */
  export type LeaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    /**
     * Filter which Lease to delete.
     */
    where: LeaseWhereUniqueInput
  }

  /**
   * Lease deleteMany
   */
  export type LeaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leases to delete
     */
    where?: LeaseWhereInput
    /**
     * Limit how many Leases to delete.
     */
    limit?: number
  }

  /**
   * Lease.documents
   */
  export type Lease$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Lease.tenant
   */
  export type Lease$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * Lease.unit
   */
  export type Lease$unitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
  }

  /**
   * Lease.expenses
   */
  export type Lease$expensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    where?: ExpenseWhereInput
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    cursor?: ExpenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Lease.rentPayments
   */
  export type Lease$rentPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
    where?: RentPaymentWhereInput
    orderBy?: RentPaymentOrderByWithRelationInput | RentPaymentOrderByWithRelationInput[]
    cursor?: RentPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentPaymentScalarFieldEnum | RentPaymentScalarFieldEnum[]
  }

  /**
   * Lease.paymentSchedule
   */
  export type Lease$paymentScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleInclude<ExtArgs> | null
    where?: LeasePaymentScheduleWhereInput
    orderBy?: LeasePaymentScheduleOrderByWithRelationInput | LeasePaymentScheduleOrderByWithRelationInput[]
    cursor?: LeasePaymentScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeasePaymentScheduleScalarFieldEnum | LeasePaymentScheduleScalarFieldEnum[]
  }

  /**
   * Lease without action
   */
  export type LeaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
  }


  /**
   * Model LeasePaymentSchedule
   */

  export type AggregateLeasePaymentSchedule = {
    _count: LeasePaymentScheduleCountAggregateOutputType | null
    _avg: LeasePaymentScheduleAvgAggregateOutputType | null
    _sum: LeasePaymentScheduleSumAggregateOutputType | null
    _min: LeasePaymentScheduleMinAggregateOutputType | null
    _max: LeasePaymentScheduleMaxAggregateOutputType | null
  }

  export type LeasePaymentScheduleAvgAggregateOutputType = {
    id: number | null
    amountDue: number | null
    leaseId: number | null
  }

  export type LeasePaymentScheduleSumAggregateOutputType = {
    id: number | null
    amountDue: number | null
    leaseId: number | null
  }

  export type LeasePaymentScheduleMinAggregateOutputType = {
    createdAt: Date | null
    id: number | null
    dueDate: Date | null
    amountDue: number | null
    status: $Enums.PaymentScheduleStatus | null
    leaseId: number | null
  }

  export type LeasePaymentScheduleMaxAggregateOutputType = {
    createdAt: Date | null
    id: number | null
    dueDate: Date | null
    amountDue: number | null
    status: $Enums.PaymentScheduleStatus | null
    leaseId: number | null
  }

  export type LeasePaymentScheduleCountAggregateOutputType = {
    createdAt: number
    id: number
    dueDate: number
    amountDue: number
    status: number
    leaseId: number
    _all: number
  }


  export type LeasePaymentScheduleAvgAggregateInputType = {
    id?: true
    amountDue?: true
    leaseId?: true
  }

  export type LeasePaymentScheduleSumAggregateInputType = {
    id?: true
    amountDue?: true
    leaseId?: true
  }

  export type LeasePaymentScheduleMinAggregateInputType = {
    createdAt?: true
    id?: true
    dueDate?: true
    amountDue?: true
    status?: true
    leaseId?: true
  }

  export type LeasePaymentScheduleMaxAggregateInputType = {
    createdAt?: true
    id?: true
    dueDate?: true
    amountDue?: true
    status?: true
    leaseId?: true
  }

  export type LeasePaymentScheduleCountAggregateInputType = {
    createdAt?: true
    id?: true
    dueDate?: true
    amountDue?: true
    status?: true
    leaseId?: true
    _all?: true
  }

  export type LeasePaymentScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeasePaymentSchedule to aggregate.
     */
    where?: LeasePaymentScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeasePaymentSchedules to fetch.
     */
    orderBy?: LeasePaymentScheduleOrderByWithRelationInput | LeasePaymentScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeasePaymentScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeasePaymentSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeasePaymentSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeasePaymentSchedules
    **/
    _count?: true | LeasePaymentScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeasePaymentScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeasePaymentScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeasePaymentScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeasePaymentScheduleMaxAggregateInputType
  }

  export type GetLeasePaymentScheduleAggregateType<T extends LeasePaymentScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateLeasePaymentSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeasePaymentSchedule[P]>
      : GetScalarType<T[P], AggregateLeasePaymentSchedule[P]>
  }




  export type LeasePaymentScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeasePaymentScheduleWhereInput
    orderBy?: LeasePaymentScheduleOrderByWithAggregationInput | LeasePaymentScheduleOrderByWithAggregationInput[]
    by: LeasePaymentScheduleScalarFieldEnum[] | LeasePaymentScheduleScalarFieldEnum
    having?: LeasePaymentScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeasePaymentScheduleCountAggregateInputType | true
    _avg?: LeasePaymentScheduleAvgAggregateInputType
    _sum?: LeasePaymentScheduleSumAggregateInputType
    _min?: LeasePaymentScheduleMinAggregateInputType
    _max?: LeasePaymentScheduleMaxAggregateInputType
  }

  export type LeasePaymentScheduleGroupByOutputType = {
    createdAt: Date
    id: number
    dueDate: Date
    amountDue: number
    status: $Enums.PaymentScheduleStatus
    leaseId: number
    _count: LeasePaymentScheduleCountAggregateOutputType | null
    _avg: LeasePaymentScheduleAvgAggregateOutputType | null
    _sum: LeasePaymentScheduleSumAggregateOutputType | null
    _min: LeasePaymentScheduleMinAggregateOutputType | null
    _max: LeasePaymentScheduleMaxAggregateOutputType | null
  }

  type GetLeasePaymentScheduleGroupByPayload<T extends LeasePaymentScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeasePaymentScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeasePaymentScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeasePaymentScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], LeasePaymentScheduleGroupByOutputType[P]>
        }
      >
    >


  export type LeasePaymentScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    id?: boolean
    dueDate?: boolean
    amountDue?: boolean
    status?: boolean
    leaseId?: boolean
    lease?: boolean | LeaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leasePaymentSchedule"]>

  export type LeasePaymentScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    id?: boolean
    dueDate?: boolean
    amountDue?: boolean
    status?: boolean
    leaseId?: boolean
    lease?: boolean | LeaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leasePaymentSchedule"]>

  export type LeasePaymentScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    id?: boolean
    dueDate?: boolean
    amountDue?: boolean
    status?: boolean
    leaseId?: boolean
    lease?: boolean | LeaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leasePaymentSchedule"]>

  export type LeasePaymentScheduleSelectScalar = {
    createdAt?: boolean
    id?: boolean
    dueDate?: boolean
    amountDue?: boolean
    status?: boolean
    leaseId?: boolean
  }

  export type LeasePaymentScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"createdAt" | "id" | "dueDate" | "amountDue" | "status" | "leaseId", ExtArgs["result"]["leasePaymentSchedule"]>
  export type LeasePaymentScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lease?: boolean | LeaseDefaultArgs<ExtArgs>
  }
  export type LeasePaymentScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lease?: boolean | LeaseDefaultArgs<ExtArgs>
  }
  export type LeasePaymentScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lease?: boolean | LeaseDefaultArgs<ExtArgs>
  }

  export type $LeasePaymentSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeasePaymentSchedule"
    objects: {
      lease: Prisma.$LeasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      id: number
      dueDate: Date
      amountDue: number
      status: $Enums.PaymentScheduleStatus
      leaseId: number
    }, ExtArgs["result"]["leasePaymentSchedule"]>
    composites: {}
  }

  type LeasePaymentScheduleGetPayload<S extends boolean | null | undefined | LeasePaymentScheduleDefaultArgs> = $Result.GetResult<Prisma.$LeasePaymentSchedulePayload, S>

  type LeasePaymentScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeasePaymentScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeasePaymentScheduleCountAggregateInputType | true
    }

  export interface LeasePaymentScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeasePaymentSchedule'], meta: { name: 'LeasePaymentSchedule' } }
    /**
     * Find zero or one LeasePaymentSchedule that matches the filter.
     * @param {LeasePaymentScheduleFindUniqueArgs} args - Arguments to find a LeasePaymentSchedule
     * @example
     * // Get one LeasePaymentSchedule
     * const leasePaymentSchedule = await prisma.leasePaymentSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeasePaymentScheduleFindUniqueArgs>(args: SelectSubset<T, LeasePaymentScheduleFindUniqueArgs<ExtArgs>>): Prisma__LeasePaymentScheduleClient<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeasePaymentSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeasePaymentScheduleFindUniqueOrThrowArgs} args - Arguments to find a LeasePaymentSchedule
     * @example
     * // Get one LeasePaymentSchedule
     * const leasePaymentSchedule = await prisma.leasePaymentSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeasePaymentScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, LeasePaymentScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeasePaymentScheduleClient<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeasePaymentSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeasePaymentScheduleFindFirstArgs} args - Arguments to find a LeasePaymentSchedule
     * @example
     * // Get one LeasePaymentSchedule
     * const leasePaymentSchedule = await prisma.leasePaymentSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeasePaymentScheduleFindFirstArgs>(args?: SelectSubset<T, LeasePaymentScheduleFindFirstArgs<ExtArgs>>): Prisma__LeasePaymentScheduleClient<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeasePaymentSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeasePaymentScheduleFindFirstOrThrowArgs} args - Arguments to find a LeasePaymentSchedule
     * @example
     * // Get one LeasePaymentSchedule
     * const leasePaymentSchedule = await prisma.leasePaymentSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeasePaymentScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, LeasePaymentScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeasePaymentScheduleClient<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeasePaymentSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeasePaymentScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeasePaymentSchedules
     * const leasePaymentSchedules = await prisma.leasePaymentSchedule.findMany()
     * 
     * // Get first 10 LeasePaymentSchedules
     * const leasePaymentSchedules = await prisma.leasePaymentSchedule.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const leasePaymentScheduleWithCreatedAtOnly = await prisma.leasePaymentSchedule.findMany({ select: { createdAt: true } })
     * 
     */
    findMany<T extends LeasePaymentScheduleFindManyArgs>(args?: SelectSubset<T, LeasePaymentScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeasePaymentSchedule.
     * @param {LeasePaymentScheduleCreateArgs} args - Arguments to create a LeasePaymentSchedule.
     * @example
     * // Create one LeasePaymentSchedule
     * const LeasePaymentSchedule = await prisma.leasePaymentSchedule.create({
     *   data: {
     *     // ... data to create a LeasePaymentSchedule
     *   }
     * })
     * 
     */
    create<T extends LeasePaymentScheduleCreateArgs>(args: SelectSubset<T, LeasePaymentScheduleCreateArgs<ExtArgs>>): Prisma__LeasePaymentScheduleClient<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeasePaymentSchedules.
     * @param {LeasePaymentScheduleCreateManyArgs} args - Arguments to create many LeasePaymentSchedules.
     * @example
     * // Create many LeasePaymentSchedules
     * const leasePaymentSchedule = await prisma.leasePaymentSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeasePaymentScheduleCreateManyArgs>(args?: SelectSubset<T, LeasePaymentScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeasePaymentSchedules and returns the data saved in the database.
     * @param {LeasePaymentScheduleCreateManyAndReturnArgs} args - Arguments to create many LeasePaymentSchedules.
     * @example
     * // Create many LeasePaymentSchedules
     * const leasePaymentSchedule = await prisma.leasePaymentSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeasePaymentSchedules and only return the `createdAt`
     * const leasePaymentScheduleWithCreatedAtOnly = await prisma.leasePaymentSchedule.createManyAndReturn({
     *   select: { createdAt: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeasePaymentScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, LeasePaymentScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeasePaymentSchedule.
     * @param {LeasePaymentScheduleDeleteArgs} args - Arguments to delete one LeasePaymentSchedule.
     * @example
     * // Delete one LeasePaymentSchedule
     * const LeasePaymentSchedule = await prisma.leasePaymentSchedule.delete({
     *   where: {
     *     // ... filter to delete one LeasePaymentSchedule
     *   }
     * })
     * 
     */
    delete<T extends LeasePaymentScheduleDeleteArgs>(args: SelectSubset<T, LeasePaymentScheduleDeleteArgs<ExtArgs>>): Prisma__LeasePaymentScheduleClient<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeasePaymentSchedule.
     * @param {LeasePaymentScheduleUpdateArgs} args - Arguments to update one LeasePaymentSchedule.
     * @example
     * // Update one LeasePaymentSchedule
     * const leasePaymentSchedule = await prisma.leasePaymentSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeasePaymentScheduleUpdateArgs>(args: SelectSubset<T, LeasePaymentScheduleUpdateArgs<ExtArgs>>): Prisma__LeasePaymentScheduleClient<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeasePaymentSchedules.
     * @param {LeasePaymentScheduleDeleteManyArgs} args - Arguments to filter LeasePaymentSchedules to delete.
     * @example
     * // Delete a few LeasePaymentSchedules
     * const { count } = await prisma.leasePaymentSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeasePaymentScheduleDeleteManyArgs>(args?: SelectSubset<T, LeasePaymentScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeasePaymentSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeasePaymentScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeasePaymentSchedules
     * const leasePaymentSchedule = await prisma.leasePaymentSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeasePaymentScheduleUpdateManyArgs>(args: SelectSubset<T, LeasePaymentScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeasePaymentSchedules and returns the data updated in the database.
     * @param {LeasePaymentScheduleUpdateManyAndReturnArgs} args - Arguments to update many LeasePaymentSchedules.
     * @example
     * // Update many LeasePaymentSchedules
     * const leasePaymentSchedule = await prisma.leasePaymentSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeasePaymentSchedules and only return the `createdAt`
     * const leasePaymentScheduleWithCreatedAtOnly = await prisma.leasePaymentSchedule.updateManyAndReturn({
     *   select: { createdAt: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeasePaymentScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, LeasePaymentScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeasePaymentSchedule.
     * @param {LeasePaymentScheduleUpsertArgs} args - Arguments to update or create a LeasePaymentSchedule.
     * @example
     * // Update or create a LeasePaymentSchedule
     * const leasePaymentSchedule = await prisma.leasePaymentSchedule.upsert({
     *   create: {
     *     // ... data to create a LeasePaymentSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeasePaymentSchedule we want to update
     *   }
     * })
     */
    upsert<T extends LeasePaymentScheduleUpsertArgs>(args: SelectSubset<T, LeasePaymentScheduleUpsertArgs<ExtArgs>>): Prisma__LeasePaymentScheduleClient<$Result.GetResult<Prisma.$LeasePaymentSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeasePaymentSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeasePaymentScheduleCountArgs} args - Arguments to filter LeasePaymentSchedules to count.
     * @example
     * // Count the number of LeasePaymentSchedules
     * const count = await prisma.leasePaymentSchedule.count({
     *   where: {
     *     // ... the filter for the LeasePaymentSchedules we want to count
     *   }
     * })
    **/
    count<T extends LeasePaymentScheduleCountArgs>(
      args?: Subset<T, LeasePaymentScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeasePaymentScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeasePaymentSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeasePaymentScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeasePaymentScheduleAggregateArgs>(args: Subset<T, LeasePaymentScheduleAggregateArgs>): Prisma.PrismaPromise<GetLeasePaymentScheduleAggregateType<T>>

    /**
     * Group by LeasePaymentSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeasePaymentScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeasePaymentScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeasePaymentScheduleGroupByArgs['orderBy'] }
        : { orderBy?: LeasePaymentScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeasePaymentScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeasePaymentScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeasePaymentSchedule model
   */
  readonly fields: LeasePaymentScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeasePaymentSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeasePaymentScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lease<T extends LeaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeaseDefaultArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeasePaymentSchedule model
   */
  interface LeasePaymentScheduleFieldRefs {
    readonly createdAt: FieldRef<"LeasePaymentSchedule", 'DateTime'>
    readonly id: FieldRef<"LeasePaymentSchedule", 'Int'>
    readonly dueDate: FieldRef<"LeasePaymentSchedule", 'DateTime'>
    readonly amountDue: FieldRef<"LeasePaymentSchedule", 'Float'>
    readonly status: FieldRef<"LeasePaymentSchedule", 'PaymentScheduleStatus'>
    readonly leaseId: FieldRef<"LeasePaymentSchedule", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * LeasePaymentSchedule findUnique
   */
  export type LeasePaymentScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter, which LeasePaymentSchedule to fetch.
     */
    where: LeasePaymentScheduleWhereUniqueInput
  }

  /**
   * LeasePaymentSchedule findUniqueOrThrow
   */
  export type LeasePaymentScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter, which LeasePaymentSchedule to fetch.
     */
    where: LeasePaymentScheduleWhereUniqueInput
  }

  /**
   * LeasePaymentSchedule findFirst
   */
  export type LeasePaymentScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter, which LeasePaymentSchedule to fetch.
     */
    where?: LeasePaymentScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeasePaymentSchedules to fetch.
     */
    orderBy?: LeasePaymentScheduleOrderByWithRelationInput | LeasePaymentScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeasePaymentSchedules.
     */
    cursor?: LeasePaymentScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeasePaymentSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeasePaymentSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeasePaymentSchedules.
     */
    distinct?: LeasePaymentScheduleScalarFieldEnum | LeasePaymentScheduleScalarFieldEnum[]
  }

  /**
   * LeasePaymentSchedule findFirstOrThrow
   */
  export type LeasePaymentScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter, which LeasePaymentSchedule to fetch.
     */
    where?: LeasePaymentScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeasePaymentSchedules to fetch.
     */
    orderBy?: LeasePaymentScheduleOrderByWithRelationInput | LeasePaymentScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeasePaymentSchedules.
     */
    cursor?: LeasePaymentScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeasePaymentSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeasePaymentSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeasePaymentSchedules.
     */
    distinct?: LeasePaymentScheduleScalarFieldEnum | LeasePaymentScheduleScalarFieldEnum[]
  }

  /**
   * LeasePaymentSchedule findMany
   */
  export type LeasePaymentScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter, which LeasePaymentSchedules to fetch.
     */
    where?: LeasePaymentScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeasePaymentSchedules to fetch.
     */
    orderBy?: LeasePaymentScheduleOrderByWithRelationInput | LeasePaymentScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeasePaymentSchedules.
     */
    cursor?: LeasePaymentScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeasePaymentSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeasePaymentSchedules.
     */
    skip?: number
    distinct?: LeasePaymentScheduleScalarFieldEnum | LeasePaymentScheduleScalarFieldEnum[]
  }

  /**
   * LeasePaymentSchedule create
   */
  export type LeasePaymentScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a LeasePaymentSchedule.
     */
    data: XOR<LeasePaymentScheduleCreateInput, LeasePaymentScheduleUncheckedCreateInput>
  }

  /**
   * LeasePaymentSchedule createMany
   */
  export type LeasePaymentScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeasePaymentSchedules.
     */
    data: LeasePaymentScheduleCreateManyInput | LeasePaymentScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeasePaymentSchedule createManyAndReturn
   */
  export type LeasePaymentScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many LeasePaymentSchedules.
     */
    data: LeasePaymentScheduleCreateManyInput | LeasePaymentScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeasePaymentSchedule update
   */
  export type LeasePaymentScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a LeasePaymentSchedule.
     */
    data: XOR<LeasePaymentScheduleUpdateInput, LeasePaymentScheduleUncheckedUpdateInput>
    /**
     * Choose, which LeasePaymentSchedule to update.
     */
    where: LeasePaymentScheduleWhereUniqueInput
  }

  /**
   * LeasePaymentSchedule updateMany
   */
  export type LeasePaymentScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeasePaymentSchedules.
     */
    data: XOR<LeasePaymentScheduleUpdateManyMutationInput, LeasePaymentScheduleUncheckedUpdateManyInput>
    /**
     * Filter which LeasePaymentSchedules to update
     */
    where?: LeasePaymentScheduleWhereInput
    /**
     * Limit how many LeasePaymentSchedules to update.
     */
    limit?: number
  }

  /**
   * LeasePaymentSchedule updateManyAndReturn
   */
  export type LeasePaymentScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * The data used to update LeasePaymentSchedules.
     */
    data: XOR<LeasePaymentScheduleUpdateManyMutationInput, LeasePaymentScheduleUncheckedUpdateManyInput>
    /**
     * Filter which LeasePaymentSchedules to update
     */
    where?: LeasePaymentScheduleWhereInput
    /**
     * Limit how many LeasePaymentSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeasePaymentSchedule upsert
   */
  export type LeasePaymentScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the LeasePaymentSchedule to update in case it exists.
     */
    where: LeasePaymentScheduleWhereUniqueInput
    /**
     * In case the LeasePaymentSchedule found by the `where` argument doesn't exist, create a new LeasePaymentSchedule with this data.
     */
    create: XOR<LeasePaymentScheduleCreateInput, LeasePaymentScheduleUncheckedCreateInput>
    /**
     * In case the LeasePaymentSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeasePaymentScheduleUpdateInput, LeasePaymentScheduleUncheckedUpdateInput>
  }

  /**
   * LeasePaymentSchedule delete
   */
  export type LeasePaymentScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter which LeasePaymentSchedule to delete.
     */
    where: LeasePaymentScheduleWhereUniqueInput
  }

  /**
   * LeasePaymentSchedule deleteMany
   */
  export type LeasePaymentScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeasePaymentSchedules to delete
     */
    where?: LeasePaymentScheduleWhereInput
    /**
     * Limit how many LeasePaymentSchedules to delete.
     */
    limit?: number
  }

  /**
   * LeasePaymentSchedule without action
   */
  export type LeasePaymentScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeasePaymentSchedule
     */
    select?: LeasePaymentScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeasePaymentSchedule
     */
    omit?: LeasePaymentScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeasePaymentScheduleInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number | null
    realEstateObjectId: number | null
    unitId: number | null
    userId: number | null
  }

  export type ImageSumAggregateOutputType = {
    id: number | null
    realEstateObjectId: number | null
    unitId: number | null
    userId: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: number | null
    imageUrl: string | null
    createdAt: Date | null
    realEstateObjectId: number | null
    unitId: number | null
    userId: number | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number | null
    imageUrl: string | null
    createdAt: Date | null
    realEstateObjectId: number | null
    unitId: number | null
    userId: number | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    imageUrl: number
    createdAt: number
    realEstateObjectId: number
    unitId: number
    userId: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
    realEstateObjectId?: true
    unitId?: true
    userId?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
    realEstateObjectId?: true
    unitId?: true
    userId?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    imageUrl?: true
    createdAt?: true
    realEstateObjectId?: true
    unitId?: true
    userId?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    imageUrl?: true
    createdAt?: true
    realEstateObjectId?: true
    unitId?: true
    userId?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    imageUrl?: true
    createdAt?: true
    realEstateObjectId?: true
    unitId?: true
    userId?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: number
    imageUrl: string
    createdAt: Date
    realEstateObjectId: number | null
    unitId: number | null
    userId: number
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    realEstateObjectId?: boolean
    unitId?: boolean
    userId?: boolean
    realEstateObject?: boolean | Image$realEstateObjectArgs<ExtArgs>
    unit?: boolean | Image$unitArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    realEstateObjectId?: boolean
    unitId?: boolean
    userId?: boolean
    realEstateObject?: boolean | Image$realEstateObjectArgs<ExtArgs>
    unit?: boolean | Image$unitArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    realEstateObjectId?: boolean
    unitId?: boolean
    userId?: boolean
    realEstateObject?: boolean | Image$realEstateObjectArgs<ExtArgs>
    unit?: boolean | Image$unitArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    realEstateObjectId?: boolean
    unitId?: boolean
    userId?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "imageUrl" | "createdAt" | "realEstateObjectId" | "unitId" | "userId", ExtArgs["result"]["image"]>
  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    realEstateObject?: boolean | Image$realEstateObjectArgs<ExtArgs>
    unit?: boolean | Image$unitArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    realEstateObject?: boolean | Image$realEstateObjectArgs<ExtArgs>
    unit?: boolean | Image$unitArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    realEstateObject?: boolean | Image$realEstateObjectArgs<ExtArgs>
    unit?: boolean | Image$unitArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      realEstateObject: Prisma.$RealEstateObjectPayload<ExtArgs> | null
      unit: Prisma.$UnitPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      imageUrl: string
      createdAt: Date
      realEstateObjectId: number | null
      unitId: number | null
      userId: number
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Images and returns the data saved in the database.
     * @param {ImageCreateManyAndReturnArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImageCreateManyAndReturnArgs>(args?: SelectSubset<T, ImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images and returns the data updated in the database.
     * @param {ImageUpdateManyAndReturnArgs} args - Arguments to update many Images.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImageUpdateManyAndReturnArgs>(args: SelectSubset<T, ImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    realEstateObject<T extends Image$realEstateObjectArgs<ExtArgs> = {}>(args?: Subset<T, Image$realEstateObjectArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    unit<T extends Image$unitArgs<ExtArgs> = {}>(args?: Subset<T, Image$unitArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'Int'>
    readonly imageUrl: FieldRef<"Image", 'String'>
    readonly createdAt: FieldRef<"Image", 'DateTime'>
    readonly realEstateObjectId: FieldRef<"Image", 'Int'>
    readonly unitId: FieldRef<"Image", 'Int'>
    readonly userId: FieldRef<"Image", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image createManyAndReturn
   */
  export type ImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image updateManyAndReturn
   */
  export type ImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image.realEstateObject
   */
  export type Image$realEstateObjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
    where?: RealEstateObjectWhereInput
  }

  /**
   * Image.unit
   */
  export type Image$unitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    realEstateObjectId: number | null
    leaseId: number | null
    unitId: number | null
  }

  export type DocumentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    realEstateObjectId: number | null
    leaseId: number | null
    unitId: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: number | null
    documentType: $Enums.DocumentType | null
    filePath: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    realEstateObjectId: number | null
    leaseId: number | null
    unitId: number | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: number | null
    documentType: $Enums.DocumentType | null
    filePath: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    realEstateObjectId: number | null
    leaseId: number | null
    unitId: number | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    documentType: number
    filePath: number
    createdAt: number
    updatedAt: number
    userId: number
    realEstateObjectId: number
    leaseId: number
    unitId: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    id?: true
    userId?: true
    realEstateObjectId?: true
    leaseId?: true
    unitId?: true
  }

  export type DocumentSumAggregateInputType = {
    id?: true
    userId?: true
    realEstateObjectId?: true
    leaseId?: true
    unitId?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    documentType?: true
    filePath?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    realEstateObjectId?: true
    leaseId?: true
    unitId?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    documentType?: true
    filePath?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    realEstateObjectId?: true
    leaseId?: true
    unitId?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    documentType?: true
    filePath?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    realEstateObjectId?: true
    leaseId?: true
    unitId?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: number
    documentType: $Enums.DocumentType
    filePath: string
    createdAt: Date
    updatedAt: Date
    userId: number
    realEstateObjectId: number | null
    leaseId: number | null
    unitId: number | null
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentType?: boolean
    filePath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    realEstateObjectId?: boolean
    leaseId?: boolean
    unitId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    realEstateObject?: boolean | Document$realEstateObjectArgs<ExtArgs>
    lease?: boolean | Document$leaseArgs<ExtArgs>
    unit?: boolean | Document$unitArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentType?: boolean
    filePath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    realEstateObjectId?: boolean
    leaseId?: boolean
    unitId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    realEstateObject?: boolean | Document$realEstateObjectArgs<ExtArgs>
    lease?: boolean | Document$leaseArgs<ExtArgs>
    unit?: boolean | Document$unitArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentType?: boolean
    filePath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    realEstateObjectId?: boolean
    leaseId?: boolean
    unitId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    realEstateObject?: boolean | Document$realEstateObjectArgs<ExtArgs>
    lease?: boolean | Document$leaseArgs<ExtArgs>
    unit?: boolean | Document$unitArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    documentType?: boolean
    filePath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    realEstateObjectId?: boolean
    leaseId?: boolean
    unitId?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "documentType" | "filePath" | "createdAt" | "updatedAt" | "userId" | "realEstateObjectId" | "leaseId" | "unitId", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    realEstateObject?: boolean | Document$realEstateObjectArgs<ExtArgs>
    lease?: boolean | Document$leaseArgs<ExtArgs>
    unit?: boolean | Document$unitArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    realEstateObject?: boolean | Document$realEstateObjectArgs<ExtArgs>
    lease?: boolean | Document$leaseArgs<ExtArgs>
    unit?: boolean | Document$unitArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    realEstateObject?: boolean | Document$realEstateObjectArgs<ExtArgs>
    lease?: boolean | Document$leaseArgs<ExtArgs>
    unit?: boolean | Document$unitArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      realEstateObject: Prisma.$RealEstateObjectPayload<ExtArgs> | null
      lease: Prisma.$LeasePayload<ExtArgs> | null
      unit: Prisma.$UnitPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      documentType: $Enums.DocumentType
      filePath: string
      createdAt: Date
      updatedAt: Date
      userId: number
      realEstateObjectId: number | null
      leaseId: number | null
      unitId: number | null
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    realEstateObject<T extends Document$realEstateObjectArgs<ExtArgs> = {}>(args?: Subset<T, Document$realEstateObjectArgs<ExtArgs>>): Prisma__RealEstateObjectClient<$Result.GetResult<Prisma.$RealEstateObjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    lease<T extends Document$leaseArgs<ExtArgs> = {}>(args?: Subset<T, Document$leaseArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    unit<T extends Document$unitArgs<ExtArgs> = {}>(args?: Subset<T, Document$unitArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'Int'>
    readonly documentType: FieldRef<"Document", 'DocumentType'>
    readonly filePath: FieldRef<"Document", 'String'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly updatedAt: FieldRef<"Document", 'DateTime'>
    readonly userId: FieldRef<"Document", 'Int'>
    readonly realEstateObjectId: FieldRef<"Document", 'Int'>
    readonly leaseId: FieldRef<"Document", 'Int'>
    readonly unitId: FieldRef<"Document", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document.realEstateObject
   */
  export type Document$realEstateObjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RealEstateObject
     */
    select?: RealEstateObjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RealEstateObject
     */
    omit?: RealEstateObjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RealEstateObjectInclude<ExtArgs> | null
    where?: RealEstateObjectWhereInput
  }

  /**
   * Document.lease
   */
  export type Document$leaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    where?: LeaseWhereInput
  }

  /**
   * Document.unit
   */
  export type Document$unitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    senderId: number | null
    receiverId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    type: string | null
    timestamp: Date | null
    senderId: number | null
    receiverId: number | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    type: string | null
    timestamp: Date | null
    senderId: number | null
    receiverId: number | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    content: number
    type: number
    timestamp: number
    senderId: number
    receiverId: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    type?: true
    timestamp?: true
    senderId?: true
    receiverId?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    type?: true
    timestamp?: true
    senderId?: true
    receiverId?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    content?: true
    type?: true
    timestamp?: true
    senderId?: true
    receiverId?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    content: JsonValue
    type: string
    timestamp: Date
    senderId: number
    receiverId: number
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    type?: boolean
    timestamp?: boolean
    senderId?: boolean
    receiverId?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    type?: boolean
    timestamp?: boolean
    senderId?: boolean
    receiverId?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    type?: boolean
    timestamp?: boolean
    senderId?: boolean
    receiverId?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    content?: boolean
    type?: boolean
    timestamp?: boolean
    senderId?: boolean
    receiverId?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "type" | "timestamp" | "senderId" | "receiverId", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: Prisma.JsonValue
      type: string
      timestamp: Date
      senderId: number
      receiverId: number
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'Int'>
    readonly content: FieldRef<"Message", 'Json'>
    readonly type: FieldRef<"Message", 'String'>
    readonly timestamp: FieldRef<"Message", 'DateTime'>
    readonly senderId: FieldRef<"Message", 'Int'>
    readonly receiverId: FieldRef<"Message", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model MaintenanceRequest
   */

  export type AggregateMaintenanceRequest = {
    _count: MaintenanceRequestCountAggregateOutputType | null
    _avg: MaintenanceRequestAvgAggregateOutputType | null
    _sum: MaintenanceRequestSumAggregateOutputType | null
    _min: MaintenanceRequestMinAggregateOutputType | null
    _max: MaintenanceRequestMaxAggregateOutputType | null
  }

  export type MaintenanceRequestAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
    tenantId: number | null
    repairCost: Decimal | null
    vendorId: number | null
    reporterId: number | null
    unitId: number | null
  }

  export type MaintenanceRequestSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
    tenantId: number | null
    repairCost: Decimal | null
    vendorId: number | null
    reporterId: number | null
    unitId: number | null
  }

  export type MaintenanceRequestMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    resolvedAt: Date | null
    title: string | null
    status: $Enums.MaintenanceStatus | null
    priority: $Enums.Priority | null
    ownerId: number | null
    tenantId: number | null
    notes: string | null
    category: string | null
    categoryOther: string | null
    pendingTagRequest: boolean | null
    isHOAIssue: boolean | null
    repairCost: Decimal | null
    invoiceUrl: string | null
    vendorId: number | null
    vendorAccepted: boolean | null
    vendorRespondedAt: Date | null
    lastNotificationAt: Date | null
    reporterId: number | null
    unitId: number | null
  }

  export type MaintenanceRequestMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    resolvedAt: Date | null
    title: string | null
    status: $Enums.MaintenanceStatus | null
    priority: $Enums.Priority | null
    ownerId: number | null
    tenantId: number | null
    notes: string | null
    category: string | null
    categoryOther: string | null
    pendingTagRequest: boolean | null
    isHOAIssue: boolean | null
    repairCost: Decimal | null
    invoiceUrl: string | null
    vendorId: number | null
    vendorAccepted: boolean | null
    vendorRespondedAt: Date | null
    lastNotificationAt: Date | null
    reporterId: number | null
    unitId: number | null
  }

  export type MaintenanceRequestCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    resolvedAt: number
    title: number
    status: number
    priority: number
    ownerId: number
    tenantId: number
    notes: number
    category: number
    categoryOther: number
    pendingTagRequest: number
    isHOAIssue: number
    attachments: number
    repairCost: number
    invoiceUrl: number
    vendorId: number
    vendorAccepted: number
    vendorRespondedAt: number
    lastNotificationAt: number
    reporterId: number
    unitId: number
    _all: number
  }


  export type MaintenanceRequestAvgAggregateInputType = {
    id?: true
    ownerId?: true
    tenantId?: true
    repairCost?: true
    vendorId?: true
    reporterId?: true
    unitId?: true
  }

  export type MaintenanceRequestSumAggregateInputType = {
    id?: true
    ownerId?: true
    tenantId?: true
    repairCost?: true
    vendorId?: true
    reporterId?: true
    unitId?: true
  }

  export type MaintenanceRequestMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    title?: true
    status?: true
    priority?: true
    ownerId?: true
    tenantId?: true
    notes?: true
    category?: true
    categoryOther?: true
    pendingTagRequest?: true
    isHOAIssue?: true
    repairCost?: true
    invoiceUrl?: true
    vendorId?: true
    vendorAccepted?: true
    vendorRespondedAt?: true
    lastNotificationAt?: true
    reporterId?: true
    unitId?: true
  }

  export type MaintenanceRequestMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    title?: true
    status?: true
    priority?: true
    ownerId?: true
    tenantId?: true
    notes?: true
    category?: true
    categoryOther?: true
    pendingTagRequest?: true
    isHOAIssue?: true
    repairCost?: true
    invoiceUrl?: true
    vendorId?: true
    vendorAccepted?: true
    vendorRespondedAt?: true
    lastNotificationAt?: true
    reporterId?: true
    unitId?: true
  }

  export type MaintenanceRequestCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    title?: true
    status?: true
    priority?: true
    ownerId?: true
    tenantId?: true
    notes?: true
    category?: true
    categoryOther?: true
    pendingTagRequest?: true
    isHOAIssue?: true
    attachments?: true
    repairCost?: true
    invoiceUrl?: true
    vendorId?: true
    vendorAccepted?: true
    vendorRespondedAt?: true
    lastNotificationAt?: true
    reporterId?: true
    unitId?: true
    _all?: true
  }

  export type MaintenanceRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceRequest to aggregate.
     */
    where?: MaintenanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceRequests to fetch.
     */
    orderBy?: MaintenanceRequestOrderByWithRelationInput | MaintenanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaintenanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaintenanceRequests
    **/
    _count?: true | MaintenanceRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaintenanceRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaintenanceRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaintenanceRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaintenanceRequestMaxAggregateInputType
  }

  export type GetMaintenanceRequestAggregateType<T extends MaintenanceRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateMaintenanceRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaintenanceRequest[P]>
      : GetScalarType<T[P], AggregateMaintenanceRequest[P]>
  }




  export type MaintenanceRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceRequestWhereInput
    orderBy?: MaintenanceRequestOrderByWithAggregationInput | MaintenanceRequestOrderByWithAggregationInput[]
    by: MaintenanceRequestScalarFieldEnum[] | MaintenanceRequestScalarFieldEnum
    having?: MaintenanceRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaintenanceRequestCountAggregateInputType | true
    _avg?: MaintenanceRequestAvgAggregateInputType
    _sum?: MaintenanceRequestSumAggregateInputType
    _min?: MaintenanceRequestMinAggregateInputType
    _max?: MaintenanceRequestMaxAggregateInputType
  }

  export type MaintenanceRequestGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    resolvedAt: Date | null
    title: string
    status: $Enums.MaintenanceStatus | null
    priority: $Enums.Priority | null
    ownerId: number | null
    tenantId: number | null
    notes: string | null
    category: string
    categoryOther: string | null
    pendingTagRequest: boolean
    isHOAIssue: boolean
    attachments: string[]
    repairCost: Decimal | null
    invoiceUrl: string | null
    vendorId: number | null
    vendorAccepted: boolean | null
    vendorRespondedAt: Date | null
    lastNotificationAt: Date | null
    reporterId: number | null
    unitId: number | null
    _count: MaintenanceRequestCountAggregateOutputType | null
    _avg: MaintenanceRequestAvgAggregateOutputType | null
    _sum: MaintenanceRequestSumAggregateOutputType | null
    _min: MaintenanceRequestMinAggregateOutputType | null
    _max: MaintenanceRequestMaxAggregateOutputType | null
  }

  type GetMaintenanceRequestGroupByPayload<T extends MaintenanceRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaintenanceRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaintenanceRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaintenanceRequestGroupByOutputType[P]>
            : GetScalarType<T[P], MaintenanceRequestGroupByOutputType[P]>
        }
      >
    >


  export type MaintenanceRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    title?: boolean
    status?: boolean
    priority?: boolean
    ownerId?: boolean
    tenantId?: boolean
    notes?: boolean
    category?: boolean
    categoryOther?: boolean
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: boolean
    repairCost?: boolean
    invoiceUrl?: boolean
    vendorId?: boolean
    vendorAccepted?: boolean
    vendorRespondedAt?: boolean
    lastNotificationAt?: boolean
    reporterId?: boolean
    unitId?: boolean
    owner?: boolean | MaintenanceRequest$ownerArgs<ExtArgs>
    tenant?: boolean | MaintenanceRequest$tenantArgs<ExtArgs>
    vendor?: boolean | MaintenanceRequest$vendorArgs<ExtArgs>
    reporter?: boolean | MaintenanceRequest$reporterArgs<ExtArgs>
    unit?: boolean | MaintenanceRequest$unitArgs<ExtArgs>
    expenses?: boolean | MaintenanceRequest$expensesArgs<ExtArgs>
    linkedAsA?: boolean | MaintenanceRequest$linkedAsAArgs<ExtArgs>
    linkedAsB?: boolean | MaintenanceRequest$linkedAsBArgs<ExtArgs>
    _count?: boolean | MaintenanceRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceRequest"]>

  export type MaintenanceRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    title?: boolean
    status?: boolean
    priority?: boolean
    ownerId?: boolean
    tenantId?: boolean
    notes?: boolean
    category?: boolean
    categoryOther?: boolean
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: boolean
    repairCost?: boolean
    invoiceUrl?: boolean
    vendorId?: boolean
    vendorAccepted?: boolean
    vendorRespondedAt?: boolean
    lastNotificationAt?: boolean
    reporterId?: boolean
    unitId?: boolean
    owner?: boolean | MaintenanceRequest$ownerArgs<ExtArgs>
    tenant?: boolean | MaintenanceRequest$tenantArgs<ExtArgs>
    vendor?: boolean | MaintenanceRequest$vendorArgs<ExtArgs>
    reporter?: boolean | MaintenanceRequest$reporterArgs<ExtArgs>
    unit?: boolean | MaintenanceRequest$unitArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceRequest"]>

  export type MaintenanceRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    title?: boolean
    status?: boolean
    priority?: boolean
    ownerId?: boolean
    tenantId?: boolean
    notes?: boolean
    category?: boolean
    categoryOther?: boolean
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: boolean
    repairCost?: boolean
    invoiceUrl?: boolean
    vendorId?: boolean
    vendorAccepted?: boolean
    vendorRespondedAt?: boolean
    lastNotificationAt?: boolean
    reporterId?: boolean
    unitId?: boolean
    owner?: boolean | MaintenanceRequest$ownerArgs<ExtArgs>
    tenant?: boolean | MaintenanceRequest$tenantArgs<ExtArgs>
    vendor?: boolean | MaintenanceRequest$vendorArgs<ExtArgs>
    reporter?: boolean | MaintenanceRequest$reporterArgs<ExtArgs>
    unit?: boolean | MaintenanceRequest$unitArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceRequest"]>

  export type MaintenanceRequestSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    title?: boolean
    status?: boolean
    priority?: boolean
    ownerId?: boolean
    tenantId?: boolean
    notes?: boolean
    category?: boolean
    categoryOther?: boolean
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: boolean
    repairCost?: boolean
    invoiceUrl?: boolean
    vendorId?: boolean
    vendorAccepted?: boolean
    vendorRespondedAt?: boolean
    lastNotificationAt?: boolean
    reporterId?: boolean
    unitId?: boolean
  }

  export type MaintenanceRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "resolvedAt" | "title" | "status" | "priority" | "ownerId" | "tenantId" | "notes" | "category" | "categoryOther" | "pendingTagRequest" | "isHOAIssue" | "attachments" | "repairCost" | "invoiceUrl" | "vendorId" | "vendorAccepted" | "vendorRespondedAt" | "lastNotificationAt" | "reporterId" | "unitId", ExtArgs["result"]["maintenanceRequest"]>
  export type MaintenanceRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | MaintenanceRequest$ownerArgs<ExtArgs>
    tenant?: boolean | MaintenanceRequest$tenantArgs<ExtArgs>
    vendor?: boolean | MaintenanceRequest$vendorArgs<ExtArgs>
    reporter?: boolean | MaintenanceRequest$reporterArgs<ExtArgs>
    unit?: boolean | MaintenanceRequest$unitArgs<ExtArgs>
    expenses?: boolean | MaintenanceRequest$expensesArgs<ExtArgs>
    linkedAsA?: boolean | MaintenanceRequest$linkedAsAArgs<ExtArgs>
    linkedAsB?: boolean | MaintenanceRequest$linkedAsBArgs<ExtArgs>
    _count?: boolean | MaintenanceRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MaintenanceRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | MaintenanceRequest$ownerArgs<ExtArgs>
    tenant?: boolean | MaintenanceRequest$tenantArgs<ExtArgs>
    vendor?: boolean | MaintenanceRequest$vendorArgs<ExtArgs>
    reporter?: boolean | MaintenanceRequest$reporterArgs<ExtArgs>
    unit?: boolean | MaintenanceRequest$unitArgs<ExtArgs>
  }
  export type MaintenanceRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | MaintenanceRequest$ownerArgs<ExtArgs>
    tenant?: boolean | MaintenanceRequest$tenantArgs<ExtArgs>
    vendor?: boolean | MaintenanceRequest$vendorArgs<ExtArgs>
    reporter?: boolean | MaintenanceRequest$reporterArgs<ExtArgs>
    unit?: boolean | MaintenanceRequest$unitArgs<ExtArgs>
  }

  export type $MaintenanceRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaintenanceRequest"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs> | null
      vendor: Prisma.$VendorPayload<ExtArgs> | null
      reporter: Prisma.$TenantPayload<ExtArgs> | null
      unit: Prisma.$UnitPayload<ExtArgs> | null
      expenses: Prisma.$ExpensePayload<ExtArgs>[]
      linkedAsA: Prisma.$LinkedRequestPayload<ExtArgs>[]
      linkedAsB: Prisma.$LinkedRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      resolvedAt: Date | null
      title: string
      status: $Enums.MaintenanceStatus | null
      priority: $Enums.Priority | null
      ownerId: number | null
      tenantId: number | null
      notes: string | null
      category: string
      categoryOther: string | null
      pendingTagRequest: boolean
      isHOAIssue: boolean
      attachments: string[]
      repairCost: Prisma.Decimal | null
      invoiceUrl: string | null
      vendorId: number | null
      vendorAccepted: boolean | null
      vendorRespondedAt: Date | null
      lastNotificationAt: Date | null
      reporterId: number | null
      unitId: number | null
    }, ExtArgs["result"]["maintenanceRequest"]>
    composites: {}
  }

  type MaintenanceRequestGetPayload<S extends boolean | null | undefined | MaintenanceRequestDefaultArgs> = $Result.GetResult<Prisma.$MaintenanceRequestPayload, S>

  type MaintenanceRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaintenanceRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaintenanceRequestCountAggregateInputType | true
    }

  export interface MaintenanceRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaintenanceRequest'], meta: { name: 'MaintenanceRequest' } }
    /**
     * Find zero or one MaintenanceRequest that matches the filter.
     * @param {MaintenanceRequestFindUniqueArgs} args - Arguments to find a MaintenanceRequest
     * @example
     * // Get one MaintenanceRequest
     * const maintenanceRequest = await prisma.maintenanceRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaintenanceRequestFindUniqueArgs>(args: SelectSubset<T, MaintenanceRequestFindUniqueArgs<ExtArgs>>): Prisma__MaintenanceRequestClient<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MaintenanceRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaintenanceRequestFindUniqueOrThrowArgs} args - Arguments to find a MaintenanceRequest
     * @example
     * // Get one MaintenanceRequest
     * const maintenanceRequest = await prisma.maintenanceRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaintenanceRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, MaintenanceRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaintenanceRequestClient<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaintenanceRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRequestFindFirstArgs} args - Arguments to find a MaintenanceRequest
     * @example
     * // Get one MaintenanceRequest
     * const maintenanceRequest = await prisma.maintenanceRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaintenanceRequestFindFirstArgs>(args?: SelectSubset<T, MaintenanceRequestFindFirstArgs<ExtArgs>>): Prisma__MaintenanceRequestClient<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MaintenanceRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRequestFindFirstOrThrowArgs} args - Arguments to find a MaintenanceRequest
     * @example
     * // Get one MaintenanceRequest
     * const maintenanceRequest = await prisma.maintenanceRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaintenanceRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, MaintenanceRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaintenanceRequestClient<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MaintenanceRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaintenanceRequests
     * const maintenanceRequests = await prisma.maintenanceRequest.findMany()
     * 
     * // Get first 10 MaintenanceRequests
     * const maintenanceRequests = await prisma.maintenanceRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const maintenanceRequestWithIdOnly = await prisma.maintenanceRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaintenanceRequestFindManyArgs>(args?: SelectSubset<T, MaintenanceRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MaintenanceRequest.
     * @param {MaintenanceRequestCreateArgs} args - Arguments to create a MaintenanceRequest.
     * @example
     * // Create one MaintenanceRequest
     * const MaintenanceRequest = await prisma.maintenanceRequest.create({
     *   data: {
     *     // ... data to create a MaintenanceRequest
     *   }
     * })
     * 
     */
    create<T extends MaintenanceRequestCreateArgs>(args: SelectSubset<T, MaintenanceRequestCreateArgs<ExtArgs>>): Prisma__MaintenanceRequestClient<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MaintenanceRequests.
     * @param {MaintenanceRequestCreateManyArgs} args - Arguments to create many MaintenanceRequests.
     * @example
     * // Create many MaintenanceRequests
     * const maintenanceRequest = await prisma.maintenanceRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaintenanceRequestCreateManyArgs>(args?: SelectSubset<T, MaintenanceRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaintenanceRequests and returns the data saved in the database.
     * @param {MaintenanceRequestCreateManyAndReturnArgs} args - Arguments to create many MaintenanceRequests.
     * @example
     * // Create many MaintenanceRequests
     * const maintenanceRequest = await prisma.maintenanceRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaintenanceRequests and only return the `id`
     * const maintenanceRequestWithIdOnly = await prisma.maintenanceRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaintenanceRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, MaintenanceRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MaintenanceRequest.
     * @param {MaintenanceRequestDeleteArgs} args - Arguments to delete one MaintenanceRequest.
     * @example
     * // Delete one MaintenanceRequest
     * const MaintenanceRequest = await prisma.maintenanceRequest.delete({
     *   where: {
     *     // ... filter to delete one MaintenanceRequest
     *   }
     * })
     * 
     */
    delete<T extends MaintenanceRequestDeleteArgs>(args: SelectSubset<T, MaintenanceRequestDeleteArgs<ExtArgs>>): Prisma__MaintenanceRequestClient<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MaintenanceRequest.
     * @param {MaintenanceRequestUpdateArgs} args - Arguments to update one MaintenanceRequest.
     * @example
     * // Update one MaintenanceRequest
     * const maintenanceRequest = await prisma.maintenanceRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaintenanceRequestUpdateArgs>(args: SelectSubset<T, MaintenanceRequestUpdateArgs<ExtArgs>>): Prisma__MaintenanceRequestClient<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MaintenanceRequests.
     * @param {MaintenanceRequestDeleteManyArgs} args - Arguments to filter MaintenanceRequests to delete.
     * @example
     * // Delete a few MaintenanceRequests
     * const { count } = await prisma.maintenanceRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaintenanceRequestDeleteManyArgs>(args?: SelectSubset<T, MaintenanceRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaintenanceRequests
     * const maintenanceRequest = await prisma.maintenanceRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaintenanceRequestUpdateManyArgs>(args: SelectSubset<T, MaintenanceRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceRequests and returns the data updated in the database.
     * @param {MaintenanceRequestUpdateManyAndReturnArgs} args - Arguments to update many MaintenanceRequests.
     * @example
     * // Update many MaintenanceRequests
     * const maintenanceRequest = await prisma.maintenanceRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MaintenanceRequests and only return the `id`
     * const maintenanceRequestWithIdOnly = await prisma.maintenanceRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaintenanceRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, MaintenanceRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MaintenanceRequest.
     * @param {MaintenanceRequestUpsertArgs} args - Arguments to update or create a MaintenanceRequest.
     * @example
     * // Update or create a MaintenanceRequest
     * const maintenanceRequest = await prisma.maintenanceRequest.upsert({
     *   create: {
     *     // ... data to create a MaintenanceRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaintenanceRequest we want to update
     *   }
     * })
     */
    upsert<T extends MaintenanceRequestUpsertArgs>(args: SelectSubset<T, MaintenanceRequestUpsertArgs<ExtArgs>>): Prisma__MaintenanceRequestClient<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MaintenanceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRequestCountArgs} args - Arguments to filter MaintenanceRequests to count.
     * @example
     * // Count the number of MaintenanceRequests
     * const count = await prisma.maintenanceRequest.count({
     *   where: {
     *     // ... the filter for the MaintenanceRequests we want to count
     *   }
     * })
    **/
    count<T extends MaintenanceRequestCountArgs>(
      args?: Subset<T, MaintenanceRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaintenanceRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaintenanceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaintenanceRequestAggregateArgs>(args: Subset<T, MaintenanceRequestAggregateArgs>): Prisma.PrismaPromise<GetMaintenanceRequestAggregateType<T>>

    /**
     * Group by MaintenanceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaintenanceRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaintenanceRequestGroupByArgs['orderBy'] }
        : { orderBy?: MaintenanceRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaintenanceRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaintenanceRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaintenanceRequest model
   */
  readonly fields: MaintenanceRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaintenanceRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaintenanceRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends MaintenanceRequest$ownerArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRequest$ownerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tenant<T extends MaintenanceRequest$tenantArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRequest$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    vendor<T extends MaintenanceRequest$vendorArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRequest$vendorArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reporter<T extends MaintenanceRequest$reporterArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRequest$reporterArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    unit<T extends MaintenanceRequest$unitArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRequest$unitArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    expenses<T extends MaintenanceRequest$expensesArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRequest$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    linkedAsA<T extends MaintenanceRequest$linkedAsAArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRequest$linkedAsAArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    linkedAsB<T extends MaintenanceRequest$linkedAsBArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRequest$linkedAsBArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaintenanceRequest model
   */
  interface MaintenanceRequestFieldRefs {
    readonly id: FieldRef<"MaintenanceRequest", 'Int'>
    readonly createdAt: FieldRef<"MaintenanceRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"MaintenanceRequest", 'DateTime'>
    readonly resolvedAt: FieldRef<"MaintenanceRequest", 'DateTime'>
    readonly title: FieldRef<"MaintenanceRequest", 'String'>
    readonly status: FieldRef<"MaintenanceRequest", 'MaintenanceStatus'>
    readonly priority: FieldRef<"MaintenanceRequest", 'Priority'>
    readonly ownerId: FieldRef<"MaintenanceRequest", 'Int'>
    readonly tenantId: FieldRef<"MaintenanceRequest", 'Int'>
    readonly notes: FieldRef<"MaintenanceRequest", 'String'>
    readonly category: FieldRef<"MaintenanceRequest", 'String'>
    readonly categoryOther: FieldRef<"MaintenanceRequest", 'String'>
    readonly pendingTagRequest: FieldRef<"MaintenanceRequest", 'Boolean'>
    readonly isHOAIssue: FieldRef<"MaintenanceRequest", 'Boolean'>
    readonly attachments: FieldRef<"MaintenanceRequest", 'String[]'>
    readonly repairCost: FieldRef<"MaintenanceRequest", 'Decimal'>
    readonly invoiceUrl: FieldRef<"MaintenanceRequest", 'String'>
    readonly vendorId: FieldRef<"MaintenanceRequest", 'Int'>
    readonly vendorAccepted: FieldRef<"MaintenanceRequest", 'Boolean'>
    readonly vendorRespondedAt: FieldRef<"MaintenanceRequest", 'DateTime'>
    readonly lastNotificationAt: FieldRef<"MaintenanceRequest", 'DateTime'>
    readonly reporterId: FieldRef<"MaintenanceRequest", 'Int'>
    readonly unitId: FieldRef<"MaintenanceRequest", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MaintenanceRequest findUnique
   */
  export type MaintenanceRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceRequest to fetch.
     */
    where: MaintenanceRequestWhereUniqueInput
  }

  /**
   * MaintenanceRequest findUniqueOrThrow
   */
  export type MaintenanceRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceRequest to fetch.
     */
    where: MaintenanceRequestWhereUniqueInput
  }

  /**
   * MaintenanceRequest findFirst
   */
  export type MaintenanceRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceRequest to fetch.
     */
    where?: MaintenanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceRequests to fetch.
     */
    orderBy?: MaintenanceRequestOrderByWithRelationInput | MaintenanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceRequests.
     */
    cursor?: MaintenanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceRequests.
     */
    distinct?: MaintenanceRequestScalarFieldEnum | MaintenanceRequestScalarFieldEnum[]
  }

  /**
   * MaintenanceRequest findFirstOrThrow
   */
  export type MaintenanceRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceRequest to fetch.
     */
    where?: MaintenanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceRequests to fetch.
     */
    orderBy?: MaintenanceRequestOrderByWithRelationInput | MaintenanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceRequests.
     */
    cursor?: MaintenanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceRequests.
     */
    distinct?: MaintenanceRequestScalarFieldEnum | MaintenanceRequestScalarFieldEnum[]
  }

  /**
   * MaintenanceRequest findMany
   */
  export type MaintenanceRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceRequests to fetch.
     */
    where?: MaintenanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceRequests to fetch.
     */
    orderBy?: MaintenanceRequestOrderByWithRelationInput | MaintenanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaintenanceRequests.
     */
    cursor?: MaintenanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceRequests.
     */
    skip?: number
    distinct?: MaintenanceRequestScalarFieldEnum | MaintenanceRequestScalarFieldEnum[]
  }

  /**
   * MaintenanceRequest create
   */
  export type MaintenanceRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a MaintenanceRequest.
     */
    data: XOR<MaintenanceRequestCreateInput, MaintenanceRequestUncheckedCreateInput>
  }

  /**
   * MaintenanceRequest createMany
   */
  export type MaintenanceRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaintenanceRequests.
     */
    data: MaintenanceRequestCreateManyInput | MaintenanceRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaintenanceRequest createManyAndReturn
   */
  export type MaintenanceRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * The data used to create many MaintenanceRequests.
     */
    data: MaintenanceRequestCreateManyInput | MaintenanceRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceRequest update
   */
  export type MaintenanceRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a MaintenanceRequest.
     */
    data: XOR<MaintenanceRequestUpdateInput, MaintenanceRequestUncheckedUpdateInput>
    /**
     * Choose, which MaintenanceRequest to update.
     */
    where: MaintenanceRequestWhereUniqueInput
  }

  /**
   * MaintenanceRequest updateMany
   */
  export type MaintenanceRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaintenanceRequests.
     */
    data: XOR<MaintenanceRequestUpdateManyMutationInput, MaintenanceRequestUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceRequests to update
     */
    where?: MaintenanceRequestWhereInput
    /**
     * Limit how many MaintenanceRequests to update.
     */
    limit?: number
  }

  /**
   * MaintenanceRequest updateManyAndReturn
   */
  export type MaintenanceRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * The data used to update MaintenanceRequests.
     */
    data: XOR<MaintenanceRequestUpdateManyMutationInput, MaintenanceRequestUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceRequests to update
     */
    where?: MaintenanceRequestWhereInput
    /**
     * Limit how many MaintenanceRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceRequest upsert
   */
  export type MaintenanceRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the MaintenanceRequest to update in case it exists.
     */
    where: MaintenanceRequestWhereUniqueInput
    /**
     * In case the MaintenanceRequest found by the `where` argument doesn't exist, create a new MaintenanceRequest with this data.
     */
    create: XOR<MaintenanceRequestCreateInput, MaintenanceRequestUncheckedCreateInput>
    /**
     * In case the MaintenanceRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaintenanceRequestUpdateInput, MaintenanceRequestUncheckedUpdateInput>
  }

  /**
   * MaintenanceRequest delete
   */
  export type MaintenanceRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    /**
     * Filter which MaintenanceRequest to delete.
     */
    where: MaintenanceRequestWhereUniqueInput
  }

  /**
   * MaintenanceRequest deleteMany
   */
  export type MaintenanceRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceRequests to delete
     */
    where?: MaintenanceRequestWhereInput
    /**
     * Limit how many MaintenanceRequests to delete.
     */
    limit?: number
  }

  /**
   * MaintenanceRequest.owner
   */
  export type MaintenanceRequest$ownerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * MaintenanceRequest.tenant
   */
  export type MaintenanceRequest$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * MaintenanceRequest.vendor
   */
  export type MaintenanceRequest$vendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
  }

  /**
   * MaintenanceRequest.reporter
   */
  export type MaintenanceRequest$reporterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * MaintenanceRequest.unit
   */
  export type MaintenanceRequest$unitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
  }

  /**
   * MaintenanceRequest.expenses
   */
  export type MaintenanceRequest$expensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    where?: ExpenseWhereInput
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    cursor?: ExpenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * MaintenanceRequest.linkedAsA
   */
  export type MaintenanceRequest$linkedAsAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
    where?: LinkedRequestWhereInput
    orderBy?: LinkedRequestOrderByWithRelationInput | LinkedRequestOrderByWithRelationInput[]
    cursor?: LinkedRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LinkedRequestScalarFieldEnum | LinkedRequestScalarFieldEnum[]
  }

  /**
   * MaintenanceRequest.linkedAsB
   */
  export type MaintenanceRequest$linkedAsBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
    where?: LinkedRequestWhereInput
    orderBy?: LinkedRequestOrderByWithRelationInput | LinkedRequestOrderByWithRelationInput[]
    cursor?: LinkedRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LinkedRequestScalarFieldEnum | LinkedRequestScalarFieldEnum[]
  }

  /**
   * MaintenanceRequest without action
   */
  export type MaintenanceRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
  }


  /**
   * Model Expense
   */

  export type AggregateExpense = {
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  export type ExpenseAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    unitId: number | null
    leaseId: number | null
    maintenanceRequestId: number | null
  }

  export type ExpenseSumAggregateOutputType = {
    id: number | null
    amount: number | null
    unitId: number | null
    leaseId: number | null
    maintenanceRequestId: number | null
  }

  export type ExpenseMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    description: string | null
    amount: number | null
    currency: $Enums.CurrencyCode | null
    date: Date | null
    category: string | null
    status: string | null
    notes: string | null
    unitId: number | null
    leaseId: number | null
    maintenanceRequestId: number | null
  }

  export type ExpenseMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    description: string | null
    amount: number | null
    currency: $Enums.CurrencyCode | null
    date: Date | null
    category: string | null
    status: string | null
    notes: string | null
    unitId: number | null
    leaseId: number | null
    maintenanceRequestId: number | null
  }

  export type ExpenseCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    title: number
    description: number
    amount: number
    currency: number
    date: number
    category: number
    status: number
    notes: number
    unitId: number
    leaseId: number
    maintenanceRequestId: number
    _all: number
  }


  export type ExpenseAvgAggregateInputType = {
    id?: true
    amount?: true
    unitId?: true
    leaseId?: true
    maintenanceRequestId?: true
  }

  export type ExpenseSumAggregateInputType = {
    id?: true
    amount?: true
    unitId?: true
    leaseId?: true
    maintenanceRequestId?: true
  }

  export type ExpenseMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    amount?: true
    currency?: true
    date?: true
    category?: true
    status?: true
    notes?: true
    unitId?: true
    leaseId?: true
    maintenanceRequestId?: true
  }

  export type ExpenseMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    amount?: true
    currency?: true
    date?: true
    category?: true
    status?: true
    notes?: true
    unitId?: true
    leaseId?: true
    maintenanceRequestId?: true
  }

  export type ExpenseCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    description?: true
    amount?: true
    currency?: true
    date?: true
    category?: true
    status?: true
    notes?: true
    unitId?: true
    leaseId?: true
    maintenanceRequestId?: true
    _all?: true
  }

  export type ExpenseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expense to aggregate.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Expenses
    **/
    _count?: true | ExpenseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExpenseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExpenseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpenseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpenseMaxAggregateInputType
  }

  export type GetExpenseAggregateType<T extends ExpenseAggregateArgs> = {
        [P in keyof T & keyof AggregateExpense]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpense[P]>
      : GetScalarType<T[P], AggregateExpense[P]>
  }




  export type ExpenseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenseWhereInput
    orderBy?: ExpenseOrderByWithAggregationInput | ExpenseOrderByWithAggregationInput[]
    by: ExpenseScalarFieldEnum[] | ExpenseScalarFieldEnum
    having?: ExpenseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpenseCountAggregateInputType | true
    _avg?: ExpenseAvgAggregateInputType
    _sum?: ExpenseSumAggregateInputType
    _min?: ExpenseMinAggregateInputType
    _max?: ExpenseMaxAggregateInputType
  }

  export type ExpenseGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    title: string | null
    description: string | null
    amount: number | null
    currency: $Enums.CurrencyCode | null
    date: Date | null
    category: string | null
    status: string | null
    notes: string | null
    unitId: number | null
    leaseId: number | null
    maintenanceRequestId: number | null
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  type GetExpenseGroupByPayload<T extends ExpenseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpenseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpenseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
            : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
        }
      >
    >


  export type ExpenseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    description?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    category?: boolean
    status?: boolean
    notes?: boolean
    unitId?: boolean
    leaseId?: boolean
    maintenanceRequestId?: boolean
    unit?: boolean | Expense$unitArgs<ExtArgs>
    lease?: boolean | Expense$leaseArgs<ExtArgs>
    maintenanceRequest?: boolean | Expense$maintenanceRequestArgs<ExtArgs>
  }, ExtArgs["result"]["expense"]>

  export type ExpenseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    description?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    category?: boolean
    status?: boolean
    notes?: boolean
    unitId?: boolean
    leaseId?: boolean
    maintenanceRequestId?: boolean
    unit?: boolean | Expense$unitArgs<ExtArgs>
    lease?: boolean | Expense$leaseArgs<ExtArgs>
    maintenanceRequest?: boolean | Expense$maintenanceRequestArgs<ExtArgs>
  }, ExtArgs["result"]["expense"]>

  export type ExpenseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    description?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    category?: boolean
    status?: boolean
    notes?: boolean
    unitId?: boolean
    leaseId?: boolean
    maintenanceRequestId?: boolean
    unit?: boolean | Expense$unitArgs<ExtArgs>
    lease?: boolean | Expense$leaseArgs<ExtArgs>
    maintenanceRequest?: boolean | Expense$maintenanceRequestArgs<ExtArgs>
  }, ExtArgs["result"]["expense"]>

  export type ExpenseSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    description?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    category?: boolean
    status?: boolean
    notes?: boolean
    unitId?: boolean
    leaseId?: boolean
    maintenanceRequestId?: boolean
  }

  export type ExpenseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "title" | "description" | "amount" | "currency" | "date" | "category" | "status" | "notes" | "unitId" | "leaseId" | "maintenanceRequestId", ExtArgs["result"]["expense"]>
  export type ExpenseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    unit?: boolean | Expense$unitArgs<ExtArgs>
    lease?: boolean | Expense$leaseArgs<ExtArgs>
    maintenanceRequest?: boolean | Expense$maintenanceRequestArgs<ExtArgs>
  }
  export type ExpenseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    unit?: boolean | Expense$unitArgs<ExtArgs>
    lease?: boolean | Expense$leaseArgs<ExtArgs>
    maintenanceRequest?: boolean | Expense$maintenanceRequestArgs<ExtArgs>
  }
  export type ExpenseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    unit?: boolean | Expense$unitArgs<ExtArgs>
    lease?: boolean | Expense$leaseArgs<ExtArgs>
    maintenanceRequest?: boolean | Expense$maintenanceRequestArgs<ExtArgs>
  }

  export type $ExpensePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Expense"
    objects: {
      unit: Prisma.$UnitPayload<ExtArgs> | null
      lease: Prisma.$LeasePayload<ExtArgs> | null
      maintenanceRequest: Prisma.$MaintenanceRequestPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      title: string | null
      description: string | null
      amount: number | null
      currency: $Enums.CurrencyCode | null
      date: Date | null
      category: string | null
      status: string | null
      notes: string | null
      unitId: number | null
      leaseId: number | null
      maintenanceRequestId: number | null
    }, ExtArgs["result"]["expense"]>
    composites: {}
  }

  type ExpenseGetPayload<S extends boolean | null | undefined | ExpenseDefaultArgs> = $Result.GetResult<Prisma.$ExpensePayload, S>

  type ExpenseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExpenseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExpenseCountAggregateInputType | true
    }

  export interface ExpenseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Expense'], meta: { name: 'Expense' } }
    /**
     * Find zero or one Expense that matches the filter.
     * @param {ExpenseFindUniqueArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExpenseFindUniqueArgs>(args: SelectSubset<T, ExpenseFindUniqueArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Expense that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExpenseFindUniqueOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExpenseFindUniqueOrThrowArgs>(args: SelectSubset<T, ExpenseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expense that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindFirstArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExpenseFindFirstArgs>(args?: SelectSubset<T, ExpenseFindFirstArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expense that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindFirstOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExpenseFindFirstOrThrowArgs>(args?: SelectSubset<T, ExpenseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Expenses
     * const expenses = await prisma.expense.findMany()
     * 
     * // Get first 10 Expenses
     * const expenses = await prisma.expense.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expenseWithIdOnly = await prisma.expense.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExpenseFindManyArgs>(args?: SelectSubset<T, ExpenseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Expense.
     * @param {ExpenseCreateArgs} args - Arguments to create a Expense.
     * @example
     * // Create one Expense
     * const Expense = await prisma.expense.create({
     *   data: {
     *     // ... data to create a Expense
     *   }
     * })
     * 
     */
    create<T extends ExpenseCreateArgs>(args: SelectSubset<T, ExpenseCreateArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Expenses.
     * @param {ExpenseCreateManyArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expense = await prisma.expense.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExpenseCreateManyArgs>(args?: SelectSubset<T, ExpenseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Expenses and returns the data saved in the database.
     * @param {ExpenseCreateManyAndReturnArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expense = await prisma.expense.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Expenses and only return the `id`
     * const expenseWithIdOnly = await prisma.expense.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExpenseCreateManyAndReturnArgs>(args?: SelectSubset<T, ExpenseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Expense.
     * @param {ExpenseDeleteArgs} args - Arguments to delete one Expense.
     * @example
     * // Delete one Expense
     * const Expense = await prisma.expense.delete({
     *   where: {
     *     // ... filter to delete one Expense
     *   }
     * })
     * 
     */
    delete<T extends ExpenseDeleteArgs>(args: SelectSubset<T, ExpenseDeleteArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Expense.
     * @param {ExpenseUpdateArgs} args - Arguments to update one Expense.
     * @example
     * // Update one Expense
     * const expense = await prisma.expense.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExpenseUpdateArgs>(args: SelectSubset<T, ExpenseUpdateArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Expenses.
     * @param {ExpenseDeleteManyArgs} args - Arguments to filter Expenses to delete.
     * @example
     * // Delete a few Expenses
     * const { count } = await prisma.expense.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExpenseDeleteManyArgs>(args?: SelectSubset<T, ExpenseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Expenses
     * const expense = await prisma.expense.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExpenseUpdateManyArgs>(args: SelectSubset<T, ExpenseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses and returns the data updated in the database.
     * @param {ExpenseUpdateManyAndReturnArgs} args - Arguments to update many Expenses.
     * @example
     * // Update many Expenses
     * const expense = await prisma.expense.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Expenses and only return the `id`
     * const expenseWithIdOnly = await prisma.expense.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExpenseUpdateManyAndReturnArgs>(args: SelectSubset<T, ExpenseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Expense.
     * @param {ExpenseUpsertArgs} args - Arguments to update or create a Expense.
     * @example
     * // Update or create a Expense
     * const expense = await prisma.expense.upsert({
     *   create: {
     *     // ... data to create a Expense
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Expense we want to update
     *   }
     * })
     */
    upsert<T extends ExpenseUpsertArgs>(args: SelectSubset<T, ExpenseUpsertArgs<ExtArgs>>): Prisma__ExpenseClient<$Result.GetResult<Prisma.$ExpensePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseCountArgs} args - Arguments to filter Expenses to count.
     * @example
     * // Count the number of Expenses
     * const count = await prisma.expense.count({
     *   where: {
     *     // ... the filter for the Expenses we want to count
     *   }
     * })
    **/
    count<T extends ExpenseCountArgs>(
      args?: Subset<T, ExpenseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpenseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpenseAggregateArgs>(args: Subset<T, ExpenseAggregateArgs>): Prisma.PrismaPromise<GetExpenseAggregateType<T>>

    /**
     * Group by Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExpenseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExpenseGroupByArgs['orderBy'] }
        : { orderBy?: ExpenseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExpenseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Expense model
   */
  readonly fields: ExpenseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Expense.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExpenseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    unit<T extends Expense$unitArgs<ExtArgs> = {}>(args?: Subset<T, Expense$unitArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    lease<T extends Expense$leaseArgs<ExtArgs> = {}>(args?: Subset<T, Expense$leaseArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    maintenanceRequest<T extends Expense$maintenanceRequestArgs<ExtArgs> = {}>(args?: Subset<T, Expense$maintenanceRequestArgs<ExtArgs>>): Prisma__MaintenanceRequestClient<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Expense model
   */
  interface ExpenseFieldRefs {
    readonly id: FieldRef<"Expense", 'Int'>
    readonly createdAt: FieldRef<"Expense", 'DateTime'>
    readonly updatedAt: FieldRef<"Expense", 'DateTime'>
    readonly title: FieldRef<"Expense", 'String'>
    readonly description: FieldRef<"Expense", 'String'>
    readonly amount: FieldRef<"Expense", 'Float'>
    readonly currency: FieldRef<"Expense", 'CurrencyCode'>
    readonly date: FieldRef<"Expense", 'DateTime'>
    readonly category: FieldRef<"Expense", 'String'>
    readonly status: FieldRef<"Expense", 'String'>
    readonly notes: FieldRef<"Expense", 'String'>
    readonly unitId: FieldRef<"Expense", 'Int'>
    readonly leaseId: FieldRef<"Expense", 'Int'>
    readonly maintenanceRequestId: FieldRef<"Expense", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Expense findUnique
   */
  export type ExpenseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense findUniqueOrThrow
   */
  export type ExpenseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense findFirst
   */
  export type ExpenseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expenses.
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expenses.
     */
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Expense findFirstOrThrow
   */
  export type ExpenseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expense to fetch.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expenses.
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expenses.
     */
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Expense findMany
   */
  export type ExpenseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpenseOrderByWithRelationInput | ExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Expenses.
     */
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Expense create
   */
  export type ExpenseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * The data needed to create a Expense.
     */
    data?: XOR<ExpenseCreateInput, ExpenseUncheckedCreateInput>
  }

  /**
   * Expense createMany
   */
  export type ExpenseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Expenses.
     */
    data: ExpenseCreateManyInput | ExpenseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Expense createManyAndReturn
   */
  export type ExpenseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * The data used to create many Expenses.
     */
    data: ExpenseCreateManyInput | ExpenseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Expense update
   */
  export type ExpenseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * The data needed to update a Expense.
     */
    data: XOR<ExpenseUpdateInput, ExpenseUncheckedUpdateInput>
    /**
     * Choose, which Expense to update.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense updateMany
   */
  export type ExpenseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Expenses.
     */
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyInput>
    /**
     * Filter which Expenses to update
     */
    where?: ExpenseWhereInput
    /**
     * Limit how many Expenses to update.
     */
    limit?: number
  }

  /**
   * Expense updateManyAndReturn
   */
  export type ExpenseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * The data used to update Expenses.
     */
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyInput>
    /**
     * Filter which Expenses to update
     */
    where?: ExpenseWhereInput
    /**
     * Limit how many Expenses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Expense upsert
   */
  export type ExpenseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * The filter to search for the Expense to update in case it exists.
     */
    where: ExpenseWhereUniqueInput
    /**
     * In case the Expense found by the `where` argument doesn't exist, create a new Expense with this data.
     */
    create: XOR<ExpenseCreateInput, ExpenseUncheckedCreateInput>
    /**
     * In case the Expense was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExpenseUpdateInput, ExpenseUncheckedUpdateInput>
  }

  /**
   * Expense delete
   */
  export type ExpenseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
    /**
     * Filter which Expense to delete.
     */
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense deleteMany
   */
  export type ExpenseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expenses to delete
     */
    where?: ExpenseWhereInput
    /**
     * Limit how many Expenses to delete.
     */
    limit?: number
  }

  /**
   * Expense.unit
   */
  export type Expense$unitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
  }

  /**
   * Expense.lease
   */
  export type Expense$leaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    where?: LeaseWhereInput
  }

  /**
   * Expense.maintenanceRequest
   */
  export type Expense$maintenanceRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    where?: MaintenanceRequestWhereInput
  }

  /**
   * Expense without action
   */
  export type ExpenseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expense
     */
    select?: ExpenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expense
     */
    omit?: ExpenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenseInclude<ExtArgs> | null
  }


  /**
   * Model RentPayment
   */

  export type AggregateRentPayment = {
    _count: RentPaymentCountAggregateOutputType | null
    _avg: RentPaymentAvgAggregateOutputType | null
    _sum: RentPaymentSumAggregateOutputType | null
    _min: RentPaymentMinAggregateOutputType | null
    _max: RentPaymentMaxAggregateOutputType | null
  }

  export type RentPaymentAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    submittedBy: number | null
    leaseId: number | null
    tenantId: number | null
  }

  export type RentPaymentSumAggregateOutputType = {
    id: number | null
    amount: number | null
    submittedBy: number | null
    leaseId: number | null
    tenantId: number | null
  }

  export type RentPaymentMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    amount: number | null
    currency: $Enums.CurrencyCode | null
    date: Date | null
    status: $Enums.PaymentStatus | null
    notes: string | null
    paymentMethod: string | null
    submittedBy: number | null
    submissionDate: Date | null
    approvalDate: Date | null
    leaseId: number | null
    tenantId: number | null
  }

  export type RentPaymentMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    amount: number | null
    currency: $Enums.CurrencyCode | null
    date: Date | null
    status: $Enums.PaymentStatus | null
    notes: string | null
    paymentMethod: string | null
    submittedBy: number | null
    submissionDate: Date | null
    approvalDate: Date | null
    leaseId: number | null
    tenantId: number | null
  }

  export type RentPaymentCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    amount: number
    currency: number
    date: number
    status: number
    notes: number
    paymentMethod: number
    submittedBy: number
    submissionDate: number
    approvalDate: number
    leaseId: number
    tenantId: number
    _all: number
  }


  export type RentPaymentAvgAggregateInputType = {
    id?: true
    amount?: true
    submittedBy?: true
    leaseId?: true
    tenantId?: true
  }

  export type RentPaymentSumAggregateInputType = {
    id?: true
    amount?: true
    submittedBy?: true
    leaseId?: true
    tenantId?: true
  }

  export type RentPaymentMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    amount?: true
    currency?: true
    date?: true
    status?: true
    notes?: true
    paymentMethod?: true
    submittedBy?: true
    submissionDate?: true
    approvalDate?: true
    leaseId?: true
    tenantId?: true
  }

  export type RentPaymentMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    amount?: true
    currency?: true
    date?: true
    status?: true
    notes?: true
    paymentMethod?: true
    submittedBy?: true
    submissionDate?: true
    approvalDate?: true
    leaseId?: true
    tenantId?: true
  }

  export type RentPaymentCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    amount?: true
    currency?: true
    date?: true
    status?: true
    notes?: true
    paymentMethod?: true
    submittedBy?: true
    submissionDate?: true
    approvalDate?: true
    leaseId?: true
    tenantId?: true
    _all?: true
  }

  export type RentPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RentPayment to aggregate.
     */
    where?: RentPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentPayments to fetch.
     */
    orderBy?: RentPaymentOrderByWithRelationInput | RentPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RentPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RentPayments
    **/
    _count?: true | RentPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RentPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RentPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RentPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RentPaymentMaxAggregateInputType
  }

  export type GetRentPaymentAggregateType<T extends RentPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateRentPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRentPayment[P]>
      : GetScalarType<T[P], AggregateRentPayment[P]>
  }




  export type RentPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentPaymentWhereInput
    orderBy?: RentPaymentOrderByWithAggregationInput | RentPaymentOrderByWithAggregationInput[]
    by: RentPaymentScalarFieldEnum[] | RentPaymentScalarFieldEnum
    having?: RentPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RentPaymentCountAggregateInputType | true
    _avg?: RentPaymentAvgAggregateInputType
    _sum?: RentPaymentSumAggregateInputType
    _min?: RentPaymentMinAggregateInputType
    _max?: RentPaymentMaxAggregateInputType
  }

  export type RentPaymentGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    amount: number | null
    currency: $Enums.CurrencyCode | null
    date: Date | null
    status: $Enums.PaymentStatus | null
    notes: string | null
    paymentMethod: string | null
    submittedBy: number
    submissionDate: Date | null
    approvalDate: Date | null
    leaseId: number | null
    tenantId: number | null
    _count: RentPaymentCountAggregateOutputType | null
    _avg: RentPaymentAvgAggregateOutputType | null
    _sum: RentPaymentSumAggregateOutputType | null
    _min: RentPaymentMinAggregateOutputType | null
    _max: RentPaymentMaxAggregateOutputType | null
  }

  type GetRentPaymentGroupByPayload<T extends RentPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RentPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RentPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RentPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], RentPaymentGroupByOutputType[P]>
        }
      >
    >


  export type RentPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    status?: boolean
    notes?: boolean
    paymentMethod?: boolean
    submittedBy?: boolean
    submissionDate?: boolean
    approvalDate?: boolean
    leaseId?: boolean
    tenantId?: boolean
    lease?: boolean | RentPayment$leaseArgs<ExtArgs>
    tenant?: boolean | RentPayment$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["rentPayment"]>

  export type RentPaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    status?: boolean
    notes?: boolean
    paymentMethod?: boolean
    submittedBy?: boolean
    submissionDate?: boolean
    approvalDate?: boolean
    leaseId?: boolean
    tenantId?: boolean
    lease?: boolean | RentPayment$leaseArgs<ExtArgs>
    tenant?: boolean | RentPayment$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["rentPayment"]>

  export type RentPaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    status?: boolean
    notes?: boolean
    paymentMethod?: boolean
    submittedBy?: boolean
    submissionDate?: boolean
    approvalDate?: boolean
    leaseId?: boolean
    tenantId?: boolean
    lease?: boolean | RentPayment$leaseArgs<ExtArgs>
    tenant?: boolean | RentPayment$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["rentPayment"]>

  export type RentPaymentSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    amount?: boolean
    currency?: boolean
    date?: boolean
    status?: boolean
    notes?: boolean
    paymentMethod?: boolean
    submittedBy?: boolean
    submissionDate?: boolean
    approvalDate?: boolean
    leaseId?: boolean
    tenantId?: boolean
  }

  export type RentPaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "amount" | "currency" | "date" | "status" | "notes" | "paymentMethod" | "submittedBy" | "submissionDate" | "approvalDate" | "leaseId" | "tenantId", ExtArgs["result"]["rentPayment"]>
  export type RentPaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lease?: boolean | RentPayment$leaseArgs<ExtArgs>
    tenant?: boolean | RentPayment$tenantArgs<ExtArgs>
  }
  export type RentPaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lease?: boolean | RentPayment$leaseArgs<ExtArgs>
    tenant?: boolean | RentPayment$tenantArgs<ExtArgs>
  }
  export type RentPaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lease?: boolean | RentPayment$leaseArgs<ExtArgs>
    tenant?: boolean | RentPayment$tenantArgs<ExtArgs>
  }

  export type $RentPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RentPayment"
    objects: {
      lease: Prisma.$LeasePayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      amount: number | null
      currency: $Enums.CurrencyCode | null
      date: Date | null
      status: $Enums.PaymentStatus | null
      notes: string | null
      paymentMethod: string | null
      submittedBy: number
      submissionDate: Date | null
      approvalDate: Date | null
      leaseId: number | null
      tenantId: number | null
    }, ExtArgs["result"]["rentPayment"]>
    composites: {}
  }

  type RentPaymentGetPayload<S extends boolean | null | undefined | RentPaymentDefaultArgs> = $Result.GetResult<Prisma.$RentPaymentPayload, S>

  type RentPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RentPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RentPaymentCountAggregateInputType | true
    }

  export interface RentPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RentPayment'], meta: { name: 'RentPayment' } }
    /**
     * Find zero or one RentPayment that matches the filter.
     * @param {RentPaymentFindUniqueArgs} args - Arguments to find a RentPayment
     * @example
     * // Get one RentPayment
     * const rentPayment = await prisma.rentPayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RentPaymentFindUniqueArgs>(args: SelectSubset<T, RentPaymentFindUniqueArgs<ExtArgs>>): Prisma__RentPaymentClient<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RentPayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RentPaymentFindUniqueOrThrowArgs} args - Arguments to find a RentPayment
     * @example
     * // Get one RentPayment
     * const rentPayment = await prisma.rentPayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RentPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, RentPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RentPaymentClient<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RentPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentPaymentFindFirstArgs} args - Arguments to find a RentPayment
     * @example
     * // Get one RentPayment
     * const rentPayment = await prisma.rentPayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RentPaymentFindFirstArgs>(args?: SelectSubset<T, RentPaymentFindFirstArgs<ExtArgs>>): Prisma__RentPaymentClient<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RentPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentPaymentFindFirstOrThrowArgs} args - Arguments to find a RentPayment
     * @example
     * // Get one RentPayment
     * const rentPayment = await prisma.rentPayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RentPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, RentPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__RentPaymentClient<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RentPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RentPayments
     * const rentPayments = await prisma.rentPayment.findMany()
     * 
     * // Get first 10 RentPayments
     * const rentPayments = await prisma.rentPayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rentPaymentWithIdOnly = await prisma.rentPayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RentPaymentFindManyArgs>(args?: SelectSubset<T, RentPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RentPayment.
     * @param {RentPaymentCreateArgs} args - Arguments to create a RentPayment.
     * @example
     * // Create one RentPayment
     * const RentPayment = await prisma.rentPayment.create({
     *   data: {
     *     // ... data to create a RentPayment
     *   }
     * })
     * 
     */
    create<T extends RentPaymentCreateArgs>(args: SelectSubset<T, RentPaymentCreateArgs<ExtArgs>>): Prisma__RentPaymentClient<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RentPayments.
     * @param {RentPaymentCreateManyArgs} args - Arguments to create many RentPayments.
     * @example
     * // Create many RentPayments
     * const rentPayment = await prisma.rentPayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RentPaymentCreateManyArgs>(args?: SelectSubset<T, RentPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RentPayments and returns the data saved in the database.
     * @param {RentPaymentCreateManyAndReturnArgs} args - Arguments to create many RentPayments.
     * @example
     * // Create many RentPayments
     * const rentPayment = await prisma.rentPayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RentPayments and only return the `id`
     * const rentPaymentWithIdOnly = await prisma.rentPayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RentPaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, RentPaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RentPayment.
     * @param {RentPaymentDeleteArgs} args - Arguments to delete one RentPayment.
     * @example
     * // Delete one RentPayment
     * const RentPayment = await prisma.rentPayment.delete({
     *   where: {
     *     // ... filter to delete one RentPayment
     *   }
     * })
     * 
     */
    delete<T extends RentPaymentDeleteArgs>(args: SelectSubset<T, RentPaymentDeleteArgs<ExtArgs>>): Prisma__RentPaymentClient<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RentPayment.
     * @param {RentPaymentUpdateArgs} args - Arguments to update one RentPayment.
     * @example
     * // Update one RentPayment
     * const rentPayment = await prisma.rentPayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RentPaymentUpdateArgs>(args: SelectSubset<T, RentPaymentUpdateArgs<ExtArgs>>): Prisma__RentPaymentClient<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RentPayments.
     * @param {RentPaymentDeleteManyArgs} args - Arguments to filter RentPayments to delete.
     * @example
     * // Delete a few RentPayments
     * const { count } = await prisma.rentPayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RentPaymentDeleteManyArgs>(args?: SelectSubset<T, RentPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RentPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RentPayments
     * const rentPayment = await prisma.rentPayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RentPaymentUpdateManyArgs>(args: SelectSubset<T, RentPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RentPayments and returns the data updated in the database.
     * @param {RentPaymentUpdateManyAndReturnArgs} args - Arguments to update many RentPayments.
     * @example
     * // Update many RentPayments
     * const rentPayment = await prisma.rentPayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RentPayments and only return the `id`
     * const rentPaymentWithIdOnly = await prisma.rentPayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RentPaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, RentPaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RentPayment.
     * @param {RentPaymentUpsertArgs} args - Arguments to update or create a RentPayment.
     * @example
     * // Update or create a RentPayment
     * const rentPayment = await prisma.rentPayment.upsert({
     *   create: {
     *     // ... data to create a RentPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RentPayment we want to update
     *   }
     * })
     */
    upsert<T extends RentPaymentUpsertArgs>(args: SelectSubset<T, RentPaymentUpsertArgs<ExtArgs>>): Prisma__RentPaymentClient<$Result.GetResult<Prisma.$RentPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RentPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentPaymentCountArgs} args - Arguments to filter RentPayments to count.
     * @example
     * // Count the number of RentPayments
     * const count = await prisma.rentPayment.count({
     *   where: {
     *     // ... the filter for the RentPayments we want to count
     *   }
     * })
    **/
    count<T extends RentPaymentCountArgs>(
      args?: Subset<T, RentPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RentPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RentPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RentPaymentAggregateArgs>(args: Subset<T, RentPaymentAggregateArgs>): Prisma.PrismaPromise<GetRentPaymentAggregateType<T>>

    /**
     * Group by RentPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RentPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RentPaymentGroupByArgs['orderBy'] }
        : { orderBy?: RentPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RentPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRentPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RentPayment model
   */
  readonly fields: RentPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RentPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RentPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lease<T extends RentPayment$leaseArgs<ExtArgs> = {}>(args?: Subset<T, RentPayment$leaseArgs<ExtArgs>>): Prisma__LeaseClient<$Result.GetResult<Prisma.$LeasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tenant<T extends RentPayment$tenantArgs<ExtArgs> = {}>(args?: Subset<T, RentPayment$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RentPayment model
   */
  interface RentPaymentFieldRefs {
    readonly id: FieldRef<"RentPayment", 'Int'>
    readonly createdAt: FieldRef<"RentPayment", 'DateTime'>
    readonly updatedAt: FieldRef<"RentPayment", 'DateTime'>
    readonly amount: FieldRef<"RentPayment", 'Float'>
    readonly currency: FieldRef<"RentPayment", 'CurrencyCode'>
    readonly date: FieldRef<"RentPayment", 'DateTime'>
    readonly status: FieldRef<"RentPayment", 'PaymentStatus'>
    readonly notes: FieldRef<"RentPayment", 'String'>
    readonly paymentMethod: FieldRef<"RentPayment", 'String'>
    readonly submittedBy: FieldRef<"RentPayment", 'Int'>
    readonly submissionDate: FieldRef<"RentPayment", 'DateTime'>
    readonly approvalDate: FieldRef<"RentPayment", 'DateTime'>
    readonly leaseId: FieldRef<"RentPayment", 'Int'>
    readonly tenantId: FieldRef<"RentPayment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RentPayment findUnique
   */
  export type RentPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
    /**
     * Filter, which RentPayment to fetch.
     */
    where: RentPaymentWhereUniqueInput
  }

  /**
   * RentPayment findUniqueOrThrow
   */
  export type RentPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
    /**
     * Filter, which RentPayment to fetch.
     */
    where: RentPaymentWhereUniqueInput
  }

  /**
   * RentPayment findFirst
   */
  export type RentPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
    /**
     * Filter, which RentPayment to fetch.
     */
    where?: RentPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentPayments to fetch.
     */
    orderBy?: RentPaymentOrderByWithRelationInput | RentPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RentPayments.
     */
    cursor?: RentPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RentPayments.
     */
    distinct?: RentPaymentScalarFieldEnum | RentPaymentScalarFieldEnum[]
  }

  /**
   * RentPayment findFirstOrThrow
   */
  export type RentPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
    /**
     * Filter, which RentPayment to fetch.
     */
    where?: RentPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentPayments to fetch.
     */
    orderBy?: RentPaymentOrderByWithRelationInput | RentPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RentPayments.
     */
    cursor?: RentPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RentPayments.
     */
    distinct?: RentPaymentScalarFieldEnum | RentPaymentScalarFieldEnum[]
  }

  /**
   * RentPayment findMany
   */
  export type RentPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
    /**
     * Filter, which RentPayments to fetch.
     */
    where?: RentPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RentPayments to fetch.
     */
    orderBy?: RentPaymentOrderByWithRelationInput | RentPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RentPayments.
     */
    cursor?: RentPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RentPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RentPayments.
     */
    skip?: number
    distinct?: RentPaymentScalarFieldEnum | RentPaymentScalarFieldEnum[]
  }

  /**
   * RentPayment create
   */
  export type RentPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a RentPayment.
     */
    data: XOR<RentPaymentCreateInput, RentPaymentUncheckedCreateInput>
  }

  /**
   * RentPayment createMany
   */
  export type RentPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RentPayments.
     */
    data: RentPaymentCreateManyInput | RentPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RentPayment createManyAndReturn
   */
  export type RentPaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * The data used to create many RentPayments.
     */
    data: RentPaymentCreateManyInput | RentPaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RentPayment update
   */
  export type RentPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a RentPayment.
     */
    data: XOR<RentPaymentUpdateInput, RentPaymentUncheckedUpdateInput>
    /**
     * Choose, which RentPayment to update.
     */
    where: RentPaymentWhereUniqueInput
  }

  /**
   * RentPayment updateMany
   */
  export type RentPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RentPayments.
     */
    data: XOR<RentPaymentUpdateManyMutationInput, RentPaymentUncheckedUpdateManyInput>
    /**
     * Filter which RentPayments to update
     */
    where?: RentPaymentWhereInput
    /**
     * Limit how many RentPayments to update.
     */
    limit?: number
  }

  /**
   * RentPayment updateManyAndReturn
   */
  export type RentPaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * The data used to update RentPayments.
     */
    data: XOR<RentPaymentUpdateManyMutationInput, RentPaymentUncheckedUpdateManyInput>
    /**
     * Filter which RentPayments to update
     */
    where?: RentPaymentWhereInput
    /**
     * Limit how many RentPayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RentPayment upsert
   */
  export type RentPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the RentPayment to update in case it exists.
     */
    where: RentPaymentWhereUniqueInput
    /**
     * In case the RentPayment found by the `where` argument doesn't exist, create a new RentPayment with this data.
     */
    create: XOR<RentPaymentCreateInput, RentPaymentUncheckedCreateInput>
    /**
     * In case the RentPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RentPaymentUpdateInput, RentPaymentUncheckedUpdateInput>
  }

  /**
   * RentPayment delete
   */
  export type RentPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
    /**
     * Filter which RentPayment to delete.
     */
    where: RentPaymentWhereUniqueInput
  }

  /**
   * RentPayment deleteMany
   */
  export type RentPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RentPayments to delete
     */
    where?: RentPaymentWhereInput
    /**
     * Limit how many RentPayments to delete.
     */
    limit?: number
  }

  /**
   * RentPayment.lease
   */
  export type RentPayment$leaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lease
     */
    select?: LeaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lease
     */
    omit?: LeaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaseInclude<ExtArgs> | null
    where?: LeaseWhereInput
  }

  /**
   * RentPayment.tenant
   */
  export type RentPayment$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tenant
     */
    omit?: TenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * RentPayment without action
   */
  export type RentPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentPayment
     */
    select?: RentPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RentPayment
     */
    omit?: RentPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentPaymentInclude<ExtArgs> | null
  }


  /**
   * Model ContactRequest
   */

  export type AggregateContactRequest = {
    _count: ContactRequestCountAggregateOutputType | null
    _avg: ContactRequestAvgAggregateOutputType | null
    _sum: ContactRequestSumAggregateOutputType | null
    _min: ContactRequestMinAggregateOutputType | null
    _max: ContactRequestMaxAggregateOutputType | null
  }

  export type ContactRequestAvgAggregateOutputType = {
    id: number | null
    numberOfUnits: number | null
  }

  export type ContactRequestSumAggregateOutputType = {
    id: number | null
    numberOfUnits: number | null
  }

  export type ContactRequestMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    communityName: string | null
    communityLocation: string | null
    communityDescription: string | null
    referralSource: string | null
    numberOfUnits: number | null
    propertyType: string | null
  }

  export type ContactRequestMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    communityName: string | null
    communityLocation: string | null
    communityDescription: string | null
    referralSource: string | null
    numberOfUnits: number | null
    propertyType: string | null
  }

  export type ContactRequestCountAggregateOutputType = {
    id: number
    createdAt: number
    firstName: number
    lastName: number
    phone: number
    email: number
    boardPositions: number
    communityName: number
    communityLocation: number
    communityDescription: number
    referralSource: number
    numberOfUnits: number
    propertyType: number
    _all: number
  }


  export type ContactRequestAvgAggregateInputType = {
    id?: true
    numberOfUnits?: true
  }

  export type ContactRequestSumAggregateInputType = {
    id?: true
    numberOfUnits?: true
  }

  export type ContactRequestMinAggregateInputType = {
    id?: true
    createdAt?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    communityName?: true
    communityLocation?: true
    communityDescription?: true
    referralSource?: true
    numberOfUnits?: true
    propertyType?: true
  }

  export type ContactRequestMaxAggregateInputType = {
    id?: true
    createdAt?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    communityName?: true
    communityLocation?: true
    communityDescription?: true
    referralSource?: true
    numberOfUnits?: true
    propertyType?: true
  }

  export type ContactRequestCountAggregateInputType = {
    id?: true
    createdAt?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    boardPositions?: true
    communityName?: true
    communityLocation?: true
    communityDescription?: true
    referralSource?: true
    numberOfUnits?: true
    propertyType?: true
    _all?: true
  }

  export type ContactRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactRequest to aggregate.
     */
    where?: ContactRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactRequests to fetch.
     */
    orderBy?: ContactRequestOrderByWithRelationInput | ContactRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactRequests
    **/
    _count?: true | ContactRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactRequestMaxAggregateInputType
  }

  export type GetContactRequestAggregateType<T extends ContactRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateContactRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactRequest[P]>
      : GetScalarType<T[P], AggregateContactRequest[P]>
  }




  export type ContactRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactRequestWhereInput
    orderBy?: ContactRequestOrderByWithAggregationInput | ContactRequestOrderByWithAggregationInput[]
    by: ContactRequestScalarFieldEnum[] | ContactRequestScalarFieldEnum
    having?: ContactRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactRequestCountAggregateInputType | true
    _avg?: ContactRequestAvgAggregateInputType
    _sum?: ContactRequestSumAggregateInputType
    _min?: ContactRequestMinAggregateInputType
    _max?: ContactRequestMaxAggregateInputType
  }

  export type ContactRequestGroupByOutputType = {
    id: number
    createdAt: Date
    firstName: string
    lastName: string
    phone: string
    email: string
    boardPositions: string[]
    communityName: string | null
    communityLocation: string | null
    communityDescription: string | null
    referralSource: string | null
    numberOfUnits: number | null
    propertyType: string
    _count: ContactRequestCountAggregateOutputType | null
    _avg: ContactRequestAvgAggregateOutputType | null
    _sum: ContactRequestSumAggregateOutputType | null
    _min: ContactRequestMinAggregateOutputType | null
    _max: ContactRequestMaxAggregateOutputType | null
  }

  type GetContactRequestGroupByPayload<T extends ContactRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactRequestGroupByOutputType[P]>
            : GetScalarType<T[P], ContactRequestGroupByOutputType[P]>
        }
      >
    >


  export type ContactRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    boardPositions?: boolean
    communityName?: boolean
    communityLocation?: boolean
    communityDescription?: boolean
    referralSource?: boolean
    numberOfUnits?: boolean
    propertyType?: boolean
  }, ExtArgs["result"]["contactRequest"]>

  export type ContactRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    boardPositions?: boolean
    communityName?: boolean
    communityLocation?: boolean
    communityDescription?: boolean
    referralSource?: boolean
    numberOfUnits?: boolean
    propertyType?: boolean
  }, ExtArgs["result"]["contactRequest"]>

  export type ContactRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    boardPositions?: boolean
    communityName?: boolean
    communityLocation?: boolean
    communityDescription?: boolean
    referralSource?: boolean
    numberOfUnits?: boolean
    propertyType?: boolean
  }, ExtArgs["result"]["contactRequest"]>

  export type ContactRequestSelectScalar = {
    id?: boolean
    createdAt?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    boardPositions?: boolean
    communityName?: boolean
    communityLocation?: boolean
    communityDescription?: boolean
    referralSource?: boolean
    numberOfUnits?: boolean
    propertyType?: boolean
  }

  export type ContactRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "firstName" | "lastName" | "phone" | "email" | "boardPositions" | "communityName" | "communityLocation" | "communityDescription" | "referralSource" | "numberOfUnits" | "propertyType", ExtArgs["result"]["contactRequest"]>

  export type $ContactRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactRequest"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      firstName: string
      lastName: string
      phone: string
      email: string
      boardPositions: string[]
      communityName: string | null
      communityLocation: string | null
      communityDescription: string | null
      referralSource: string | null
      numberOfUnits: number | null
      propertyType: string
    }, ExtArgs["result"]["contactRequest"]>
    composites: {}
  }

  type ContactRequestGetPayload<S extends boolean | null | undefined | ContactRequestDefaultArgs> = $Result.GetResult<Prisma.$ContactRequestPayload, S>

  type ContactRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactRequestCountAggregateInputType | true
    }

  export interface ContactRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactRequest'], meta: { name: 'ContactRequest' } }
    /**
     * Find zero or one ContactRequest that matches the filter.
     * @param {ContactRequestFindUniqueArgs} args - Arguments to find a ContactRequest
     * @example
     * // Get one ContactRequest
     * const contactRequest = await prisma.contactRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactRequestFindUniqueArgs>(args: SelectSubset<T, ContactRequestFindUniqueArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContactRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactRequestFindUniqueOrThrowArgs} args - Arguments to find a ContactRequest
     * @example
     * // Get one ContactRequest
     * const contactRequest = await prisma.contactRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestFindFirstArgs} args - Arguments to find a ContactRequest
     * @example
     * // Get one ContactRequest
     * const contactRequest = await prisma.contactRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactRequestFindFirstArgs>(args?: SelectSubset<T, ContactRequestFindFirstArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestFindFirstOrThrowArgs} args - Arguments to find a ContactRequest
     * @example
     * // Get one ContactRequest
     * const contactRequest = await prisma.contactRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContactRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactRequests
     * const contactRequests = await prisma.contactRequest.findMany()
     * 
     * // Get first 10 ContactRequests
     * const contactRequests = await prisma.contactRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactRequestWithIdOnly = await prisma.contactRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactRequestFindManyArgs>(args?: SelectSubset<T, ContactRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContactRequest.
     * @param {ContactRequestCreateArgs} args - Arguments to create a ContactRequest.
     * @example
     * // Create one ContactRequest
     * const ContactRequest = await prisma.contactRequest.create({
     *   data: {
     *     // ... data to create a ContactRequest
     *   }
     * })
     * 
     */
    create<T extends ContactRequestCreateArgs>(args: SelectSubset<T, ContactRequestCreateArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContactRequests.
     * @param {ContactRequestCreateManyArgs} args - Arguments to create many ContactRequests.
     * @example
     * // Create many ContactRequests
     * const contactRequest = await prisma.contactRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactRequestCreateManyArgs>(args?: SelectSubset<T, ContactRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactRequests and returns the data saved in the database.
     * @param {ContactRequestCreateManyAndReturnArgs} args - Arguments to create many ContactRequests.
     * @example
     * // Create many ContactRequests
     * const contactRequest = await prisma.contactRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactRequests and only return the `id`
     * const contactRequestWithIdOnly = await prisma.contactRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContactRequest.
     * @param {ContactRequestDeleteArgs} args - Arguments to delete one ContactRequest.
     * @example
     * // Delete one ContactRequest
     * const ContactRequest = await prisma.contactRequest.delete({
     *   where: {
     *     // ... filter to delete one ContactRequest
     *   }
     * })
     * 
     */
    delete<T extends ContactRequestDeleteArgs>(args: SelectSubset<T, ContactRequestDeleteArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContactRequest.
     * @param {ContactRequestUpdateArgs} args - Arguments to update one ContactRequest.
     * @example
     * // Update one ContactRequest
     * const contactRequest = await prisma.contactRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactRequestUpdateArgs>(args: SelectSubset<T, ContactRequestUpdateArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContactRequests.
     * @param {ContactRequestDeleteManyArgs} args - Arguments to filter ContactRequests to delete.
     * @example
     * // Delete a few ContactRequests
     * const { count } = await prisma.contactRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactRequestDeleteManyArgs>(args?: SelectSubset<T, ContactRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactRequests
     * const contactRequest = await prisma.contactRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactRequestUpdateManyArgs>(args: SelectSubset<T, ContactRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactRequests and returns the data updated in the database.
     * @param {ContactRequestUpdateManyAndReturnArgs} args - Arguments to update many ContactRequests.
     * @example
     * // Update many ContactRequests
     * const contactRequest = await prisma.contactRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContactRequests and only return the `id`
     * const contactRequestWithIdOnly = await prisma.contactRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContactRequest.
     * @param {ContactRequestUpsertArgs} args - Arguments to update or create a ContactRequest.
     * @example
     * // Update or create a ContactRequest
     * const contactRequest = await prisma.contactRequest.upsert({
     *   create: {
     *     // ... data to create a ContactRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactRequest we want to update
     *   }
     * })
     */
    upsert<T extends ContactRequestUpsertArgs>(args: SelectSubset<T, ContactRequestUpsertArgs<ExtArgs>>): Prisma__ContactRequestClient<$Result.GetResult<Prisma.$ContactRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContactRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestCountArgs} args - Arguments to filter ContactRequests to count.
     * @example
     * // Count the number of ContactRequests
     * const count = await prisma.contactRequest.count({
     *   where: {
     *     // ... the filter for the ContactRequests we want to count
     *   }
     * })
    **/
    count<T extends ContactRequestCountArgs>(
      args?: Subset<T, ContactRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactRequestAggregateArgs>(args: Subset<T, ContactRequestAggregateArgs>): Prisma.PrismaPromise<GetContactRequestAggregateType<T>>

    /**
     * Group by ContactRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactRequestGroupByArgs['orderBy'] }
        : { orderBy?: ContactRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactRequest model
   */
  readonly fields: ContactRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContactRequest model
   */
  interface ContactRequestFieldRefs {
    readonly id: FieldRef<"ContactRequest", 'Int'>
    readonly createdAt: FieldRef<"ContactRequest", 'DateTime'>
    readonly firstName: FieldRef<"ContactRequest", 'String'>
    readonly lastName: FieldRef<"ContactRequest", 'String'>
    readonly phone: FieldRef<"ContactRequest", 'String'>
    readonly email: FieldRef<"ContactRequest", 'String'>
    readonly boardPositions: FieldRef<"ContactRequest", 'String[]'>
    readonly communityName: FieldRef<"ContactRequest", 'String'>
    readonly communityLocation: FieldRef<"ContactRequest", 'String'>
    readonly communityDescription: FieldRef<"ContactRequest", 'String'>
    readonly referralSource: FieldRef<"ContactRequest", 'String'>
    readonly numberOfUnits: FieldRef<"ContactRequest", 'Int'>
    readonly propertyType: FieldRef<"ContactRequest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContactRequest findUnique
   */
  export type ContactRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Filter, which ContactRequest to fetch.
     */
    where: ContactRequestWhereUniqueInput
  }

  /**
   * ContactRequest findUniqueOrThrow
   */
  export type ContactRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Filter, which ContactRequest to fetch.
     */
    where: ContactRequestWhereUniqueInput
  }

  /**
   * ContactRequest findFirst
   */
  export type ContactRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Filter, which ContactRequest to fetch.
     */
    where?: ContactRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactRequests to fetch.
     */
    orderBy?: ContactRequestOrderByWithRelationInput | ContactRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactRequests.
     */
    cursor?: ContactRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactRequests.
     */
    distinct?: ContactRequestScalarFieldEnum | ContactRequestScalarFieldEnum[]
  }

  /**
   * ContactRequest findFirstOrThrow
   */
  export type ContactRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Filter, which ContactRequest to fetch.
     */
    where?: ContactRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactRequests to fetch.
     */
    orderBy?: ContactRequestOrderByWithRelationInput | ContactRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactRequests.
     */
    cursor?: ContactRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactRequests.
     */
    distinct?: ContactRequestScalarFieldEnum | ContactRequestScalarFieldEnum[]
  }

  /**
   * ContactRequest findMany
   */
  export type ContactRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Filter, which ContactRequests to fetch.
     */
    where?: ContactRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactRequests to fetch.
     */
    orderBy?: ContactRequestOrderByWithRelationInput | ContactRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactRequests.
     */
    cursor?: ContactRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactRequests.
     */
    skip?: number
    distinct?: ContactRequestScalarFieldEnum | ContactRequestScalarFieldEnum[]
  }

  /**
   * ContactRequest create
   */
  export type ContactRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * The data needed to create a ContactRequest.
     */
    data: XOR<ContactRequestCreateInput, ContactRequestUncheckedCreateInput>
  }

  /**
   * ContactRequest createMany
   */
  export type ContactRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactRequests.
     */
    data: ContactRequestCreateManyInput | ContactRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactRequest createManyAndReturn
   */
  export type ContactRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * The data used to create many ContactRequests.
     */
    data: ContactRequestCreateManyInput | ContactRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactRequest update
   */
  export type ContactRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * The data needed to update a ContactRequest.
     */
    data: XOR<ContactRequestUpdateInput, ContactRequestUncheckedUpdateInput>
    /**
     * Choose, which ContactRequest to update.
     */
    where: ContactRequestWhereUniqueInput
  }

  /**
   * ContactRequest updateMany
   */
  export type ContactRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactRequests.
     */
    data: XOR<ContactRequestUpdateManyMutationInput, ContactRequestUncheckedUpdateManyInput>
    /**
     * Filter which ContactRequests to update
     */
    where?: ContactRequestWhereInput
    /**
     * Limit how many ContactRequests to update.
     */
    limit?: number
  }

  /**
   * ContactRequest updateManyAndReturn
   */
  export type ContactRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * The data used to update ContactRequests.
     */
    data: XOR<ContactRequestUpdateManyMutationInput, ContactRequestUncheckedUpdateManyInput>
    /**
     * Filter which ContactRequests to update
     */
    where?: ContactRequestWhereInput
    /**
     * Limit how many ContactRequests to update.
     */
    limit?: number
  }

  /**
   * ContactRequest upsert
   */
  export type ContactRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * The filter to search for the ContactRequest to update in case it exists.
     */
    where: ContactRequestWhereUniqueInput
    /**
     * In case the ContactRequest found by the `where` argument doesn't exist, create a new ContactRequest with this data.
     */
    create: XOR<ContactRequestCreateInput, ContactRequestUncheckedCreateInput>
    /**
     * In case the ContactRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactRequestUpdateInput, ContactRequestUncheckedUpdateInput>
  }

  /**
   * ContactRequest delete
   */
  export type ContactRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
    /**
     * Filter which ContactRequest to delete.
     */
    where: ContactRequestWhereUniqueInput
  }

  /**
   * ContactRequest deleteMany
   */
  export type ContactRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactRequests to delete
     */
    where?: ContactRequestWhereInput
    /**
     * Limit how many ContactRequests to delete.
     */
    limit?: number
  }

  /**
   * ContactRequest without action
   */
  export type ContactRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactRequest
     */
    select?: ContactRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactRequest
     */
    omit?: ContactRequestOmit<ExtArgs> | null
  }


  /**
   * Model WhitelistedUser
   */

  export type AggregateWhitelistedUser = {
    _count: WhitelistedUserCountAggregateOutputType | null
    _avg: WhitelistedUserAvgAggregateOutputType | null
    _sum: WhitelistedUserSumAggregateOutputType | null
    _min: WhitelistedUserMinAggregateOutputType | null
    _max: WhitelistedUserMaxAggregateOutputType | null
  }

  export type WhitelistedUserAvgAggregateOutputType = {
    id: number | null
  }

  export type WhitelistedUserSumAggregateOutputType = {
    id: number | null
  }

  export type WhitelistedUserMinAggregateOutputType = {
    id: number | null
    email: string | null
    role: string | null
    createdAt: Date | null
  }

  export type WhitelistedUserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    role: string | null
    createdAt: Date | null
  }

  export type WhitelistedUserCountAggregateOutputType = {
    id: number
    email: number
    role: number
    createdAt: number
    _all: number
  }


  export type WhitelistedUserAvgAggregateInputType = {
    id?: true
  }

  export type WhitelistedUserSumAggregateInputType = {
    id?: true
  }

  export type WhitelistedUserMinAggregateInputType = {
    id?: true
    email?: true
    role?: true
    createdAt?: true
  }

  export type WhitelistedUserMaxAggregateInputType = {
    id?: true
    email?: true
    role?: true
    createdAt?: true
  }

  export type WhitelistedUserCountAggregateInputType = {
    id?: true
    email?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type WhitelistedUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WhitelistedUser to aggregate.
     */
    where?: WhitelistedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WhitelistedUsers to fetch.
     */
    orderBy?: WhitelistedUserOrderByWithRelationInput | WhitelistedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WhitelistedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WhitelistedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WhitelistedUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WhitelistedUsers
    **/
    _count?: true | WhitelistedUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WhitelistedUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WhitelistedUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WhitelistedUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WhitelistedUserMaxAggregateInputType
  }

  export type GetWhitelistedUserAggregateType<T extends WhitelistedUserAggregateArgs> = {
        [P in keyof T & keyof AggregateWhitelistedUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWhitelistedUser[P]>
      : GetScalarType<T[P], AggregateWhitelistedUser[P]>
  }




  export type WhitelistedUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WhitelistedUserWhereInput
    orderBy?: WhitelistedUserOrderByWithAggregationInput | WhitelistedUserOrderByWithAggregationInput[]
    by: WhitelistedUserScalarFieldEnum[] | WhitelistedUserScalarFieldEnum
    having?: WhitelistedUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WhitelistedUserCountAggregateInputType | true
    _avg?: WhitelistedUserAvgAggregateInputType
    _sum?: WhitelistedUserSumAggregateInputType
    _min?: WhitelistedUserMinAggregateInputType
    _max?: WhitelistedUserMaxAggregateInputType
  }

  export type WhitelistedUserGroupByOutputType = {
    id: number
    email: string
    role: string
    createdAt: Date
    _count: WhitelistedUserCountAggregateOutputType | null
    _avg: WhitelistedUserAvgAggregateOutputType | null
    _sum: WhitelistedUserSumAggregateOutputType | null
    _min: WhitelistedUserMinAggregateOutputType | null
    _max: WhitelistedUserMaxAggregateOutputType | null
  }

  type GetWhitelistedUserGroupByPayload<T extends WhitelistedUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WhitelistedUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WhitelistedUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WhitelistedUserGroupByOutputType[P]>
            : GetScalarType<T[P], WhitelistedUserGroupByOutputType[P]>
        }
      >
    >


  export type WhitelistedUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["whitelistedUser"]>

  export type WhitelistedUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["whitelistedUser"]>

  export type WhitelistedUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["whitelistedUser"]>

  export type WhitelistedUserSelectScalar = {
    id?: boolean
    email?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type WhitelistedUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "role" | "createdAt", ExtArgs["result"]["whitelistedUser"]>

  export type $WhitelistedUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WhitelistedUser"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      role: string
      createdAt: Date
    }, ExtArgs["result"]["whitelistedUser"]>
    composites: {}
  }

  type WhitelistedUserGetPayload<S extends boolean | null | undefined | WhitelistedUserDefaultArgs> = $Result.GetResult<Prisma.$WhitelistedUserPayload, S>

  type WhitelistedUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WhitelistedUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WhitelistedUserCountAggregateInputType | true
    }

  export interface WhitelistedUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WhitelistedUser'], meta: { name: 'WhitelistedUser' } }
    /**
     * Find zero or one WhitelistedUser that matches the filter.
     * @param {WhitelistedUserFindUniqueArgs} args - Arguments to find a WhitelistedUser
     * @example
     * // Get one WhitelistedUser
     * const whitelistedUser = await prisma.whitelistedUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WhitelistedUserFindUniqueArgs>(args: SelectSubset<T, WhitelistedUserFindUniqueArgs<ExtArgs>>): Prisma__WhitelistedUserClient<$Result.GetResult<Prisma.$WhitelistedUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WhitelistedUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WhitelistedUserFindUniqueOrThrowArgs} args - Arguments to find a WhitelistedUser
     * @example
     * // Get one WhitelistedUser
     * const whitelistedUser = await prisma.whitelistedUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WhitelistedUserFindUniqueOrThrowArgs>(args: SelectSubset<T, WhitelistedUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WhitelistedUserClient<$Result.GetResult<Prisma.$WhitelistedUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WhitelistedUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WhitelistedUserFindFirstArgs} args - Arguments to find a WhitelistedUser
     * @example
     * // Get one WhitelistedUser
     * const whitelistedUser = await prisma.whitelistedUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WhitelistedUserFindFirstArgs>(args?: SelectSubset<T, WhitelistedUserFindFirstArgs<ExtArgs>>): Prisma__WhitelistedUserClient<$Result.GetResult<Prisma.$WhitelistedUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WhitelistedUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WhitelistedUserFindFirstOrThrowArgs} args - Arguments to find a WhitelistedUser
     * @example
     * // Get one WhitelistedUser
     * const whitelistedUser = await prisma.whitelistedUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WhitelistedUserFindFirstOrThrowArgs>(args?: SelectSubset<T, WhitelistedUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__WhitelistedUserClient<$Result.GetResult<Prisma.$WhitelistedUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WhitelistedUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WhitelistedUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WhitelistedUsers
     * const whitelistedUsers = await prisma.whitelistedUser.findMany()
     * 
     * // Get first 10 WhitelistedUsers
     * const whitelistedUsers = await prisma.whitelistedUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const whitelistedUserWithIdOnly = await prisma.whitelistedUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WhitelistedUserFindManyArgs>(args?: SelectSubset<T, WhitelistedUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WhitelistedUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WhitelistedUser.
     * @param {WhitelistedUserCreateArgs} args - Arguments to create a WhitelistedUser.
     * @example
     * // Create one WhitelistedUser
     * const WhitelistedUser = await prisma.whitelistedUser.create({
     *   data: {
     *     // ... data to create a WhitelistedUser
     *   }
     * })
     * 
     */
    create<T extends WhitelistedUserCreateArgs>(args: SelectSubset<T, WhitelistedUserCreateArgs<ExtArgs>>): Prisma__WhitelistedUserClient<$Result.GetResult<Prisma.$WhitelistedUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WhitelistedUsers.
     * @param {WhitelistedUserCreateManyArgs} args - Arguments to create many WhitelistedUsers.
     * @example
     * // Create many WhitelistedUsers
     * const whitelistedUser = await prisma.whitelistedUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WhitelistedUserCreateManyArgs>(args?: SelectSubset<T, WhitelistedUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WhitelistedUsers and returns the data saved in the database.
     * @param {WhitelistedUserCreateManyAndReturnArgs} args - Arguments to create many WhitelistedUsers.
     * @example
     * // Create many WhitelistedUsers
     * const whitelistedUser = await prisma.whitelistedUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WhitelistedUsers and only return the `id`
     * const whitelistedUserWithIdOnly = await prisma.whitelistedUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WhitelistedUserCreateManyAndReturnArgs>(args?: SelectSubset<T, WhitelistedUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WhitelistedUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WhitelistedUser.
     * @param {WhitelistedUserDeleteArgs} args - Arguments to delete one WhitelistedUser.
     * @example
     * // Delete one WhitelistedUser
     * const WhitelistedUser = await prisma.whitelistedUser.delete({
     *   where: {
     *     // ... filter to delete one WhitelistedUser
     *   }
     * })
     * 
     */
    delete<T extends WhitelistedUserDeleteArgs>(args: SelectSubset<T, WhitelistedUserDeleteArgs<ExtArgs>>): Prisma__WhitelistedUserClient<$Result.GetResult<Prisma.$WhitelistedUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WhitelistedUser.
     * @param {WhitelistedUserUpdateArgs} args - Arguments to update one WhitelistedUser.
     * @example
     * // Update one WhitelistedUser
     * const whitelistedUser = await prisma.whitelistedUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WhitelistedUserUpdateArgs>(args: SelectSubset<T, WhitelistedUserUpdateArgs<ExtArgs>>): Prisma__WhitelistedUserClient<$Result.GetResult<Prisma.$WhitelistedUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WhitelistedUsers.
     * @param {WhitelistedUserDeleteManyArgs} args - Arguments to filter WhitelistedUsers to delete.
     * @example
     * // Delete a few WhitelistedUsers
     * const { count } = await prisma.whitelistedUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WhitelistedUserDeleteManyArgs>(args?: SelectSubset<T, WhitelistedUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WhitelistedUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WhitelistedUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WhitelistedUsers
     * const whitelistedUser = await prisma.whitelistedUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WhitelistedUserUpdateManyArgs>(args: SelectSubset<T, WhitelistedUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WhitelistedUsers and returns the data updated in the database.
     * @param {WhitelistedUserUpdateManyAndReturnArgs} args - Arguments to update many WhitelistedUsers.
     * @example
     * // Update many WhitelistedUsers
     * const whitelistedUser = await prisma.whitelistedUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WhitelistedUsers and only return the `id`
     * const whitelistedUserWithIdOnly = await prisma.whitelistedUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WhitelistedUserUpdateManyAndReturnArgs>(args: SelectSubset<T, WhitelistedUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WhitelistedUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WhitelistedUser.
     * @param {WhitelistedUserUpsertArgs} args - Arguments to update or create a WhitelistedUser.
     * @example
     * // Update or create a WhitelistedUser
     * const whitelistedUser = await prisma.whitelistedUser.upsert({
     *   create: {
     *     // ... data to create a WhitelistedUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WhitelistedUser we want to update
     *   }
     * })
     */
    upsert<T extends WhitelistedUserUpsertArgs>(args: SelectSubset<T, WhitelistedUserUpsertArgs<ExtArgs>>): Prisma__WhitelistedUserClient<$Result.GetResult<Prisma.$WhitelistedUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WhitelistedUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WhitelistedUserCountArgs} args - Arguments to filter WhitelistedUsers to count.
     * @example
     * // Count the number of WhitelistedUsers
     * const count = await prisma.whitelistedUser.count({
     *   where: {
     *     // ... the filter for the WhitelistedUsers we want to count
     *   }
     * })
    **/
    count<T extends WhitelistedUserCountArgs>(
      args?: Subset<T, WhitelistedUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WhitelistedUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WhitelistedUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WhitelistedUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WhitelistedUserAggregateArgs>(args: Subset<T, WhitelistedUserAggregateArgs>): Prisma.PrismaPromise<GetWhitelistedUserAggregateType<T>>

    /**
     * Group by WhitelistedUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WhitelistedUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WhitelistedUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WhitelistedUserGroupByArgs['orderBy'] }
        : { orderBy?: WhitelistedUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WhitelistedUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWhitelistedUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WhitelistedUser model
   */
  readonly fields: WhitelistedUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WhitelistedUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WhitelistedUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WhitelistedUser model
   */
  interface WhitelistedUserFieldRefs {
    readonly id: FieldRef<"WhitelistedUser", 'Int'>
    readonly email: FieldRef<"WhitelistedUser", 'String'>
    readonly role: FieldRef<"WhitelistedUser", 'String'>
    readonly createdAt: FieldRef<"WhitelistedUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WhitelistedUser findUnique
   */
  export type WhitelistedUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
    /**
     * Filter, which WhitelistedUser to fetch.
     */
    where: WhitelistedUserWhereUniqueInput
  }

  /**
   * WhitelistedUser findUniqueOrThrow
   */
  export type WhitelistedUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
    /**
     * Filter, which WhitelistedUser to fetch.
     */
    where: WhitelistedUserWhereUniqueInput
  }

  /**
   * WhitelistedUser findFirst
   */
  export type WhitelistedUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
    /**
     * Filter, which WhitelistedUser to fetch.
     */
    where?: WhitelistedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WhitelistedUsers to fetch.
     */
    orderBy?: WhitelistedUserOrderByWithRelationInput | WhitelistedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WhitelistedUsers.
     */
    cursor?: WhitelistedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WhitelistedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WhitelistedUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WhitelistedUsers.
     */
    distinct?: WhitelistedUserScalarFieldEnum | WhitelistedUserScalarFieldEnum[]
  }

  /**
   * WhitelistedUser findFirstOrThrow
   */
  export type WhitelistedUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
    /**
     * Filter, which WhitelistedUser to fetch.
     */
    where?: WhitelistedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WhitelistedUsers to fetch.
     */
    orderBy?: WhitelistedUserOrderByWithRelationInput | WhitelistedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WhitelistedUsers.
     */
    cursor?: WhitelistedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WhitelistedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WhitelistedUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WhitelistedUsers.
     */
    distinct?: WhitelistedUserScalarFieldEnum | WhitelistedUserScalarFieldEnum[]
  }

  /**
   * WhitelistedUser findMany
   */
  export type WhitelistedUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
    /**
     * Filter, which WhitelistedUsers to fetch.
     */
    where?: WhitelistedUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WhitelistedUsers to fetch.
     */
    orderBy?: WhitelistedUserOrderByWithRelationInput | WhitelistedUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WhitelistedUsers.
     */
    cursor?: WhitelistedUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WhitelistedUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WhitelistedUsers.
     */
    skip?: number
    distinct?: WhitelistedUserScalarFieldEnum | WhitelistedUserScalarFieldEnum[]
  }

  /**
   * WhitelistedUser create
   */
  export type WhitelistedUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
    /**
     * The data needed to create a WhitelistedUser.
     */
    data: XOR<WhitelistedUserCreateInput, WhitelistedUserUncheckedCreateInput>
  }

  /**
   * WhitelistedUser createMany
   */
  export type WhitelistedUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WhitelistedUsers.
     */
    data: WhitelistedUserCreateManyInput | WhitelistedUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WhitelistedUser createManyAndReturn
   */
  export type WhitelistedUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
    /**
     * The data used to create many WhitelistedUsers.
     */
    data: WhitelistedUserCreateManyInput | WhitelistedUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WhitelistedUser update
   */
  export type WhitelistedUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
    /**
     * The data needed to update a WhitelistedUser.
     */
    data: XOR<WhitelistedUserUpdateInput, WhitelistedUserUncheckedUpdateInput>
    /**
     * Choose, which WhitelistedUser to update.
     */
    where: WhitelistedUserWhereUniqueInput
  }

  /**
   * WhitelistedUser updateMany
   */
  export type WhitelistedUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WhitelistedUsers.
     */
    data: XOR<WhitelistedUserUpdateManyMutationInput, WhitelistedUserUncheckedUpdateManyInput>
    /**
     * Filter which WhitelistedUsers to update
     */
    where?: WhitelistedUserWhereInput
    /**
     * Limit how many WhitelistedUsers to update.
     */
    limit?: number
  }

  /**
   * WhitelistedUser updateManyAndReturn
   */
  export type WhitelistedUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
    /**
     * The data used to update WhitelistedUsers.
     */
    data: XOR<WhitelistedUserUpdateManyMutationInput, WhitelistedUserUncheckedUpdateManyInput>
    /**
     * Filter which WhitelistedUsers to update
     */
    where?: WhitelistedUserWhereInput
    /**
     * Limit how many WhitelistedUsers to update.
     */
    limit?: number
  }

  /**
   * WhitelistedUser upsert
   */
  export type WhitelistedUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
    /**
     * The filter to search for the WhitelistedUser to update in case it exists.
     */
    where: WhitelistedUserWhereUniqueInput
    /**
     * In case the WhitelistedUser found by the `where` argument doesn't exist, create a new WhitelistedUser with this data.
     */
    create: XOR<WhitelistedUserCreateInput, WhitelistedUserUncheckedCreateInput>
    /**
     * In case the WhitelistedUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WhitelistedUserUpdateInput, WhitelistedUserUncheckedUpdateInput>
  }

  /**
   * WhitelistedUser delete
   */
  export type WhitelistedUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
    /**
     * Filter which WhitelistedUser to delete.
     */
    where: WhitelistedUserWhereUniqueInput
  }

  /**
   * WhitelistedUser deleteMany
   */
  export type WhitelistedUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WhitelistedUsers to delete
     */
    where?: WhitelistedUserWhereInput
    /**
     * Limit how many WhitelistedUsers to delete.
     */
    limit?: number
  }

  /**
   * WhitelistedUser without action
   */
  export type WhitelistedUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhitelistedUser
     */
    select?: WhitelistedUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WhitelistedUser
     */
    omit?: WhitelistedUserOmit<ExtArgs> | null
  }


  /**
   * Model Vendor
   */

  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorAvgAggregateOutputType = {
    id: number | null
  }

  export type VendorSumAggregateOutputType = {
    id: number | null
  }

  export type VendorMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
  }

  export type VendorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    createdAt: number
    _all: number
  }


  export type VendorAvgAggregateInputType = {
    id?: true
  }

  export type VendorSumAggregateInputType = {
    id?: true
  }

  export type VendorMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    createdAt?: true
    _all?: true
  }

  export type VendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendor to aggregate.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithAggregationInput | VendorOrderByWithAggregationInput[]
    by: VendorScalarFieldEnum[] | VendorScalarFieldEnum
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _avg?: VendorAvgAggregateInputType
    _sum?: VendorSumAggregateInputType
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }

  export type VendorGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string
    createdAt: Date
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    requests?: boolean | Vendor$requestsArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
  }

  export type VendorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "createdAt", ExtArgs["result"]["vendor"]>
  export type VendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requests?: boolean | Vendor$requestsArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VendorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type VendorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendor"
    objects: {
      requests: Prisma.$MaintenanceRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string
      createdAt: Date
    }, ExtArgs["result"]["vendor"]>
    composites: {}
  }

  type VendorGetPayload<S extends boolean | null | undefined | VendorDefaultArgs> = $Result.GetResult<Prisma.$VendorPayload, S>

  type VendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VendorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VendorCountAggregateInputType | true
    }

  export interface VendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendor'], meta: { name: 'Vendor' } }
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendorFindUniqueArgs>(args: SelectSubset<T, VendorFindUniqueArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vendor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs>(args: SelectSubset<T, VendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendorFindFirstArgs>(args?: SelectSubset<T, VendorFindFirstArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs>(args?: SelectSubset<T, VendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendorFindManyArgs>(args?: SelectSubset<T, VendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
     */
    create<T extends VendorCreateArgs>(args: SelectSubset<T, VendorCreateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vendors.
     * @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendorCreateManyArgs>(args?: SelectSubset<T, VendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vendors and returns the data saved in the database.
     * @param {VendorCreateManyAndReturnArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VendorCreateManyAndReturnArgs>(args?: SelectSubset<T, VendorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
     */
    delete<T extends VendorDeleteArgs>(args: SelectSubset<T, VendorDeleteArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendorUpdateArgs>(args: SelectSubset<T, VendorUpdateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendorDeleteManyArgs>(args?: SelectSubset<T, VendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendorUpdateManyArgs>(args: SelectSubset<T, VendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors and returns the data updated in the database.
     * @param {VendorUpdateManyAndReturnArgs} args - Arguments to update many Vendors.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VendorUpdateManyAndReturnArgs>(args: SelectSubset<T, VendorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
     */
    upsert<T extends VendorUpsertArgs>(args: SelectSubset<T, VendorUpsertArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): Prisma.PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendor model
   */
  readonly fields: VendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requests<T extends Vendor$requestsArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$requestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendor model
   */
  interface VendorFieldRefs {
    readonly id: FieldRef<"Vendor", 'Int'>
    readonly name: FieldRef<"Vendor", 'String'>
    readonly email: FieldRef<"Vendor", 'String'>
    readonly phone: FieldRef<"Vendor", 'String'>
    readonly createdAt: FieldRef<"Vendor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vendor findUnique
   */
  export type VendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findFirst
   */
  export type VendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendors to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor create
   */
  export type VendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendor.
     */
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }

  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor createManyAndReturn
   */
  export type VendorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor update
   */
  export type VendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendor.
     */
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
  }

  /**
   * Vendor updateManyAndReturn
   */
  export type VendorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
  }

  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     */
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     */
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }

  /**
   * Vendor delete
   */
  export type VendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter which Vendor to delete.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendors to delete
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to delete.
     */
    limit?: number
  }

  /**
   * Vendor.requests
   */
  export type Vendor$requestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceRequest
     */
    select?: MaintenanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceRequest
     */
    omit?: MaintenanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceRequestInclude<ExtArgs> | null
    where?: MaintenanceRequestWhereInput
    orderBy?: MaintenanceRequestOrderByWithRelationInput | MaintenanceRequestOrderByWithRelationInput[]
    cursor?: MaintenanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceRequestScalarFieldEnum | MaintenanceRequestScalarFieldEnum[]
  }

  /**
   * Vendor without action
   */
  export type VendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
  }


  /**
   * Model LinkedRequest
   */

  export type AggregateLinkedRequest = {
    _count: LinkedRequestCountAggregateOutputType | null
    _avg: LinkedRequestAvgAggregateOutputType | null
    _sum: LinkedRequestSumAggregateOutputType | null
    _min: LinkedRequestMinAggregateOutputType | null
    _max: LinkedRequestMaxAggregateOutputType | null
  }

  export type LinkedRequestAvgAggregateOutputType = {
    requestAId: number | null
    requestBId: number | null
  }

  export type LinkedRequestSumAggregateOutputType = {
    requestAId: number | null
    requestBId: number | null
  }

  export type LinkedRequestMinAggregateOutputType = {
    requestAId: number | null
    requestBId: number | null
  }

  export type LinkedRequestMaxAggregateOutputType = {
    requestAId: number | null
    requestBId: number | null
  }

  export type LinkedRequestCountAggregateOutputType = {
    requestAId: number
    requestBId: number
    _all: number
  }


  export type LinkedRequestAvgAggregateInputType = {
    requestAId?: true
    requestBId?: true
  }

  export type LinkedRequestSumAggregateInputType = {
    requestAId?: true
    requestBId?: true
  }

  export type LinkedRequestMinAggregateInputType = {
    requestAId?: true
    requestBId?: true
  }

  export type LinkedRequestMaxAggregateInputType = {
    requestAId?: true
    requestBId?: true
  }

  export type LinkedRequestCountAggregateInputType = {
    requestAId?: true
    requestBId?: true
    _all?: true
  }

  export type LinkedRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LinkedRequest to aggregate.
     */
    where?: LinkedRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LinkedRequests to fetch.
     */
    orderBy?: LinkedRequestOrderByWithRelationInput | LinkedRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LinkedRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LinkedRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LinkedRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LinkedRequests
    **/
    _count?: true | LinkedRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LinkedRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LinkedRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LinkedRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LinkedRequestMaxAggregateInputType
  }

  export type GetLinkedRequestAggregateType<T extends LinkedRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateLinkedRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLinkedRequest[P]>
      : GetScalarType<T[P], AggregateLinkedRequest[P]>
  }




  export type LinkedRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LinkedRequestWhereInput
    orderBy?: LinkedRequestOrderByWithAggregationInput | LinkedRequestOrderByWithAggregationInput[]
    by: LinkedRequestScalarFieldEnum[] | LinkedRequestScalarFieldEnum
    having?: LinkedRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LinkedRequestCountAggregateInputType | true
    _avg?: LinkedRequestAvgAggregateInputType
    _sum?: LinkedRequestSumAggregateInputType
    _min?: LinkedRequestMinAggregateInputType
    _max?: LinkedRequestMaxAggregateInputType
  }

  export type LinkedRequestGroupByOutputType = {
    requestAId: number
    requestBId: number
    _count: LinkedRequestCountAggregateOutputType | null
    _avg: LinkedRequestAvgAggregateOutputType | null
    _sum: LinkedRequestSumAggregateOutputType | null
    _min: LinkedRequestMinAggregateOutputType | null
    _max: LinkedRequestMaxAggregateOutputType | null
  }

  type GetLinkedRequestGroupByPayload<T extends LinkedRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LinkedRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LinkedRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LinkedRequestGroupByOutputType[P]>
            : GetScalarType<T[P], LinkedRequestGroupByOutputType[P]>
        }
      >
    >


  export type LinkedRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    requestAId?: boolean
    requestBId?: boolean
    requestA?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
    requestB?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["linkedRequest"]>

  export type LinkedRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    requestAId?: boolean
    requestBId?: boolean
    requestA?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
    requestB?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["linkedRequest"]>

  export type LinkedRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    requestAId?: boolean
    requestBId?: boolean
    requestA?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
    requestB?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["linkedRequest"]>

  export type LinkedRequestSelectScalar = {
    requestAId?: boolean
    requestBId?: boolean
  }

  export type LinkedRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"requestAId" | "requestBId", ExtArgs["result"]["linkedRequest"]>
  export type LinkedRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requestA?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
    requestB?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
  }
  export type LinkedRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requestA?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
    requestB?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
  }
  export type LinkedRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requestA?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
    requestB?: boolean | MaintenanceRequestDefaultArgs<ExtArgs>
  }

  export type $LinkedRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LinkedRequest"
    objects: {
      requestA: Prisma.$MaintenanceRequestPayload<ExtArgs>
      requestB: Prisma.$MaintenanceRequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      requestAId: number
      requestBId: number
    }, ExtArgs["result"]["linkedRequest"]>
    composites: {}
  }

  type LinkedRequestGetPayload<S extends boolean | null | undefined | LinkedRequestDefaultArgs> = $Result.GetResult<Prisma.$LinkedRequestPayload, S>

  type LinkedRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LinkedRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LinkedRequestCountAggregateInputType | true
    }

  export interface LinkedRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LinkedRequest'], meta: { name: 'LinkedRequest' } }
    /**
     * Find zero or one LinkedRequest that matches the filter.
     * @param {LinkedRequestFindUniqueArgs} args - Arguments to find a LinkedRequest
     * @example
     * // Get one LinkedRequest
     * const linkedRequest = await prisma.linkedRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LinkedRequestFindUniqueArgs>(args: SelectSubset<T, LinkedRequestFindUniqueArgs<ExtArgs>>): Prisma__LinkedRequestClient<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LinkedRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LinkedRequestFindUniqueOrThrowArgs} args - Arguments to find a LinkedRequest
     * @example
     * // Get one LinkedRequest
     * const linkedRequest = await prisma.linkedRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LinkedRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, LinkedRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LinkedRequestClient<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LinkedRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkedRequestFindFirstArgs} args - Arguments to find a LinkedRequest
     * @example
     * // Get one LinkedRequest
     * const linkedRequest = await prisma.linkedRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LinkedRequestFindFirstArgs>(args?: SelectSubset<T, LinkedRequestFindFirstArgs<ExtArgs>>): Prisma__LinkedRequestClient<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LinkedRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkedRequestFindFirstOrThrowArgs} args - Arguments to find a LinkedRequest
     * @example
     * // Get one LinkedRequest
     * const linkedRequest = await prisma.linkedRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LinkedRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, LinkedRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__LinkedRequestClient<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LinkedRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkedRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LinkedRequests
     * const linkedRequests = await prisma.linkedRequest.findMany()
     * 
     * // Get first 10 LinkedRequests
     * const linkedRequests = await prisma.linkedRequest.findMany({ take: 10 })
     * 
     * // Only select the `requestAId`
     * const linkedRequestWithRequestAIdOnly = await prisma.linkedRequest.findMany({ select: { requestAId: true } })
     * 
     */
    findMany<T extends LinkedRequestFindManyArgs>(args?: SelectSubset<T, LinkedRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LinkedRequest.
     * @param {LinkedRequestCreateArgs} args - Arguments to create a LinkedRequest.
     * @example
     * // Create one LinkedRequest
     * const LinkedRequest = await prisma.linkedRequest.create({
     *   data: {
     *     // ... data to create a LinkedRequest
     *   }
     * })
     * 
     */
    create<T extends LinkedRequestCreateArgs>(args: SelectSubset<T, LinkedRequestCreateArgs<ExtArgs>>): Prisma__LinkedRequestClient<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LinkedRequests.
     * @param {LinkedRequestCreateManyArgs} args - Arguments to create many LinkedRequests.
     * @example
     * // Create many LinkedRequests
     * const linkedRequest = await prisma.linkedRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LinkedRequestCreateManyArgs>(args?: SelectSubset<T, LinkedRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LinkedRequests and returns the data saved in the database.
     * @param {LinkedRequestCreateManyAndReturnArgs} args - Arguments to create many LinkedRequests.
     * @example
     * // Create many LinkedRequests
     * const linkedRequest = await prisma.linkedRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LinkedRequests and only return the `requestAId`
     * const linkedRequestWithRequestAIdOnly = await prisma.linkedRequest.createManyAndReturn({
     *   select: { requestAId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LinkedRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, LinkedRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LinkedRequest.
     * @param {LinkedRequestDeleteArgs} args - Arguments to delete one LinkedRequest.
     * @example
     * // Delete one LinkedRequest
     * const LinkedRequest = await prisma.linkedRequest.delete({
     *   where: {
     *     // ... filter to delete one LinkedRequest
     *   }
     * })
     * 
     */
    delete<T extends LinkedRequestDeleteArgs>(args: SelectSubset<T, LinkedRequestDeleteArgs<ExtArgs>>): Prisma__LinkedRequestClient<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LinkedRequest.
     * @param {LinkedRequestUpdateArgs} args - Arguments to update one LinkedRequest.
     * @example
     * // Update one LinkedRequest
     * const linkedRequest = await prisma.linkedRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LinkedRequestUpdateArgs>(args: SelectSubset<T, LinkedRequestUpdateArgs<ExtArgs>>): Prisma__LinkedRequestClient<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LinkedRequests.
     * @param {LinkedRequestDeleteManyArgs} args - Arguments to filter LinkedRequests to delete.
     * @example
     * // Delete a few LinkedRequests
     * const { count } = await prisma.linkedRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LinkedRequestDeleteManyArgs>(args?: SelectSubset<T, LinkedRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LinkedRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkedRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LinkedRequests
     * const linkedRequest = await prisma.linkedRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LinkedRequestUpdateManyArgs>(args: SelectSubset<T, LinkedRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LinkedRequests and returns the data updated in the database.
     * @param {LinkedRequestUpdateManyAndReturnArgs} args - Arguments to update many LinkedRequests.
     * @example
     * // Update many LinkedRequests
     * const linkedRequest = await prisma.linkedRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LinkedRequests and only return the `requestAId`
     * const linkedRequestWithRequestAIdOnly = await prisma.linkedRequest.updateManyAndReturn({
     *   select: { requestAId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LinkedRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, LinkedRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LinkedRequest.
     * @param {LinkedRequestUpsertArgs} args - Arguments to update or create a LinkedRequest.
     * @example
     * // Update or create a LinkedRequest
     * const linkedRequest = await prisma.linkedRequest.upsert({
     *   create: {
     *     // ... data to create a LinkedRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LinkedRequest we want to update
     *   }
     * })
     */
    upsert<T extends LinkedRequestUpsertArgs>(args: SelectSubset<T, LinkedRequestUpsertArgs<ExtArgs>>): Prisma__LinkedRequestClient<$Result.GetResult<Prisma.$LinkedRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LinkedRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkedRequestCountArgs} args - Arguments to filter LinkedRequests to count.
     * @example
     * // Count the number of LinkedRequests
     * const count = await prisma.linkedRequest.count({
     *   where: {
     *     // ... the filter for the LinkedRequests we want to count
     *   }
     * })
    **/
    count<T extends LinkedRequestCountArgs>(
      args?: Subset<T, LinkedRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LinkedRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LinkedRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkedRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LinkedRequestAggregateArgs>(args: Subset<T, LinkedRequestAggregateArgs>): Prisma.PrismaPromise<GetLinkedRequestAggregateType<T>>

    /**
     * Group by LinkedRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkedRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LinkedRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LinkedRequestGroupByArgs['orderBy'] }
        : { orderBy?: LinkedRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LinkedRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLinkedRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LinkedRequest model
   */
  readonly fields: LinkedRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LinkedRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LinkedRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requestA<T extends MaintenanceRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRequestDefaultArgs<ExtArgs>>): Prisma__MaintenanceRequestClient<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    requestB<T extends MaintenanceRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaintenanceRequestDefaultArgs<ExtArgs>>): Prisma__MaintenanceRequestClient<$Result.GetResult<Prisma.$MaintenanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LinkedRequest model
   */
  interface LinkedRequestFieldRefs {
    readonly requestAId: FieldRef<"LinkedRequest", 'Int'>
    readonly requestBId: FieldRef<"LinkedRequest", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * LinkedRequest findUnique
   */
  export type LinkedRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
    /**
     * Filter, which LinkedRequest to fetch.
     */
    where: LinkedRequestWhereUniqueInput
  }

  /**
   * LinkedRequest findUniqueOrThrow
   */
  export type LinkedRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
    /**
     * Filter, which LinkedRequest to fetch.
     */
    where: LinkedRequestWhereUniqueInput
  }

  /**
   * LinkedRequest findFirst
   */
  export type LinkedRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
    /**
     * Filter, which LinkedRequest to fetch.
     */
    where?: LinkedRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LinkedRequests to fetch.
     */
    orderBy?: LinkedRequestOrderByWithRelationInput | LinkedRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LinkedRequests.
     */
    cursor?: LinkedRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LinkedRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LinkedRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LinkedRequests.
     */
    distinct?: LinkedRequestScalarFieldEnum | LinkedRequestScalarFieldEnum[]
  }

  /**
   * LinkedRequest findFirstOrThrow
   */
  export type LinkedRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
    /**
     * Filter, which LinkedRequest to fetch.
     */
    where?: LinkedRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LinkedRequests to fetch.
     */
    orderBy?: LinkedRequestOrderByWithRelationInput | LinkedRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LinkedRequests.
     */
    cursor?: LinkedRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LinkedRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LinkedRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LinkedRequests.
     */
    distinct?: LinkedRequestScalarFieldEnum | LinkedRequestScalarFieldEnum[]
  }

  /**
   * LinkedRequest findMany
   */
  export type LinkedRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
    /**
     * Filter, which LinkedRequests to fetch.
     */
    where?: LinkedRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LinkedRequests to fetch.
     */
    orderBy?: LinkedRequestOrderByWithRelationInput | LinkedRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LinkedRequests.
     */
    cursor?: LinkedRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LinkedRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LinkedRequests.
     */
    skip?: number
    distinct?: LinkedRequestScalarFieldEnum | LinkedRequestScalarFieldEnum[]
  }

  /**
   * LinkedRequest create
   */
  export type LinkedRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a LinkedRequest.
     */
    data: XOR<LinkedRequestCreateInput, LinkedRequestUncheckedCreateInput>
  }

  /**
   * LinkedRequest createMany
   */
  export type LinkedRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LinkedRequests.
     */
    data: LinkedRequestCreateManyInput | LinkedRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LinkedRequest createManyAndReturn
   */
  export type LinkedRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * The data used to create many LinkedRequests.
     */
    data: LinkedRequestCreateManyInput | LinkedRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LinkedRequest update
   */
  export type LinkedRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a LinkedRequest.
     */
    data: XOR<LinkedRequestUpdateInput, LinkedRequestUncheckedUpdateInput>
    /**
     * Choose, which LinkedRequest to update.
     */
    where: LinkedRequestWhereUniqueInput
  }

  /**
   * LinkedRequest updateMany
   */
  export type LinkedRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LinkedRequests.
     */
    data: XOR<LinkedRequestUpdateManyMutationInput, LinkedRequestUncheckedUpdateManyInput>
    /**
     * Filter which LinkedRequests to update
     */
    where?: LinkedRequestWhereInput
    /**
     * Limit how many LinkedRequests to update.
     */
    limit?: number
  }

  /**
   * LinkedRequest updateManyAndReturn
   */
  export type LinkedRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * The data used to update LinkedRequests.
     */
    data: XOR<LinkedRequestUpdateManyMutationInput, LinkedRequestUncheckedUpdateManyInput>
    /**
     * Filter which LinkedRequests to update
     */
    where?: LinkedRequestWhereInput
    /**
     * Limit how many LinkedRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LinkedRequest upsert
   */
  export type LinkedRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the LinkedRequest to update in case it exists.
     */
    where: LinkedRequestWhereUniqueInput
    /**
     * In case the LinkedRequest found by the `where` argument doesn't exist, create a new LinkedRequest with this data.
     */
    create: XOR<LinkedRequestCreateInput, LinkedRequestUncheckedCreateInput>
    /**
     * In case the LinkedRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LinkedRequestUpdateInput, LinkedRequestUncheckedUpdateInput>
  }

  /**
   * LinkedRequest delete
   */
  export type LinkedRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
    /**
     * Filter which LinkedRequest to delete.
     */
    where: LinkedRequestWhereUniqueInput
  }

  /**
   * LinkedRequest deleteMany
   */
  export type LinkedRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LinkedRequests to delete
     */
    where?: LinkedRequestWhereInput
    /**
     * Limit how many LinkedRequests to delete.
     */
    limit?: number
  }

  /**
   * LinkedRequest without action
   */
  export type LinkedRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LinkedRequest
     */
    select?: LinkedRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LinkedRequest
     */
    omit?: LinkedRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkedRequestInclude<ExtArgs> | null
  }


  /**
   * Model OverwriteCode
   */

  export type AggregateOverwriteCode = {
    _count: OverwriteCodeCountAggregateOutputType | null
    _avg: OverwriteCodeAvgAggregateOutputType | null
    _sum: OverwriteCodeSumAggregateOutputType | null
    _min: OverwriteCodeMinAggregateOutputType | null
    _max: OverwriteCodeMaxAggregateOutputType | null
  }

  export type OverwriteCodeAvgAggregateOutputType = {
    id: number | null
    usedById: number | null
  }

  export type OverwriteCodeSumAggregateOutputType = {
    id: number | null
    usedById: number | null
  }

  export type OverwriteCodeMinAggregateOutputType = {
    id: number | null
    code: string | null
    expiresAt: Date | null
    used: boolean | null
    usedById: number | null
  }

  export type OverwriteCodeMaxAggregateOutputType = {
    id: number | null
    code: string | null
    expiresAt: Date | null
    used: boolean | null
    usedById: number | null
  }

  export type OverwriteCodeCountAggregateOutputType = {
    id: number
    code: number
    expiresAt: number
    used: number
    usedById: number
    _all: number
  }


  export type OverwriteCodeAvgAggregateInputType = {
    id?: true
    usedById?: true
  }

  export type OverwriteCodeSumAggregateInputType = {
    id?: true
    usedById?: true
  }

  export type OverwriteCodeMinAggregateInputType = {
    id?: true
    code?: true
    expiresAt?: true
    used?: true
    usedById?: true
  }

  export type OverwriteCodeMaxAggregateInputType = {
    id?: true
    code?: true
    expiresAt?: true
    used?: true
    usedById?: true
  }

  export type OverwriteCodeCountAggregateInputType = {
    id?: true
    code?: true
    expiresAt?: true
    used?: true
    usedById?: true
    _all?: true
  }

  export type OverwriteCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OverwriteCode to aggregate.
     */
    where?: OverwriteCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OverwriteCodes to fetch.
     */
    orderBy?: OverwriteCodeOrderByWithRelationInput | OverwriteCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OverwriteCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OverwriteCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OverwriteCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OverwriteCodes
    **/
    _count?: true | OverwriteCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OverwriteCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OverwriteCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OverwriteCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OverwriteCodeMaxAggregateInputType
  }

  export type GetOverwriteCodeAggregateType<T extends OverwriteCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateOverwriteCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOverwriteCode[P]>
      : GetScalarType<T[P], AggregateOverwriteCode[P]>
  }




  export type OverwriteCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OverwriteCodeWhereInput
    orderBy?: OverwriteCodeOrderByWithAggregationInput | OverwriteCodeOrderByWithAggregationInput[]
    by: OverwriteCodeScalarFieldEnum[] | OverwriteCodeScalarFieldEnum
    having?: OverwriteCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OverwriteCodeCountAggregateInputType | true
    _avg?: OverwriteCodeAvgAggregateInputType
    _sum?: OverwriteCodeSumAggregateInputType
    _min?: OverwriteCodeMinAggregateInputType
    _max?: OverwriteCodeMaxAggregateInputType
  }

  export type OverwriteCodeGroupByOutputType = {
    id: number
    code: string
    expiresAt: Date
    used: boolean
    usedById: number | null
    _count: OverwriteCodeCountAggregateOutputType | null
    _avg: OverwriteCodeAvgAggregateOutputType | null
    _sum: OverwriteCodeSumAggregateOutputType | null
    _min: OverwriteCodeMinAggregateOutputType | null
    _max: OverwriteCodeMaxAggregateOutputType | null
  }

  type GetOverwriteCodeGroupByPayload<T extends OverwriteCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OverwriteCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OverwriteCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OverwriteCodeGroupByOutputType[P]>
            : GetScalarType<T[P], OverwriteCodeGroupByOutputType[P]>
        }
      >
    >


  export type OverwriteCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    expiresAt?: boolean
    used?: boolean
    usedById?: boolean
    usedBy?: boolean | OverwriteCode$usedByArgs<ExtArgs>
    units?: boolean | OverwriteCode$unitsArgs<ExtArgs>
    _count?: boolean | OverwriteCodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["overwriteCode"]>

  export type OverwriteCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    expiresAt?: boolean
    used?: boolean
    usedById?: boolean
    usedBy?: boolean | OverwriteCode$usedByArgs<ExtArgs>
  }, ExtArgs["result"]["overwriteCode"]>

  export type OverwriteCodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    expiresAt?: boolean
    used?: boolean
    usedById?: boolean
    usedBy?: boolean | OverwriteCode$usedByArgs<ExtArgs>
  }, ExtArgs["result"]["overwriteCode"]>

  export type OverwriteCodeSelectScalar = {
    id?: boolean
    code?: boolean
    expiresAt?: boolean
    used?: boolean
    usedById?: boolean
  }

  export type OverwriteCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "expiresAt" | "used" | "usedById", ExtArgs["result"]["overwriteCode"]>
  export type OverwriteCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usedBy?: boolean | OverwriteCode$usedByArgs<ExtArgs>
    units?: boolean | OverwriteCode$unitsArgs<ExtArgs>
    _count?: boolean | OverwriteCodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OverwriteCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usedBy?: boolean | OverwriteCode$usedByArgs<ExtArgs>
  }
  export type OverwriteCodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usedBy?: boolean | OverwriteCode$usedByArgs<ExtArgs>
  }

  export type $OverwriteCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OverwriteCode"
    objects: {
      usedBy: Prisma.$UserPayload<ExtArgs> | null
      units: Prisma.$UnitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      expiresAt: Date
      used: boolean
      usedById: number | null
    }, ExtArgs["result"]["overwriteCode"]>
    composites: {}
  }

  type OverwriteCodeGetPayload<S extends boolean | null | undefined | OverwriteCodeDefaultArgs> = $Result.GetResult<Prisma.$OverwriteCodePayload, S>

  type OverwriteCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OverwriteCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OverwriteCodeCountAggregateInputType | true
    }

  export interface OverwriteCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OverwriteCode'], meta: { name: 'OverwriteCode' } }
    /**
     * Find zero or one OverwriteCode that matches the filter.
     * @param {OverwriteCodeFindUniqueArgs} args - Arguments to find a OverwriteCode
     * @example
     * // Get one OverwriteCode
     * const overwriteCode = await prisma.overwriteCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OverwriteCodeFindUniqueArgs>(args: SelectSubset<T, OverwriteCodeFindUniqueArgs<ExtArgs>>): Prisma__OverwriteCodeClient<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OverwriteCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OverwriteCodeFindUniqueOrThrowArgs} args - Arguments to find a OverwriteCode
     * @example
     * // Get one OverwriteCode
     * const overwriteCode = await prisma.overwriteCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OverwriteCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, OverwriteCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OverwriteCodeClient<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OverwriteCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverwriteCodeFindFirstArgs} args - Arguments to find a OverwriteCode
     * @example
     * // Get one OverwriteCode
     * const overwriteCode = await prisma.overwriteCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OverwriteCodeFindFirstArgs>(args?: SelectSubset<T, OverwriteCodeFindFirstArgs<ExtArgs>>): Prisma__OverwriteCodeClient<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OverwriteCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverwriteCodeFindFirstOrThrowArgs} args - Arguments to find a OverwriteCode
     * @example
     * // Get one OverwriteCode
     * const overwriteCode = await prisma.overwriteCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OverwriteCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, OverwriteCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__OverwriteCodeClient<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OverwriteCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverwriteCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OverwriteCodes
     * const overwriteCodes = await prisma.overwriteCode.findMany()
     * 
     * // Get first 10 OverwriteCodes
     * const overwriteCodes = await prisma.overwriteCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const overwriteCodeWithIdOnly = await prisma.overwriteCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OverwriteCodeFindManyArgs>(args?: SelectSubset<T, OverwriteCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OverwriteCode.
     * @param {OverwriteCodeCreateArgs} args - Arguments to create a OverwriteCode.
     * @example
     * // Create one OverwriteCode
     * const OverwriteCode = await prisma.overwriteCode.create({
     *   data: {
     *     // ... data to create a OverwriteCode
     *   }
     * })
     * 
     */
    create<T extends OverwriteCodeCreateArgs>(args: SelectSubset<T, OverwriteCodeCreateArgs<ExtArgs>>): Prisma__OverwriteCodeClient<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OverwriteCodes.
     * @param {OverwriteCodeCreateManyArgs} args - Arguments to create many OverwriteCodes.
     * @example
     * // Create many OverwriteCodes
     * const overwriteCode = await prisma.overwriteCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OverwriteCodeCreateManyArgs>(args?: SelectSubset<T, OverwriteCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OverwriteCodes and returns the data saved in the database.
     * @param {OverwriteCodeCreateManyAndReturnArgs} args - Arguments to create many OverwriteCodes.
     * @example
     * // Create many OverwriteCodes
     * const overwriteCode = await prisma.overwriteCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OverwriteCodes and only return the `id`
     * const overwriteCodeWithIdOnly = await prisma.overwriteCode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OverwriteCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, OverwriteCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OverwriteCode.
     * @param {OverwriteCodeDeleteArgs} args - Arguments to delete one OverwriteCode.
     * @example
     * // Delete one OverwriteCode
     * const OverwriteCode = await prisma.overwriteCode.delete({
     *   where: {
     *     // ... filter to delete one OverwriteCode
     *   }
     * })
     * 
     */
    delete<T extends OverwriteCodeDeleteArgs>(args: SelectSubset<T, OverwriteCodeDeleteArgs<ExtArgs>>): Prisma__OverwriteCodeClient<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OverwriteCode.
     * @param {OverwriteCodeUpdateArgs} args - Arguments to update one OverwriteCode.
     * @example
     * // Update one OverwriteCode
     * const overwriteCode = await prisma.overwriteCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OverwriteCodeUpdateArgs>(args: SelectSubset<T, OverwriteCodeUpdateArgs<ExtArgs>>): Prisma__OverwriteCodeClient<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OverwriteCodes.
     * @param {OverwriteCodeDeleteManyArgs} args - Arguments to filter OverwriteCodes to delete.
     * @example
     * // Delete a few OverwriteCodes
     * const { count } = await prisma.overwriteCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OverwriteCodeDeleteManyArgs>(args?: SelectSubset<T, OverwriteCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OverwriteCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverwriteCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OverwriteCodes
     * const overwriteCode = await prisma.overwriteCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OverwriteCodeUpdateManyArgs>(args: SelectSubset<T, OverwriteCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OverwriteCodes and returns the data updated in the database.
     * @param {OverwriteCodeUpdateManyAndReturnArgs} args - Arguments to update many OverwriteCodes.
     * @example
     * // Update many OverwriteCodes
     * const overwriteCode = await prisma.overwriteCode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OverwriteCodes and only return the `id`
     * const overwriteCodeWithIdOnly = await prisma.overwriteCode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OverwriteCodeUpdateManyAndReturnArgs>(args: SelectSubset<T, OverwriteCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OverwriteCode.
     * @param {OverwriteCodeUpsertArgs} args - Arguments to update or create a OverwriteCode.
     * @example
     * // Update or create a OverwriteCode
     * const overwriteCode = await prisma.overwriteCode.upsert({
     *   create: {
     *     // ... data to create a OverwriteCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OverwriteCode we want to update
     *   }
     * })
     */
    upsert<T extends OverwriteCodeUpsertArgs>(args: SelectSubset<T, OverwriteCodeUpsertArgs<ExtArgs>>): Prisma__OverwriteCodeClient<$Result.GetResult<Prisma.$OverwriteCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OverwriteCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverwriteCodeCountArgs} args - Arguments to filter OverwriteCodes to count.
     * @example
     * // Count the number of OverwriteCodes
     * const count = await prisma.overwriteCode.count({
     *   where: {
     *     // ... the filter for the OverwriteCodes we want to count
     *   }
     * })
    **/
    count<T extends OverwriteCodeCountArgs>(
      args?: Subset<T, OverwriteCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OverwriteCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OverwriteCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverwriteCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OverwriteCodeAggregateArgs>(args: Subset<T, OverwriteCodeAggregateArgs>): Prisma.PrismaPromise<GetOverwriteCodeAggregateType<T>>

    /**
     * Group by OverwriteCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OverwriteCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OverwriteCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OverwriteCodeGroupByArgs['orderBy'] }
        : { orderBy?: OverwriteCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OverwriteCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOverwriteCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OverwriteCode model
   */
  readonly fields: OverwriteCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OverwriteCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OverwriteCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usedBy<T extends OverwriteCode$usedByArgs<ExtArgs> = {}>(args?: Subset<T, OverwriteCode$usedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    units<T extends OverwriteCode$unitsArgs<ExtArgs> = {}>(args?: Subset<T, OverwriteCode$unitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OverwriteCode model
   */
  interface OverwriteCodeFieldRefs {
    readonly id: FieldRef<"OverwriteCode", 'Int'>
    readonly code: FieldRef<"OverwriteCode", 'String'>
    readonly expiresAt: FieldRef<"OverwriteCode", 'DateTime'>
    readonly used: FieldRef<"OverwriteCode", 'Boolean'>
    readonly usedById: FieldRef<"OverwriteCode", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * OverwriteCode findUnique
   */
  export type OverwriteCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
    /**
     * Filter, which OverwriteCode to fetch.
     */
    where: OverwriteCodeWhereUniqueInput
  }

  /**
   * OverwriteCode findUniqueOrThrow
   */
  export type OverwriteCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
    /**
     * Filter, which OverwriteCode to fetch.
     */
    where: OverwriteCodeWhereUniqueInput
  }

  /**
   * OverwriteCode findFirst
   */
  export type OverwriteCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
    /**
     * Filter, which OverwriteCode to fetch.
     */
    where?: OverwriteCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OverwriteCodes to fetch.
     */
    orderBy?: OverwriteCodeOrderByWithRelationInput | OverwriteCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OverwriteCodes.
     */
    cursor?: OverwriteCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OverwriteCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OverwriteCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OverwriteCodes.
     */
    distinct?: OverwriteCodeScalarFieldEnum | OverwriteCodeScalarFieldEnum[]
  }

  /**
   * OverwriteCode findFirstOrThrow
   */
  export type OverwriteCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
    /**
     * Filter, which OverwriteCode to fetch.
     */
    where?: OverwriteCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OverwriteCodes to fetch.
     */
    orderBy?: OverwriteCodeOrderByWithRelationInput | OverwriteCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OverwriteCodes.
     */
    cursor?: OverwriteCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OverwriteCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OverwriteCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OverwriteCodes.
     */
    distinct?: OverwriteCodeScalarFieldEnum | OverwriteCodeScalarFieldEnum[]
  }

  /**
   * OverwriteCode findMany
   */
  export type OverwriteCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
    /**
     * Filter, which OverwriteCodes to fetch.
     */
    where?: OverwriteCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OverwriteCodes to fetch.
     */
    orderBy?: OverwriteCodeOrderByWithRelationInput | OverwriteCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OverwriteCodes.
     */
    cursor?: OverwriteCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OverwriteCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OverwriteCodes.
     */
    skip?: number
    distinct?: OverwriteCodeScalarFieldEnum | OverwriteCodeScalarFieldEnum[]
  }

  /**
   * OverwriteCode create
   */
  export type OverwriteCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a OverwriteCode.
     */
    data: XOR<OverwriteCodeCreateInput, OverwriteCodeUncheckedCreateInput>
  }

  /**
   * OverwriteCode createMany
   */
  export type OverwriteCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OverwriteCodes.
     */
    data: OverwriteCodeCreateManyInput | OverwriteCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OverwriteCode createManyAndReturn
   */
  export type OverwriteCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * The data used to create many OverwriteCodes.
     */
    data: OverwriteCodeCreateManyInput | OverwriteCodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OverwriteCode update
   */
  export type OverwriteCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a OverwriteCode.
     */
    data: XOR<OverwriteCodeUpdateInput, OverwriteCodeUncheckedUpdateInput>
    /**
     * Choose, which OverwriteCode to update.
     */
    where: OverwriteCodeWhereUniqueInput
  }

  /**
   * OverwriteCode updateMany
   */
  export type OverwriteCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OverwriteCodes.
     */
    data: XOR<OverwriteCodeUpdateManyMutationInput, OverwriteCodeUncheckedUpdateManyInput>
    /**
     * Filter which OverwriteCodes to update
     */
    where?: OverwriteCodeWhereInput
    /**
     * Limit how many OverwriteCodes to update.
     */
    limit?: number
  }

  /**
   * OverwriteCode updateManyAndReturn
   */
  export type OverwriteCodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * The data used to update OverwriteCodes.
     */
    data: XOR<OverwriteCodeUpdateManyMutationInput, OverwriteCodeUncheckedUpdateManyInput>
    /**
     * Filter which OverwriteCodes to update
     */
    where?: OverwriteCodeWhereInput
    /**
     * Limit how many OverwriteCodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OverwriteCode upsert
   */
  export type OverwriteCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the OverwriteCode to update in case it exists.
     */
    where: OverwriteCodeWhereUniqueInput
    /**
     * In case the OverwriteCode found by the `where` argument doesn't exist, create a new OverwriteCode with this data.
     */
    create: XOR<OverwriteCodeCreateInput, OverwriteCodeUncheckedCreateInput>
    /**
     * In case the OverwriteCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OverwriteCodeUpdateInput, OverwriteCodeUncheckedUpdateInput>
  }

  /**
   * OverwriteCode delete
   */
  export type OverwriteCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
    /**
     * Filter which OverwriteCode to delete.
     */
    where: OverwriteCodeWhereUniqueInput
  }

  /**
   * OverwriteCode deleteMany
   */
  export type OverwriteCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OverwriteCodes to delete
     */
    where?: OverwriteCodeWhereInput
    /**
     * Limit how many OverwriteCodes to delete.
     */
    limit?: number
  }

  /**
   * OverwriteCode.usedBy
   */
  export type OverwriteCode$usedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * OverwriteCode.units
   */
  export type OverwriteCode$unitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    where?: UnitWhereInput
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    cursor?: UnitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * OverwriteCode without action
   */
  export type OverwriteCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OverwriteCode
     */
    select?: OverwriteCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OverwriteCode
     */
    omit?: OverwriteCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OverwriteCodeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    name: 'name',
    dob: 'dob',
    currencyCode: 'currencyCode',
    password: 'password',
    salt: 'salt',
    plaidLinkToken: 'plaidLinkToken',
    title: 'title',
    avatar: 'avatar',
    phone: 'phone',
    website: 'website',
    company: 'company',
    bio: 'bio',
    status: 'status',
    role: 'role',
    street: 'street',
    city: 'city',
    state: 'state',
    zip: 'zip',
    country: 'country'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TenantScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    civilStatus: 'civilStatus',
    occupation: 'occupation',
    income: 'income',
    creditScore: 'creditScore',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const TokenScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    type: 'type',
    emailToken: 'emailToken',
    valid: 'valid',
    expiration: 'expiration',
    userId: 'userId'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const RealEstateObjectScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    title: 'title',
    description: 'description',
    lotSize: 'lotSize',
    yearBuilt: 'yearBuilt',
    realEstateType: 'realEstateType',
    marketPrice: 'marketPrice',
    currency: 'currency',
    street: 'street',
    city: 'city',
    state: 'state',
    zip: 'zip',
    country: 'country'
  };

  export type RealEstateObjectScalarFieldEnum = (typeof RealEstateObjectScalarFieldEnum)[keyof typeof RealEstateObjectScalarFieldEnum]


  export const AmenityScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    description: 'description',
    category: 'category'
  };

  export type AmenityScalarFieldEnum = (typeof AmenityScalarFieldEnum)[keyof typeof AmenityScalarFieldEnum]


  export const AmenitiesOnRealEstateScalarFieldEnum: {
    amenityId: 'amenityId',
    realEstateObjectId: 'realEstateObjectId',
    assignedAt: 'assignedAt',
    assignedBy: 'assignedBy',
    unitId: 'unitId'
  };

  export type AmenitiesOnRealEstateScalarFieldEnum = (typeof AmenitiesOnRealEstateScalarFieldEnum)[keyof typeof AmenitiesOnRealEstateScalarFieldEnum]


  export const PreferenceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    enabled: 'enabled'
  };

  export type PreferenceScalarFieldEnum = (typeof PreferenceScalarFieldEnum)[keyof typeof PreferenceScalarFieldEnum]


  export const PreferencesOnRealEstateScalarFieldEnum: {
    preferenceId: 'preferenceId',
    realEstateObjectId: 'realEstateObjectId',
    assignedAt: 'assignedAt',
    assignedBy: 'assignedBy'
  };

  export type PreferencesOnRealEstateScalarFieldEnum = (typeof PreferencesOnRealEstateScalarFieldEnum)[keyof typeof PreferencesOnRealEstateScalarFieldEnum]


  export const UnitScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    unitIdentifier: 'unitIdentifier',
    unitNumber: 'unitNumber',
    floor: 'floor',
    unitSize: 'unitSize',
    numOfFloors: 'numOfFloors',
    numOfRooms: 'numOfRooms',
    numOfBedrooms: 'numOfBedrooms',
    numOfBathrooms: 'numOfBathrooms',
    garages: 'garages',
    rentalPrice: 'rentalPrice',
    currency: 'currency',
    status: 'status',
    realEstateObjectId: 'realEstateObjectId',
    tenantId: 'tenantId'
  };

  export type UnitScalarFieldEnum = (typeof UnitScalarFieldEnum)[keyof typeof UnitScalarFieldEnum]


  export const LeaseScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    startDate: 'startDate',
    endDate: 'endDate',
    rentalPrice: 'rentalPrice',
    status: 'status',
    paymentFrequency: 'paymentFrequency',
    notes: 'notes',
    specialTerms: 'specialTerms',
    currency: 'currency',
    totalRentDue: 'totalRentDue',
    rentPaid: 'rentPaid',
    tenantId: 'tenantId',
    unitId: 'unitId'
  };

  export type LeaseScalarFieldEnum = (typeof LeaseScalarFieldEnum)[keyof typeof LeaseScalarFieldEnum]


  export const LeasePaymentScheduleScalarFieldEnum: {
    createdAt: 'createdAt',
    id: 'id',
    dueDate: 'dueDate',
    amountDue: 'amountDue',
    status: 'status',
    leaseId: 'leaseId'
  };

  export type LeasePaymentScheduleScalarFieldEnum = (typeof LeasePaymentScheduleScalarFieldEnum)[keyof typeof LeasePaymentScheduleScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    realEstateObjectId: 'realEstateObjectId',
    unitId: 'unitId',
    userId: 'userId'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    documentType: 'documentType',
    filePath: 'filePath',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    realEstateObjectId: 'realEstateObjectId',
    leaseId: 'leaseId',
    unitId: 'unitId'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    type: 'type',
    timestamp: 'timestamp',
    senderId: 'senderId',
    receiverId: 'receiverId'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const MaintenanceRequestScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    resolvedAt: 'resolvedAt',
    title: 'title',
    status: 'status',
    priority: 'priority',
    ownerId: 'ownerId',
    tenantId: 'tenantId',
    notes: 'notes',
    category: 'category',
    categoryOther: 'categoryOther',
    pendingTagRequest: 'pendingTagRequest',
    isHOAIssue: 'isHOAIssue',
    attachments: 'attachments',
    repairCost: 'repairCost',
    invoiceUrl: 'invoiceUrl',
    vendorId: 'vendorId',
    vendorAccepted: 'vendorAccepted',
    vendorRespondedAt: 'vendorRespondedAt',
    lastNotificationAt: 'lastNotificationAt',
    reporterId: 'reporterId',
    unitId: 'unitId'
  };

  export type MaintenanceRequestScalarFieldEnum = (typeof MaintenanceRequestScalarFieldEnum)[keyof typeof MaintenanceRequestScalarFieldEnum]


  export const ExpenseScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    title: 'title',
    description: 'description',
    amount: 'amount',
    currency: 'currency',
    date: 'date',
    category: 'category',
    status: 'status',
    notes: 'notes',
    unitId: 'unitId',
    leaseId: 'leaseId',
    maintenanceRequestId: 'maintenanceRequestId'
  };

  export type ExpenseScalarFieldEnum = (typeof ExpenseScalarFieldEnum)[keyof typeof ExpenseScalarFieldEnum]


  export const RentPaymentScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    amount: 'amount',
    currency: 'currency',
    date: 'date',
    status: 'status',
    notes: 'notes',
    paymentMethod: 'paymentMethod',
    submittedBy: 'submittedBy',
    submissionDate: 'submissionDate',
    approvalDate: 'approvalDate',
    leaseId: 'leaseId',
    tenantId: 'tenantId'
  };

  export type RentPaymentScalarFieldEnum = (typeof RentPaymentScalarFieldEnum)[keyof typeof RentPaymentScalarFieldEnum]


  export const ContactRequestScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    email: 'email',
    boardPositions: 'boardPositions',
    communityName: 'communityName',
    communityLocation: 'communityLocation',
    communityDescription: 'communityDescription',
    referralSource: 'referralSource',
    numberOfUnits: 'numberOfUnits',
    propertyType: 'propertyType'
  };

  export type ContactRequestScalarFieldEnum = (typeof ContactRequestScalarFieldEnum)[keyof typeof ContactRequestScalarFieldEnum]


  export const WhitelistedUserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type WhitelistedUserScalarFieldEnum = (typeof WhitelistedUserScalarFieldEnum)[keyof typeof WhitelistedUserScalarFieldEnum]


  export const VendorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    createdAt: 'createdAt'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  export const LinkedRequestScalarFieldEnum: {
    requestAId: 'requestAId',
    requestBId: 'requestBId'
  };

  export type LinkedRequestScalarFieldEnum = (typeof LinkedRequestScalarFieldEnum)[keyof typeof LinkedRequestScalarFieldEnum]


  export const OverwriteCodeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    expiresAt: 'expiresAt',
    used: 'used',
    usedById: 'usedById'
  };

  export type OverwriteCodeScalarFieldEnum = (typeof OverwriteCodeScalarFieldEnum)[keyof typeof OverwriteCodeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'CurrencyCode'
   */
  export type EnumCurrencyCodeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CurrencyCode'>
    


  /**
   * Reference to a field of type 'CurrencyCode[]'
   */
  export type ListEnumCurrencyCodeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CurrencyCode[]'>
    


  /**
   * Reference to a field of type 'AccountStatus'
   */
  export type EnumAccountStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountStatus'>
    


  /**
   * Reference to a field of type 'AccountStatus[]'
   */
  export type ListEnumAccountStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountStatus[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'CivilStatus'
   */
  export type EnumCivilStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CivilStatus'>
    


  /**
   * Reference to a field of type 'CivilStatus[]'
   */
  export type ListEnumCivilStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CivilStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'TokenType'
   */
  export type EnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType'>
    


  /**
   * Reference to a field of type 'TokenType[]'
   */
  export type ListEnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'RealEstateType'
   */
  export type EnumRealEstateTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RealEstateType'>
    


  /**
   * Reference to a field of type 'RealEstateType[]'
   */
  export type ListEnumRealEstateTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RealEstateType[]'>
    


  /**
   * Reference to a field of type 'AmenityCategory'
   */
  export type EnumAmenityCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AmenityCategory'>
    


  /**
   * Reference to a field of type 'AmenityCategory[]'
   */
  export type ListEnumAmenityCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AmenityCategory[]'>
    


  /**
   * Reference to a field of type 'ListingStatus'
   */
  export type EnumListingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ListingStatus'>
    


  /**
   * Reference to a field of type 'ListingStatus[]'
   */
  export type ListEnumListingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ListingStatus[]'>
    


  /**
   * Reference to a field of type 'LeaseStatus'
   */
  export type EnumLeaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeaseStatus'>
    


  /**
   * Reference to a field of type 'LeaseStatus[]'
   */
  export type ListEnumLeaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeaseStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentFrequency'
   */
  export type EnumPaymentFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentFrequency'>
    


  /**
   * Reference to a field of type 'PaymentFrequency[]'
   */
  export type ListEnumPaymentFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentFrequency[]'>
    


  /**
   * Reference to a field of type 'PaymentScheduleStatus'
   */
  export type EnumPaymentScheduleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentScheduleStatus'>
    


  /**
   * Reference to a field of type 'PaymentScheduleStatus[]'
   */
  export type ListEnumPaymentScheduleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentScheduleStatus[]'>
    


  /**
   * Reference to a field of type 'DocumentType'
   */
  export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


  /**
   * Reference to a field of type 'DocumentType[]'
   */
  export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'MaintenanceStatus'
   */
  export type EnumMaintenanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceStatus'>
    


  /**
   * Reference to a field of type 'MaintenanceStatus[]'
   */
  export type ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceStatus[]'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    email?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    currencyCode?: EnumCurrencyCodeNullableFilter<"User"> | $Enums.CurrencyCode | null
    password?: StringFilter<"User"> | string
    salt?: StringFilter<"User"> | string
    plaidLinkToken?: StringNullableFilter<"User"> | string | null
    title?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    website?: StringNullableFilter<"User"> | string | null
    company?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    status?: EnumAccountStatusFilter<"User"> | $Enums.AccountStatus
    role?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
    street?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    state?: StringNullableFilter<"User"> | string | null
    zip?: StringNullableFilter<"User"> | string | null
    country?: StringNullableFilter<"User"> | string | null
    tokens?: TokenListRelationFilter
    documents?: DocumentListRelationFilter
    images?: ImageListRelationFilter
    sentMessages?: MessageListRelationFilter
    receivedMessages?: MessageListRelationFilter
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    maintenanceRequests?: MaintenanceRequestListRelationFilter
    ownedUnits?: UnitListRelationFilter
    usedCodes?: OverwriteCodeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    currencyCode?: SortOrderInput | SortOrder
    password?: SortOrder
    salt?: SortOrder
    plaidLinkToken?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    status?: SortOrder
    role?: SortOrderInput | SortOrder
    street?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zip?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    tokens?: TokenOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    images?: ImageOrderByRelationAggregateInput
    sentMessages?: MessageOrderByRelationAggregateInput
    receivedMessages?: MessageOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
    maintenanceRequests?: MaintenanceRequestOrderByRelationAggregateInput
    ownedUnits?: UnitOrderByRelationAggregateInput
    usedCodes?: OverwriteCodeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    currencyCode?: EnumCurrencyCodeNullableFilter<"User"> | $Enums.CurrencyCode | null
    password?: StringFilter<"User"> | string
    salt?: StringFilter<"User"> | string
    plaidLinkToken?: StringNullableFilter<"User"> | string | null
    title?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    website?: StringNullableFilter<"User"> | string | null
    company?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    status?: EnumAccountStatusFilter<"User"> | $Enums.AccountStatus
    role?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
    street?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    state?: StringNullableFilter<"User"> | string | null
    zip?: StringNullableFilter<"User"> | string | null
    country?: StringNullableFilter<"User"> | string | null
    tokens?: TokenListRelationFilter
    documents?: DocumentListRelationFilter
    images?: ImageListRelationFilter
    sentMessages?: MessageListRelationFilter
    receivedMessages?: MessageListRelationFilter
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    maintenanceRequests?: MaintenanceRequestListRelationFilter
    ownedUnits?: UnitListRelationFilter
    usedCodes?: OverwriteCodeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    currencyCode?: SortOrderInput | SortOrder
    password?: SortOrder
    salt?: SortOrder
    plaidLinkToken?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    status?: SortOrder
    role?: SortOrderInput | SortOrder
    street?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zip?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    dob?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    currencyCode?: EnumCurrencyCodeNullableWithAggregatesFilter<"User"> | $Enums.CurrencyCode | null
    password?: StringWithAggregatesFilter<"User"> | string
    salt?: StringWithAggregatesFilter<"User"> | string
    plaidLinkToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    title?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    website?: StringNullableWithAggregatesFilter<"User"> | string | null
    company?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    status?: EnumAccountStatusWithAggregatesFilter<"User"> | $Enums.AccountStatus
    role?: EnumUserRoleNullableWithAggregatesFilter<"User"> | $Enums.UserRole | null
    street?: StringNullableWithAggregatesFilter<"User"> | string | null
    city?: StringNullableWithAggregatesFilter<"User"> | string | null
    state?: StringNullableWithAggregatesFilter<"User"> | string | null
    zip?: StringNullableWithAggregatesFilter<"User"> | string | null
    country?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: IntFilter<"Tenant"> | number
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    civilStatus?: EnumCivilStatusNullableFilter<"Tenant"> | $Enums.CivilStatus | null
    occupation?: StringNullableFilter<"Tenant"> | string | null
    income?: FloatNullableFilter<"Tenant"> | number | null
    creditScore?: IntNullableFilter<"Tenant"> | number | null
    userId?: IntNullableFilter<"Tenant"> | number | null
    firstName?: StringNullableFilter<"Tenant"> | string | null
    lastName?: StringNullableFilter<"Tenant"> | string | null
    email?: StringNullableFilter<"Tenant"> | string | null
    phone?: StringNullableFilter<"Tenant"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    leases?: LeaseListRelationFilter
    maintenanceRequests?: MaintenanceRequestListRelationFilter
    rentPayments?: RentPaymentListRelationFilter
    unit?: UnitListRelationFilter
    MaintenanceRequest?: MaintenanceRequestListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    civilStatus?: SortOrderInput | SortOrder
    occupation?: SortOrderInput | SortOrder
    income?: SortOrderInput | SortOrder
    creditScore?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    leases?: LeaseOrderByRelationAggregateInput
    maintenanceRequests?: MaintenanceRequestOrderByRelationAggregateInput
    rentPayments?: RentPaymentOrderByRelationAggregateInput
    unit?: UnitOrderByRelationAggregateInput
    MaintenanceRequest?: MaintenanceRequestOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    email?: string
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    civilStatus?: EnumCivilStatusNullableFilter<"Tenant"> | $Enums.CivilStatus | null
    occupation?: StringNullableFilter<"Tenant"> | string | null
    income?: FloatNullableFilter<"Tenant"> | number | null
    creditScore?: IntNullableFilter<"Tenant"> | number | null
    firstName?: StringNullableFilter<"Tenant"> | string | null
    lastName?: StringNullableFilter<"Tenant"> | string | null
    phone?: StringNullableFilter<"Tenant"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    leases?: LeaseListRelationFilter
    maintenanceRequests?: MaintenanceRequestListRelationFilter
    rentPayments?: RentPaymentListRelationFilter
    unit?: UnitListRelationFilter
    MaintenanceRequest?: MaintenanceRequestListRelationFilter
  }, "id" | "userId" | "email">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    civilStatus?: SortOrderInput | SortOrder
    occupation?: SortOrderInput | SortOrder
    income?: SortOrderInput | SortOrder
    creditScore?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    _count?: TenantCountOrderByAggregateInput
    _avg?: TenantAvgOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
    _sum?: TenantSumOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tenant"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    civilStatus?: EnumCivilStatusNullableWithAggregatesFilter<"Tenant"> | $Enums.CivilStatus | null
    occupation?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    income?: FloatNullableWithAggregatesFilter<"Tenant"> | number | null
    creditScore?: IntNullableWithAggregatesFilter<"Tenant"> | number | null
    userId?: IntNullableWithAggregatesFilter<"Tenant"> | number | null
    firstName?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    email?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
  }

  export type TokenWhereInput = {
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    id?: IntFilter<"Token"> | number
    createdAt?: DateTimeFilter<"Token"> | Date | string
    updatedAt?: DateTimeFilter<"Token"> | Date | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    emailToken?: StringNullableFilter<"Token"> | string | null
    valid?: BoolFilter<"Token"> | boolean
    expiration?: DateTimeFilter<"Token"> | Date | string
    userId?: IntFilter<"Token"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    emailToken?: SortOrderInput | SortOrder
    valid?: SortOrder
    expiration?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    emailToken?: string
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    createdAt?: DateTimeFilter<"Token"> | Date | string
    updatedAt?: DateTimeFilter<"Token"> | Date | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    valid?: BoolFilter<"Token"> | boolean
    expiration?: DateTimeFilter<"Token"> | Date | string
    userId?: IntFilter<"Token"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "emailToken">

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    emailToken?: SortOrderInput | SortOrder
    valid?: SortOrder
    expiration?: SortOrder
    userId?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _avg?: TokenAvgOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
    _sum?: TokenSumOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    OR?: TokenScalarWhereWithAggregatesInput[]
    NOT?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Token"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Token"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Token"> | Date | string
    type?: EnumTokenTypeWithAggregatesFilter<"Token"> | $Enums.TokenType
    emailToken?: StringNullableWithAggregatesFilter<"Token"> | string | null
    valid?: BoolWithAggregatesFilter<"Token"> | boolean
    expiration?: DateTimeWithAggregatesFilter<"Token"> | Date | string
    userId?: IntWithAggregatesFilter<"Token"> | number
  }

  export type RealEstateObjectWhereInput = {
    AND?: RealEstateObjectWhereInput | RealEstateObjectWhereInput[]
    OR?: RealEstateObjectWhereInput[]
    NOT?: RealEstateObjectWhereInput | RealEstateObjectWhereInput[]
    id?: IntFilter<"RealEstateObject"> | number
    createdAt?: DateTimeFilter<"RealEstateObject"> | Date | string
    updatedAt?: DateTimeFilter<"RealEstateObject"> | Date | string
    title?: StringNullableFilter<"RealEstateObject"> | string | null
    description?: StringNullableFilter<"RealEstateObject"> | string | null
    lotSize?: FloatNullableFilter<"RealEstateObject"> | number | null
    yearBuilt?: IntNullableFilter<"RealEstateObject"> | number | null
    realEstateType?: EnumRealEstateTypeNullableFilter<"RealEstateObject"> | $Enums.RealEstateType | null
    marketPrice?: FloatNullableFilter<"RealEstateObject"> | number | null
    currency?: EnumCurrencyCodeNullableFilter<"RealEstateObject"> | $Enums.CurrencyCode | null
    street?: StringNullableFilter<"RealEstateObject"> | string | null
    city?: StringNullableFilter<"RealEstateObject"> | string | null
    state?: StringNullableFilter<"RealEstateObject"> | string | null
    zip?: StringNullableFilter<"RealEstateObject"> | string | null
    country?: StringNullableFilter<"RealEstateObject"> | string | null
    images?: ImageListRelationFilter
    amenities?: AmenitiesOnRealEstateListRelationFilter
    preferences?: PreferencesOnRealEstateListRelationFilter
    documents?: DocumentListRelationFilter
    units?: UnitListRelationFilter
  }

  export type RealEstateObjectOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    lotSize?: SortOrderInput | SortOrder
    yearBuilt?: SortOrderInput | SortOrder
    realEstateType?: SortOrderInput | SortOrder
    marketPrice?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    street?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zip?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    images?: ImageOrderByRelationAggregateInput
    amenities?: AmenitiesOnRealEstateOrderByRelationAggregateInput
    preferences?: PreferencesOnRealEstateOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    units?: UnitOrderByRelationAggregateInput
  }

  export type RealEstateObjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RealEstateObjectWhereInput | RealEstateObjectWhereInput[]
    OR?: RealEstateObjectWhereInput[]
    NOT?: RealEstateObjectWhereInput | RealEstateObjectWhereInput[]
    createdAt?: DateTimeFilter<"RealEstateObject"> | Date | string
    updatedAt?: DateTimeFilter<"RealEstateObject"> | Date | string
    title?: StringNullableFilter<"RealEstateObject"> | string | null
    description?: StringNullableFilter<"RealEstateObject"> | string | null
    lotSize?: FloatNullableFilter<"RealEstateObject"> | number | null
    yearBuilt?: IntNullableFilter<"RealEstateObject"> | number | null
    realEstateType?: EnumRealEstateTypeNullableFilter<"RealEstateObject"> | $Enums.RealEstateType | null
    marketPrice?: FloatNullableFilter<"RealEstateObject"> | number | null
    currency?: EnumCurrencyCodeNullableFilter<"RealEstateObject"> | $Enums.CurrencyCode | null
    street?: StringNullableFilter<"RealEstateObject"> | string | null
    city?: StringNullableFilter<"RealEstateObject"> | string | null
    state?: StringNullableFilter<"RealEstateObject"> | string | null
    zip?: StringNullableFilter<"RealEstateObject"> | string | null
    country?: StringNullableFilter<"RealEstateObject"> | string | null
    images?: ImageListRelationFilter
    amenities?: AmenitiesOnRealEstateListRelationFilter
    preferences?: PreferencesOnRealEstateListRelationFilter
    documents?: DocumentListRelationFilter
    units?: UnitListRelationFilter
  }, "id">

  export type RealEstateObjectOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    lotSize?: SortOrderInput | SortOrder
    yearBuilt?: SortOrderInput | SortOrder
    realEstateType?: SortOrderInput | SortOrder
    marketPrice?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    street?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zip?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    _count?: RealEstateObjectCountOrderByAggregateInput
    _avg?: RealEstateObjectAvgOrderByAggregateInput
    _max?: RealEstateObjectMaxOrderByAggregateInput
    _min?: RealEstateObjectMinOrderByAggregateInput
    _sum?: RealEstateObjectSumOrderByAggregateInput
  }

  export type RealEstateObjectScalarWhereWithAggregatesInput = {
    AND?: RealEstateObjectScalarWhereWithAggregatesInput | RealEstateObjectScalarWhereWithAggregatesInput[]
    OR?: RealEstateObjectScalarWhereWithAggregatesInput[]
    NOT?: RealEstateObjectScalarWhereWithAggregatesInput | RealEstateObjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RealEstateObject"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RealEstateObject"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RealEstateObject"> | Date | string
    title?: StringNullableWithAggregatesFilter<"RealEstateObject"> | string | null
    description?: StringNullableWithAggregatesFilter<"RealEstateObject"> | string | null
    lotSize?: FloatNullableWithAggregatesFilter<"RealEstateObject"> | number | null
    yearBuilt?: IntNullableWithAggregatesFilter<"RealEstateObject"> | number | null
    realEstateType?: EnumRealEstateTypeNullableWithAggregatesFilter<"RealEstateObject"> | $Enums.RealEstateType | null
    marketPrice?: FloatNullableWithAggregatesFilter<"RealEstateObject"> | number | null
    currency?: EnumCurrencyCodeNullableWithAggregatesFilter<"RealEstateObject"> | $Enums.CurrencyCode | null
    street?: StringNullableWithAggregatesFilter<"RealEstateObject"> | string | null
    city?: StringNullableWithAggregatesFilter<"RealEstateObject"> | string | null
    state?: StringNullableWithAggregatesFilter<"RealEstateObject"> | string | null
    zip?: StringNullableWithAggregatesFilter<"RealEstateObject"> | string | null
    country?: StringNullableWithAggregatesFilter<"RealEstateObject"> | string | null
  }

  export type AmenityWhereInput = {
    AND?: AmenityWhereInput | AmenityWhereInput[]
    OR?: AmenityWhereInput[]
    NOT?: AmenityWhereInput | AmenityWhereInput[]
    id?: IntFilter<"Amenity"> | number
    createdAt?: DateTimeFilter<"Amenity"> | Date | string
    updatedAt?: DateTimeFilter<"Amenity"> | Date | string
    name?: StringFilter<"Amenity"> | string
    description?: StringNullableFilter<"Amenity"> | string | null
    category?: EnumAmenityCategoryNullableFilter<"Amenity"> | $Enums.AmenityCategory | null
    realEstateObjects?: AmenitiesOnRealEstateListRelationFilter
  }

  export type AmenityOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    realEstateObjects?: AmenitiesOnRealEstateOrderByRelationAggregateInput
  }

  export type AmenityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: AmenityWhereInput | AmenityWhereInput[]
    OR?: AmenityWhereInput[]
    NOT?: AmenityWhereInput | AmenityWhereInput[]
    createdAt?: DateTimeFilter<"Amenity"> | Date | string
    updatedAt?: DateTimeFilter<"Amenity"> | Date | string
    description?: StringNullableFilter<"Amenity"> | string | null
    category?: EnumAmenityCategoryNullableFilter<"Amenity"> | $Enums.AmenityCategory | null
    realEstateObjects?: AmenitiesOnRealEstateListRelationFilter
  }, "id" | "name">

  export type AmenityOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    _count?: AmenityCountOrderByAggregateInput
    _avg?: AmenityAvgOrderByAggregateInput
    _max?: AmenityMaxOrderByAggregateInput
    _min?: AmenityMinOrderByAggregateInput
    _sum?: AmenitySumOrderByAggregateInput
  }

  export type AmenityScalarWhereWithAggregatesInput = {
    AND?: AmenityScalarWhereWithAggregatesInput | AmenityScalarWhereWithAggregatesInput[]
    OR?: AmenityScalarWhereWithAggregatesInput[]
    NOT?: AmenityScalarWhereWithAggregatesInput | AmenityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Amenity"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Amenity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Amenity"> | Date | string
    name?: StringWithAggregatesFilter<"Amenity"> | string
    description?: StringNullableWithAggregatesFilter<"Amenity"> | string | null
    category?: EnumAmenityCategoryNullableWithAggregatesFilter<"Amenity"> | $Enums.AmenityCategory | null
  }

  export type AmenitiesOnRealEstateWhereInput = {
    AND?: AmenitiesOnRealEstateWhereInput | AmenitiesOnRealEstateWhereInput[]
    OR?: AmenitiesOnRealEstateWhereInput[]
    NOT?: AmenitiesOnRealEstateWhereInput | AmenitiesOnRealEstateWhereInput[]
    amenityId?: IntFilter<"AmenitiesOnRealEstate"> | number
    realEstateObjectId?: IntFilter<"AmenitiesOnRealEstate"> | number
    assignedAt?: DateTimeFilter<"AmenitiesOnRealEstate"> | Date | string
    assignedBy?: StringFilter<"AmenitiesOnRealEstate"> | string
    unitId?: IntNullableFilter<"AmenitiesOnRealEstate"> | number | null
    amenity?: XOR<AmenityScalarRelationFilter, AmenityWhereInput>
    realEstateObject?: XOR<RealEstateObjectScalarRelationFilter, RealEstateObjectWhereInput>
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
  }

  export type AmenitiesOnRealEstateOrderByWithRelationInput = {
    amenityId?: SortOrder
    realEstateObjectId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    unitId?: SortOrderInput | SortOrder
    amenity?: AmenityOrderByWithRelationInput
    realEstateObject?: RealEstateObjectOrderByWithRelationInput
    unit?: UnitOrderByWithRelationInput
  }

  export type AmenitiesOnRealEstateWhereUniqueInput = Prisma.AtLeast<{
    amenityId_realEstateObjectId?: AmenitiesOnRealEstateAmenityIdRealEstateObjectIdCompoundUniqueInput
    AND?: AmenitiesOnRealEstateWhereInput | AmenitiesOnRealEstateWhereInput[]
    OR?: AmenitiesOnRealEstateWhereInput[]
    NOT?: AmenitiesOnRealEstateWhereInput | AmenitiesOnRealEstateWhereInput[]
    amenityId?: IntFilter<"AmenitiesOnRealEstate"> | number
    realEstateObjectId?: IntFilter<"AmenitiesOnRealEstate"> | number
    assignedAt?: DateTimeFilter<"AmenitiesOnRealEstate"> | Date | string
    assignedBy?: StringFilter<"AmenitiesOnRealEstate"> | string
    unitId?: IntNullableFilter<"AmenitiesOnRealEstate"> | number | null
    amenity?: XOR<AmenityScalarRelationFilter, AmenityWhereInput>
    realEstateObject?: XOR<RealEstateObjectScalarRelationFilter, RealEstateObjectWhereInput>
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
  }, "amenityId_realEstateObjectId">

  export type AmenitiesOnRealEstateOrderByWithAggregationInput = {
    amenityId?: SortOrder
    realEstateObjectId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    unitId?: SortOrderInput | SortOrder
    _count?: AmenitiesOnRealEstateCountOrderByAggregateInput
    _avg?: AmenitiesOnRealEstateAvgOrderByAggregateInput
    _max?: AmenitiesOnRealEstateMaxOrderByAggregateInput
    _min?: AmenitiesOnRealEstateMinOrderByAggregateInput
    _sum?: AmenitiesOnRealEstateSumOrderByAggregateInput
  }

  export type AmenitiesOnRealEstateScalarWhereWithAggregatesInput = {
    AND?: AmenitiesOnRealEstateScalarWhereWithAggregatesInput | AmenitiesOnRealEstateScalarWhereWithAggregatesInput[]
    OR?: AmenitiesOnRealEstateScalarWhereWithAggregatesInput[]
    NOT?: AmenitiesOnRealEstateScalarWhereWithAggregatesInput | AmenitiesOnRealEstateScalarWhereWithAggregatesInput[]
    amenityId?: IntWithAggregatesFilter<"AmenitiesOnRealEstate"> | number
    realEstateObjectId?: IntWithAggregatesFilter<"AmenitiesOnRealEstate"> | number
    assignedAt?: DateTimeWithAggregatesFilter<"AmenitiesOnRealEstate"> | Date | string
    assignedBy?: StringWithAggregatesFilter<"AmenitiesOnRealEstate"> | string
    unitId?: IntNullableWithAggregatesFilter<"AmenitiesOnRealEstate"> | number | null
  }

  export type PreferenceWhereInput = {
    AND?: PreferenceWhereInput | PreferenceWhereInput[]
    OR?: PreferenceWhereInput[]
    NOT?: PreferenceWhereInput | PreferenceWhereInput[]
    id?: IntFilter<"Preference"> | number
    name?: StringFilter<"Preference"> | string
    enabled?: BoolNullableFilter<"Preference"> | boolean | null
    realEstateObjects?: PreferencesOnRealEstateListRelationFilter
  }

  export type PreferenceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    enabled?: SortOrderInput | SortOrder
    realEstateObjects?: PreferencesOnRealEstateOrderByRelationAggregateInput
  }

  export type PreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: PreferenceWhereInput | PreferenceWhereInput[]
    OR?: PreferenceWhereInput[]
    NOT?: PreferenceWhereInput | PreferenceWhereInput[]
    enabled?: BoolNullableFilter<"Preference"> | boolean | null
    realEstateObjects?: PreferencesOnRealEstateListRelationFilter
  }, "id" | "name">

  export type PreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    enabled?: SortOrderInput | SortOrder
    _count?: PreferenceCountOrderByAggregateInput
    _avg?: PreferenceAvgOrderByAggregateInput
    _max?: PreferenceMaxOrderByAggregateInput
    _min?: PreferenceMinOrderByAggregateInput
    _sum?: PreferenceSumOrderByAggregateInput
  }

  export type PreferenceScalarWhereWithAggregatesInput = {
    AND?: PreferenceScalarWhereWithAggregatesInput | PreferenceScalarWhereWithAggregatesInput[]
    OR?: PreferenceScalarWhereWithAggregatesInput[]
    NOT?: PreferenceScalarWhereWithAggregatesInput | PreferenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Preference"> | number
    name?: StringWithAggregatesFilter<"Preference"> | string
    enabled?: BoolNullableWithAggregatesFilter<"Preference"> | boolean | null
  }

  export type PreferencesOnRealEstateWhereInput = {
    AND?: PreferencesOnRealEstateWhereInput | PreferencesOnRealEstateWhereInput[]
    OR?: PreferencesOnRealEstateWhereInput[]
    NOT?: PreferencesOnRealEstateWhereInput | PreferencesOnRealEstateWhereInput[]
    preferenceId?: IntFilter<"PreferencesOnRealEstate"> | number
    realEstateObjectId?: IntFilter<"PreferencesOnRealEstate"> | number
    assignedAt?: DateTimeFilter<"PreferencesOnRealEstate"> | Date | string
    assignedBy?: StringFilter<"PreferencesOnRealEstate"> | string
    preference?: XOR<PreferenceScalarRelationFilter, PreferenceWhereInput>
    realEstateObject?: XOR<RealEstateObjectScalarRelationFilter, RealEstateObjectWhereInput>
  }

  export type PreferencesOnRealEstateOrderByWithRelationInput = {
    preferenceId?: SortOrder
    realEstateObjectId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    preference?: PreferenceOrderByWithRelationInput
    realEstateObject?: RealEstateObjectOrderByWithRelationInput
  }

  export type PreferencesOnRealEstateWhereUniqueInput = Prisma.AtLeast<{
    preferenceId_realEstateObjectId?: PreferencesOnRealEstatePreferenceIdRealEstateObjectIdCompoundUniqueInput
    AND?: PreferencesOnRealEstateWhereInput | PreferencesOnRealEstateWhereInput[]
    OR?: PreferencesOnRealEstateWhereInput[]
    NOT?: PreferencesOnRealEstateWhereInput | PreferencesOnRealEstateWhereInput[]
    preferenceId?: IntFilter<"PreferencesOnRealEstate"> | number
    realEstateObjectId?: IntFilter<"PreferencesOnRealEstate"> | number
    assignedAt?: DateTimeFilter<"PreferencesOnRealEstate"> | Date | string
    assignedBy?: StringFilter<"PreferencesOnRealEstate"> | string
    preference?: XOR<PreferenceScalarRelationFilter, PreferenceWhereInput>
    realEstateObject?: XOR<RealEstateObjectScalarRelationFilter, RealEstateObjectWhereInput>
  }, "preferenceId_realEstateObjectId">

  export type PreferencesOnRealEstateOrderByWithAggregationInput = {
    preferenceId?: SortOrder
    realEstateObjectId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    _count?: PreferencesOnRealEstateCountOrderByAggregateInput
    _avg?: PreferencesOnRealEstateAvgOrderByAggregateInput
    _max?: PreferencesOnRealEstateMaxOrderByAggregateInput
    _min?: PreferencesOnRealEstateMinOrderByAggregateInput
    _sum?: PreferencesOnRealEstateSumOrderByAggregateInput
  }

  export type PreferencesOnRealEstateScalarWhereWithAggregatesInput = {
    AND?: PreferencesOnRealEstateScalarWhereWithAggregatesInput | PreferencesOnRealEstateScalarWhereWithAggregatesInput[]
    OR?: PreferencesOnRealEstateScalarWhereWithAggregatesInput[]
    NOT?: PreferencesOnRealEstateScalarWhereWithAggregatesInput | PreferencesOnRealEstateScalarWhereWithAggregatesInput[]
    preferenceId?: IntWithAggregatesFilter<"PreferencesOnRealEstate"> | number
    realEstateObjectId?: IntWithAggregatesFilter<"PreferencesOnRealEstate"> | number
    assignedAt?: DateTimeWithAggregatesFilter<"PreferencesOnRealEstate"> | Date | string
    assignedBy?: StringWithAggregatesFilter<"PreferencesOnRealEstate"> | string
  }

  export type UnitWhereInput = {
    AND?: UnitWhereInput | UnitWhereInput[]
    OR?: UnitWhereInput[]
    NOT?: UnitWhereInput | UnitWhereInput[]
    id?: IntFilter<"Unit"> | number
    createdAt?: DateTimeFilter<"Unit"> | Date | string
    updatedAt?: DateTimeFilter<"Unit"> | Date | string
    unitIdentifier?: StringNullableFilter<"Unit"> | string | null
    unitNumber?: StringNullableFilter<"Unit"> | string | null
    floor?: IntNullableFilter<"Unit"> | number | null
    unitSize?: FloatNullableFilter<"Unit"> | number | null
    numOfFloors?: IntNullableFilter<"Unit"> | number | null
    numOfRooms?: IntNullableFilter<"Unit"> | number | null
    numOfBedrooms?: IntNullableFilter<"Unit"> | number | null
    numOfBathrooms?: IntNullableFilter<"Unit"> | number | null
    garages?: IntNullableFilter<"Unit"> | number | null
    rentalPrice?: FloatNullableFilter<"Unit"> | number | null
    currency?: EnumCurrencyCodeNullableFilter<"Unit"> | $Enums.CurrencyCode | null
    status?: EnumListingStatusNullableFilter<"Unit"> | $Enums.ListingStatus | null
    realEstateObjectId?: IntFilter<"Unit"> | number
    tenantId?: IntNullableFilter<"Unit"> | number | null
    amenities?: AmenitiesOnRealEstateListRelationFilter
    documents?: DocumentListRelationFilter
    images?: ImageListRelationFilter
    maintenanceRequests?: MaintenanceRequestListRelationFilter
    realEstateObject?: XOR<RealEstateObjectScalarRelationFilter, RealEstateObjectWhereInput>
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    leases?: LeaseListRelationFilter
    expenses?: ExpenseListRelationFilter
    owners?: UserListRelationFilter
    overwriteCodes?: OverwriteCodeListRelationFilter
  }

  export type UnitOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    unitIdentifier?: SortOrderInput | SortOrder
    unitNumber?: SortOrderInput | SortOrder
    floor?: SortOrderInput | SortOrder
    unitSize?: SortOrderInput | SortOrder
    numOfFloors?: SortOrderInput | SortOrder
    numOfRooms?: SortOrderInput | SortOrder
    numOfBedrooms?: SortOrderInput | SortOrder
    numOfBathrooms?: SortOrderInput | SortOrder
    garages?: SortOrderInput | SortOrder
    rentalPrice?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    realEstateObjectId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    amenities?: AmenitiesOnRealEstateOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    images?: ImageOrderByRelationAggregateInput
    maintenanceRequests?: MaintenanceRequestOrderByRelationAggregateInput
    realEstateObject?: RealEstateObjectOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    leases?: LeaseOrderByRelationAggregateInput
    expenses?: ExpenseOrderByRelationAggregateInput
    owners?: UserOrderByRelationAggregateInput
    overwriteCodes?: OverwriteCodeOrderByRelationAggregateInput
  }

  export type UnitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UnitWhereInput | UnitWhereInput[]
    OR?: UnitWhereInput[]
    NOT?: UnitWhereInput | UnitWhereInput[]
    createdAt?: DateTimeFilter<"Unit"> | Date | string
    updatedAt?: DateTimeFilter<"Unit"> | Date | string
    unitIdentifier?: StringNullableFilter<"Unit"> | string | null
    unitNumber?: StringNullableFilter<"Unit"> | string | null
    floor?: IntNullableFilter<"Unit"> | number | null
    unitSize?: FloatNullableFilter<"Unit"> | number | null
    numOfFloors?: IntNullableFilter<"Unit"> | number | null
    numOfRooms?: IntNullableFilter<"Unit"> | number | null
    numOfBedrooms?: IntNullableFilter<"Unit"> | number | null
    numOfBathrooms?: IntNullableFilter<"Unit"> | number | null
    garages?: IntNullableFilter<"Unit"> | number | null
    rentalPrice?: FloatNullableFilter<"Unit"> | number | null
    currency?: EnumCurrencyCodeNullableFilter<"Unit"> | $Enums.CurrencyCode | null
    status?: EnumListingStatusNullableFilter<"Unit"> | $Enums.ListingStatus | null
    realEstateObjectId?: IntFilter<"Unit"> | number
    tenantId?: IntNullableFilter<"Unit"> | number | null
    amenities?: AmenitiesOnRealEstateListRelationFilter
    documents?: DocumentListRelationFilter
    images?: ImageListRelationFilter
    maintenanceRequests?: MaintenanceRequestListRelationFilter
    realEstateObject?: XOR<RealEstateObjectScalarRelationFilter, RealEstateObjectWhereInput>
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    leases?: LeaseListRelationFilter
    expenses?: ExpenseListRelationFilter
    owners?: UserListRelationFilter
    overwriteCodes?: OverwriteCodeListRelationFilter
  }, "id">

  export type UnitOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    unitIdentifier?: SortOrderInput | SortOrder
    unitNumber?: SortOrderInput | SortOrder
    floor?: SortOrderInput | SortOrder
    unitSize?: SortOrderInput | SortOrder
    numOfFloors?: SortOrderInput | SortOrder
    numOfRooms?: SortOrderInput | SortOrder
    numOfBedrooms?: SortOrderInput | SortOrder
    numOfBathrooms?: SortOrderInput | SortOrder
    garages?: SortOrderInput | SortOrder
    rentalPrice?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    realEstateObjectId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    _count?: UnitCountOrderByAggregateInput
    _avg?: UnitAvgOrderByAggregateInput
    _max?: UnitMaxOrderByAggregateInput
    _min?: UnitMinOrderByAggregateInput
    _sum?: UnitSumOrderByAggregateInput
  }

  export type UnitScalarWhereWithAggregatesInput = {
    AND?: UnitScalarWhereWithAggregatesInput | UnitScalarWhereWithAggregatesInput[]
    OR?: UnitScalarWhereWithAggregatesInput[]
    NOT?: UnitScalarWhereWithAggregatesInput | UnitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Unit"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Unit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Unit"> | Date | string
    unitIdentifier?: StringNullableWithAggregatesFilter<"Unit"> | string | null
    unitNumber?: StringNullableWithAggregatesFilter<"Unit"> | string | null
    floor?: IntNullableWithAggregatesFilter<"Unit"> | number | null
    unitSize?: FloatNullableWithAggregatesFilter<"Unit"> | number | null
    numOfFloors?: IntNullableWithAggregatesFilter<"Unit"> | number | null
    numOfRooms?: IntNullableWithAggregatesFilter<"Unit"> | number | null
    numOfBedrooms?: IntNullableWithAggregatesFilter<"Unit"> | number | null
    numOfBathrooms?: IntNullableWithAggregatesFilter<"Unit"> | number | null
    garages?: IntNullableWithAggregatesFilter<"Unit"> | number | null
    rentalPrice?: FloatNullableWithAggregatesFilter<"Unit"> | number | null
    currency?: EnumCurrencyCodeNullableWithAggregatesFilter<"Unit"> | $Enums.CurrencyCode | null
    status?: EnumListingStatusNullableWithAggregatesFilter<"Unit"> | $Enums.ListingStatus | null
    realEstateObjectId?: IntWithAggregatesFilter<"Unit"> | number
    tenantId?: IntNullableWithAggregatesFilter<"Unit"> | number | null
  }

  export type LeaseWhereInput = {
    AND?: LeaseWhereInput | LeaseWhereInput[]
    OR?: LeaseWhereInput[]
    NOT?: LeaseWhereInput | LeaseWhereInput[]
    id?: IntFilter<"Lease"> | number
    createdAt?: DateTimeFilter<"Lease"> | Date | string
    updatedAt?: DateTimeFilter<"Lease"> | Date | string
    startDate?: DateTimeNullableFilter<"Lease"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Lease"> | Date | string | null
    rentalPrice?: FloatNullableFilter<"Lease"> | number | null
    status?: EnumLeaseStatusNullableFilter<"Lease"> | $Enums.LeaseStatus | null
    paymentFrequency?: EnumPaymentFrequencyNullableFilter<"Lease"> | $Enums.PaymentFrequency | null
    notes?: StringNullableFilter<"Lease"> | string | null
    specialTerms?: StringNullableFilter<"Lease"> | string | null
    currency?: EnumCurrencyCodeNullableFilter<"Lease"> | $Enums.CurrencyCode | null
    totalRentDue?: FloatNullableFilter<"Lease"> | number | null
    rentPaid?: FloatNullableFilter<"Lease"> | number | null
    tenantId?: IntNullableFilter<"Lease"> | number | null
    unitId?: IntNullableFilter<"Lease"> | number | null
    documents?: DocumentListRelationFilter
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
    expenses?: ExpenseListRelationFilter
    rentPayments?: RentPaymentListRelationFilter
    paymentSchedule?: LeasePaymentScheduleListRelationFilter
  }

  export type LeaseOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    rentalPrice?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    paymentFrequency?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    specialTerms?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    totalRentDue?: SortOrderInput | SortOrder
    rentPaid?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    unitId?: SortOrderInput | SortOrder
    documents?: DocumentOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
    unit?: UnitOrderByWithRelationInput
    expenses?: ExpenseOrderByRelationAggregateInput
    rentPayments?: RentPaymentOrderByRelationAggregateInput
    paymentSchedule?: LeasePaymentScheduleOrderByRelationAggregateInput
  }

  export type LeaseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LeaseWhereInput | LeaseWhereInput[]
    OR?: LeaseWhereInput[]
    NOT?: LeaseWhereInput | LeaseWhereInput[]
    createdAt?: DateTimeFilter<"Lease"> | Date | string
    updatedAt?: DateTimeFilter<"Lease"> | Date | string
    startDate?: DateTimeNullableFilter<"Lease"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Lease"> | Date | string | null
    rentalPrice?: FloatNullableFilter<"Lease"> | number | null
    status?: EnumLeaseStatusNullableFilter<"Lease"> | $Enums.LeaseStatus | null
    paymentFrequency?: EnumPaymentFrequencyNullableFilter<"Lease"> | $Enums.PaymentFrequency | null
    notes?: StringNullableFilter<"Lease"> | string | null
    specialTerms?: StringNullableFilter<"Lease"> | string | null
    currency?: EnumCurrencyCodeNullableFilter<"Lease"> | $Enums.CurrencyCode | null
    totalRentDue?: FloatNullableFilter<"Lease"> | number | null
    rentPaid?: FloatNullableFilter<"Lease"> | number | null
    tenantId?: IntNullableFilter<"Lease"> | number | null
    unitId?: IntNullableFilter<"Lease"> | number | null
    documents?: DocumentListRelationFilter
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
    expenses?: ExpenseListRelationFilter
    rentPayments?: RentPaymentListRelationFilter
    paymentSchedule?: LeasePaymentScheduleListRelationFilter
  }, "id">

  export type LeaseOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    rentalPrice?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    paymentFrequency?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    specialTerms?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    totalRentDue?: SortOrderInput | SortOrder
    rentPaid?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    unitId?: SortOrderInput | SortOrder
    _count?: LeaseCountOrderByAggregateInput
    _avg?: LeaseAvgOrderByAggregateInput
    _max?: LeaseMaxOrderByAggregateInput
    _min?: LeaseMinOrderByAggregateInput
    _sum?: LeaseSumOrderByAggregateInput
  }

  export type LeaseScalarWhereWithAggregatesInput = {
    AND?: LeaseScalarWhereWithAggregatesInput | LeaseScalarWhereWithAggregatesInput[]
    OR?: LeaseScalarWhereWithAggregatesInput[]
    NOT?: LeaseScalarWhereWithAggregatesInput | LeaseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lease"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Lease"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Lease"> | Date | string
    startDate?: DateTimeNullableWithAggregatesFilter<"Lease"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Lease"> | Date | string | null
    rentalPrice?: FloatNullableWithAggregatesFilter<"Lease"> | number | null
    status?: EnumLeaseStatusNullableWithAggregatesFilter<"Lease"> | $Enums.LeaseStatus | null
    paymentFrequency?: EnumPaymentFrequencyNullableWithAggregatesFilter<"Lease"> | $Enums.PaymentFrequency | null
    notes?: StringNullableWithAggregatesFilter<"Lease"> | string | null
    specialTerms?: StringNullableWithAggregatesFilter<"Lease"> | string | null
    currency?: EnumCurrencyCodeNullableWithAggregatesFilter<"Lease"> | $Enums.CurrencyCode | null
    totalRentDue?: FloatNullableWithAggregatesFilter<"Lease"> | number | null
    rentPaid?: FloatNullableWithAggregatesFilter<"Lease"> | number | null
    tenantId?: IntNullableWithAggregatesFilter<"Lease"> | number | null
    unitId?: IntNullableWithAggregatesFilter<"Lease"> | number | null
  }

  export type LeasePaymentScheduleWhereInput = {
    AND?: LeasePaymentScheduleWhereInput | LeasePaymentScheduleWhereInput[]
    OR?: LeasePaymentScheduleWhereInput[]
    NOT?: LeasePaymentScheduleWhereInput | LeasePaymentScheduleWhereInput[]
    createdAt?: DateTimeFilter<"LeasePaymentSchedule"> | Date | string
    id?: IntFilter<"LeasePaymentSchedule"> | number
    dueDate?: DateTimeFilter<"LeasePaymentSchedule"> | Date | string
    amountDue?: FloatFilter<"LeasePaymentSchedule"> | number
    status?: EnumPaymentScheduleStatusFilter<"LeasePaymentSchedule"> | $Enums.PaymentScheduleStatus
    leaseId?: IntFilter<"LeasePaymentSchedule"> | number
    lease?: XOR<LeaseScalarRelationFilter, LeaseWhereInput>
  }

  export type LeasePaymentScheduleOrderByWithRelationInput = {
    createdAt?: SortOrder
    id?: SortOrder
    dueDate?: SortOrder
    amountDue?: SortOrder
    status?: SortOrder
    leaseId?: SortOrder
    lease?: LeaseOrderByWithRelationInput
  }

  export type LeasePaymentScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LeasePaymentScheduleWhereInput | LeasePaymentScheduleWhereInput[]
    OR?: LeasePaymentScheduleWhereInput[]
    NOT?: LeasePaymentScheduleWhereInput | LeasePaymentScheduleWhereInput[]
    createdAt?: DateTimeFilter<"LeasePaymentSchedule"> | Date | string
    dueDate?: DateTimeFilter<"LeasePaymentSchedule"> | Date | string
    amountDue?: FloatFilter<"LeasePaymentSchedule"> | number
    status?: EnumPaymentScheduleStatusFilter<"LeasePaymentSchedule"> | $Enums.PaymentScheduleStatus
    leaseId?: IntFilter<"LeasePaymentSchedule"> | number
    lease?: XOR<LeaseScalarRelationFilter, LeaseWhereInput>
  }, "id">

  export type LeasePaymentScheduleOrderByWithAggregationInput = {
    createdAt?: SortOrder
    id?: SortOrder
    dueDate?: SortOrder
    amountDue?: SortOrder
    status?: SortOrder
    leaseId?: SortOrder
    _count?: LeasePaymentScheduleCountOrderByAggregateInput
    _avg?: LeasePaymentScheduleAvgOrderByAggregateInput
    _max?: LeasePaymentScheduleMaxOrderByAggregateInput
    _min?: LeasePaymentScheduleMinOrderByAggregateInput
    _sum?: LeasePaymentScheduleSumOrderByAggregateInput
  }

  export type LeasePaymentScheduleScalarWhereWithAggregatesInput = {
    AND?: LeasePaymentScheduleScalarWhereWithAggregatesInput | LeasePaymentScheduleScalarWhereWithAggregatesInput[]
    OR?: LeasePaymentScheduleScalarWhereWithAggregatesInput[]
    NOT?: LeasePaymentScheduleScalarWhereWithAggregatesInput | LeasePaymentScheduleScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"LeasePaymentSchedule"> | Date | string
    id?: IntWithAggregatesFilter<"LeasePaymentSchedule"> | number
    dueDate?: DateTimeWithAggregatesFilter<"LeasePaymentSchedule"> | Date | string
    amountDue?: FloatWithAggregatesFilter<"LeasePaymentSchedule"> | number
    status?: EnumPaymentScheduleStatusWithAggregatesFilter<"LeasePaymentSchedule"> | $Enums.PaymentScheduleStatus
    leaseId?: IntWithAggregatesFilter<"LeasePaymentSchedule"> | number
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: IntFilter<"Image"> | number
    imageUrl?: StringFilter<"Image"> | string
    createdAt?: DateTimeFilter<"Image"> | Date | string
    realEstateObjectId?: IntNullableFilter<"Image"> | number | null
    unitId?: IntNullableFilter<"Image"> | number | null
    userId?: IntFilter<"Image"> | number
    realEstateObject?: XOR<RealEstateObjectNullableScalarRelationFilter, RealEstateObjectWhereInput> | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    realEstateObjectId?: SortOrderInput | SortOrder
    unitId?: SortOrderInput | SortOrder
    userId?: SortOrder
    realEstateObject?: RealEstateObjectOrderByWithRelationInput
    unit?: UnitOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    imageUrl?: StringFilter<"Image"> | string
    createdAt?: DateTimeFilter<"Image"> | Date | string
    realEstateObjectId?: IntNullableFilter<"Image"> | number | null
    unitId?: IntNullableFilter<"Image"> | number | null
    userId?: IntFilter<"Image"> | number
    realEstateObject?: XOR<RealEstateObjectNullableScalarRelationFilter, RealEstateObjectWhereInput> | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    realEstateObjectId?: SortOrderInput | SortOrder
    unitId?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Image"> | number
    imageUrl?: StringWithAggregatesFilter<"Image"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
    realEstateObjectId?: IntNullableWithAggregatesFilter<"Image"> | number | null
    unitId?: IntNullableWithAggregatesFilter<"Image"> | number | null
    userId?: IntWithAggregatesFilter<"Image"> | number
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: IntFilter<"Document"> | number
    documentType?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    filePath?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    userId?: IntFilter<"Document"> | number
    realEstateObjectId?: IntNullableFilter<"Document"> | number | null
    leaseId?: IntNullableFilter<"Document"> | number | null
    unitId?: IntNullableFilter<"Document"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    realEstateObject?: XOR<RealEstateObjectNullableScalarRelationFilter, RealEstateObjectWhereInput> | null
    lease?: XOR<LeaseNullableScalarRelationFilter, LeaseWhereInput> | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    documentType?: SortOrder
    filePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    realEstateObjectId?: SortOrderInput | SortOrder
    leaseId?: SortOrderInput | SortOrder
    unitId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    realEstateObject?: RealEstateObjectOrderByWithRelationInput
    lease?: LeaseOrderByWithRelationInput
    unit?: UnitOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    documentType?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    filePath?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    userId?: IntFilter<"Document"> | number
    realEstateObjectId?: IntNullableFilter<"Document"> | number | null
    leaseId?: IntNullableFilter<"Document"> | number | null
    unitId?: IntNullableFilter<"Document"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    realEstateObject?: XOR<RealEstateObjectNullableScalarRelationFilter, RealEstateObjectWhereInput> | null
    lease?: XOR<LeaseNullableScalarRelationFilter, LeaseWhereInput> | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    documentType?: SortOrder
    filePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    realEstateObjectId?: SortOrderInput | SortOrder
    leaseId?: SortOrderInput | SortOrder
    unitId?: SortOrderInput | SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Document"> | number
    documentType?: EnumDocumentTypeWithAggregatesFilter<"Document"> | $Enums.DocumentType
    filePath?: StringWithAggregatesFilter<"Document"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    userId?: IntWithAggregatesFilter<"Document"> | number
    realEstateObjectId?: IntNullableWithAggregatesFilter<"Document"> | number | null
    leaseId?: IntNullableWithAggregatesFilter<"Document"> | number | null
    unitId?: IntNullableWithAggregatesFilter<"Document"> | number | null
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: IntFilter<"Message"> | number
    content?: JsonFilter<"Message">
    type?: StringFilter<"Message"> | string
    timestamp?: DateTimeFilter<"Message"> | Date | string
    senderId?: IntFilter<"Message"> | number
    receiverId?: IntFilter<"Message"> | number
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    timestamp?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    content?: JsonFilter<"Message">
    type?: StringFilter<"Message"> | string
    timestamp?: DateTimeFilter<"Message"> | Date | string
    senderId?: IntFilter<"Message"> | number
    receiverId?: IntFilter<"Message"> | number
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    timestamp?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Message"> | number
    content?: JsonWithAggregatesFilter<"Message">
    type?: StringWithAggregatesFilter<"Message"> | string
    timestamp?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    senderId?: IntWithAggregatesFilter<"Message"> | number
    receiverId?: IntWithAggregatesFilter<"Message"> | number
  }

  export type MaintenanceRequestWhereInput = {
    AND?: MaintenanceRequestWhereInput | MaintenanceRequestWhereInput[]
    OR?: MaintenanceRequestWhereInput[]
    NOT?: MaintenanceRequestWhereInput | MaintenanceRequestWhereInput[]
    id?: IntFilter<"MaintenanceRequest"> | number
    createdAt?: DateTimeFilter<"MaintenanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceRequest"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"MaintenanceRequest"> | Date | string | null
    title?: StringFilter<"MaintenanceRequest"> | string
    status?: EnumMaintenanceStatusNullableFilter<"MaintenanceRequest"> | $Enums.MaintenanceStatus | null
    priority?: EnumPriorityNullableFilter<"MaintenanceRequest"> | $Enums.Priority | null
    ownerId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    tenantId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    notes?: StringNullableFilter<"MaintenanceRequest"> | string | null
    category?: StringFilter<"MaintenanceRequest"> | string
    categoryOther?: StringNullableFilter<"MaintenanceRequest"> | string | null
    pendingTagRequest?: BoolFilter<"MaintenanceRequest"> | boolean
    isHOAIssue?: BoolFilter<"MaintenanceRequest"> | boolean
    attachments?: StringNullableListFilter<"MaintenanceRequest">
    repairCost?: DecimalNullableFilter<"MaintenanceRequest"> | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: StringNullableFilter<"MaintenanceRequest"> | string | null
    vendorId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    vendorAccepted?: BoolNullableFilter<"MaintenanceRequest"> | boolean | null
    vendorRespondedAt?: DateTimeNullableFilter<"MaintenanceRequest"> | Date | string | null
    lastNotificationAt?: DateTimeNullableFilter<"MaintenanceRequest"> | Date | string | null
    reporterId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    unitId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    vendor?: XOR<VendorNullableScalarRelationFilter, VendorWhereInput> | null
    reporter?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
    expenses?: ExpenseListRelationFilter
    linkedAsA?: LinkedRequestListRelationFilter
    linkedAsB?: LinkedRequestListRelationFilter
  }

  export type MaintenanceRequestOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    title?: SortOrder
    status?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    ownerId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    category?: SortOrder
    categoryOther?: SortOrderInput | SortOrder
    pendingTagRequest?: SortOrder
    isHOAIssue?: SortOrder
    attachments?: SortOrder
    repairCost?: SortOrderInput | SortOrder
    invoiceUrl?: SortOrderInput | SortOrder
    vendorId?: SortOrderInput | SortOrder
    vendorAccepted?: SortOrderInput | SortOrder
    vendorRespondedAt?: SortOrderInput | SortOrder
    lastNotificationAt?: SortOrderInput | SortOrder
    reporterId?: SortOrderInput | SortOrder
    unitId?: SortOrderInput | SortOrder
    owner?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    vendor?: VendorOrderByWithRelationInput
    reporter?: TenantOrderByWithRelationInput
    unit?: UnitOrderByWithRelationInput
    expenses?: ExpenseOrderByRelationAggregateInput
    linkedAsA?: LinkedRequestOrderByRelationAggregateInput
    linkedAsB?: LinkedRequestOrderByRelationAggregateInput
  }

  export type MaintenanceRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MaintenanceRequestWhereInput | MaintenanceRequestWhereInput[]
    OR?: MaintenanceRequestWhereInput[]
    NOT?: MaintenanceRequestWhereInput | MaintenanceRequestWhereInput[]
    createdAt?: DateTimeFilter<"MaintenanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceRequest"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"MaintenanceRequest"> | Date | string | null
    title?: StringFilter<"MaintenanceRequest"> | string
    status?: EnumMaintenanceStatusNullableFilter<"MaintenanceRequest"> | $Enums.MaintenanceStatus | null
    priority?: EnumPriorityNullableFilter<"MaintenanceRequest"> | $Enums.Priority | null
    ownerId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    tenantId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    notes?: StringNullableFilter<"MaintenanceRequest"> | string | null
    category?: StringFilter<"MaintenanceRequest"> | string
    categoryOther?: StringNullableFilter<"MaintenanceRequest"> | string | null
    pendingTagRequest?: BoolFilter<"MaintenanceRequest"> | boolean
    isHOAIssue?: BoolFilter<"MaintenanceRequest"> | boolean
    attachments?: StringNullableListFilter<"MaintenanceRequest">
    repairCost?: DecimalNullableFilter<"MaintenanceRequest"> | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: StringNullableFilter<"MaintenanceRequest"> | string | null
    vendorId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    vendorAccepted?: BoolNullableFilter<"MaintenanceRequest"> | boolean | null
    vendorRespondedAt?: DateTimeNullableFilter<"MaintenanceRequest"> | Date | string | null
    lastNotificationAt?: DateTimeNullableFilter<"MaintenanceRequest"> | Date | string | null
    reporterId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    unitId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    vendor?: XOR<VendorNullableScalarRelationFilter, VendorWhereInput> | null
    reporter?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
    expenses?: ExpenseListRelationFilter
    linkedAsA?: LinkedRequestListRelationFilter
    linkedAsB?: LinkedRequestListRelationFilter
  }, "id">

  export type MaintenanceRequestOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    title?: SortOrder
    status?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    ownerId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    category?: SortOrder
    categoryOther?: SortOrderInput | SortOrder
    pendingTagRequest?: SortOrder
    isHOAIssue?: SortOrder
    attachments?: SortOrder
    repairCost?: SortOrderInput | SortOrder
    invoiceUrl?: SortOrderInput | SortOrder
    vendorId?: SortOrderInput | SortOrder
    vendorAccepted?: SortOrderInput | SortOrder
    vendorRespondedAt?: SortOrderInput | SortOrder
    lastNotificationAt?: SortOrderInput | SortOrder
    reporterId?: SortOrderInput | SortOrder
    unitId?: SortOrderInput | SortOrder
    _count?: MaintenanceRequestCountOrderByAggregateInput
    _avg?: MaintenanceRequestAvgOrderByAggregateInput
    _max?: MaintenanceRequestMaxOrderByAggregateInput
    _min?: MaintenanceRequestMinOrderByAggregateInput
    _sum?: MaintenanceRequestSumOrderByAggregateInput
  }

  export type MaintenanceRequestScalarWhereWithAggregatesInput = {
    AND?: MaintenanceRequestScalarWhereWithAggregatesInput | MaintenanceRequestScalarWhereWithAggregatesInput[]
    OR?: MaintenanceRequestScalarWhereWithAggregatesInput[]
    NOT?: MaintenanceRequestScalarWhereWithAggregatesInput | MaintenanceRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MaintenanceRequest"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MaintenanceRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MaintenanceRequest"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"MaintenanceRequest"> | Date | string | null
    title?: StringWithAggregatesFilter<"MaintenanceRequest"> | string
    status?: EnumMaintenanceStatusNullableWithAggregatesFilter<"MaintenanceRequest"> | $Enums.MaintenanceStatus | null
    priority?: EnumPriorityNullableWithAggregatesFilter<"MaintenanceRequest"> | $Enums.Priority | null
    ownerId?: IntNullableWithAggregatesFilter<"MaintenanceRequest"> | number | null
    tenantId?: IntNullableWithAggregatesFilter<"MaintenanceRequest"> | number | null
    notes?: StringNullableWithAggregatesFilter<"MaintenanceRequest"> | string | null
    category?: StringWithAggregatesFilter<"MaintenanceRequest"> | string
    categoryOther?: StringNullableWithAggregatesFilter<"MaintenanceRequest"> | string | null
    pendingTagRequest?: BoolWithAggregatesFilter<"MaintenanceRequest"> | boolean
    isHOAIssue?: BoolWithAggregatesFilter<"MaintenanceRequest"> | boolean
    attachments?: StringNullableListFilter<"MaintenanceRequest">
    repairCost?: DecimalNullableWithAggregatesFilter<"MaintenanceRequest"> | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: StringNullableWithAggregatesFilter<"MaintenanceRequest"> | string | null
    vendorId?: IntNullableWithAggregatesFilter<"MaintenanceRequest"> | number | null
    vendorAccepted?: BoolNullableWithAggregatesFilter<"MaintenanceRequest"> | boolean | null
    vendorRespondedAt?: DateTimeNullableWithAggregatesFilter<"MaintenanceRequest"> | Date | string | null
    lastNotificationAt?: DateTimeNullableWithAggregatesFilter<"MaintenanceRequest"> | Date | string | null
    reporterId?: IntNullableWithAggregatesFilter<"MaintenanceRequest"> | number | null
    unitId?: IntNullableWithAggregatesFilter<"MaintenanceRequest"> | number | null
  }

  export type ExpenseWhereInput = {
    AND?: ExpenseWhereInput | ExpenseWhereInput[]
    OR?: ExpenseWhereInput[]
    NOT?: ExpenseWhereInput | ExpenseWhereInput[]
    id?: IntFilter<"Expense"> | number
    createdAt?: DateTimeFilter<"Expense"> | Date | string
    updatedAt?: DateTimeFilter<"Expense"> | Date | string
    title?: StringNullableFilter<"Expense"> | string | null
    description?: StringNullableFilter<"Expense"> | string | null
    amount?: FloatNullableFilter<"Expense"> | number | null
    currency?: EnumCurrencyCodeNullableFilter<"Expense"> | $Enums.CurrencyCode | null
    date?: DateTimeNullableFilter<"Expense"> | Date | string | null
    category?: StringNullableFilter<"Expense"> | string | null
    status?: StringNullableFilter<"Expense"> | string | null
    notes?: StringNullableFilter<"Expense"> | string | null
    unitId?: IntNullableFilter<"Expense"> | number | null
    leaseId?: IntNullableFilter<"Expense"> | number | null
    maintenanceRequestId?: IntNullableFilter<"Expense"> | number | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
    lease?: XOR<LeaseNullableScalarRelationFilter, LeaseWhereInput> | null
    maintenanceRequest?: XOR<MaintenanceRequestNullableScalarRelationFilter, MaintenanceRequestWhereInput> | null
  }

  export type ExpenseOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    unitId?: SortOrderInput | SortOrder
    leaseId?: SortOrderInput | SortOrder
    maintenanceRequestId?: SortOrderInput | SortOrder
    unit?: UnitOrderByWithRelationInput
    lease?: LeaseOrderByWithRelationInput
    maintenanceRequest?: MaintenanceRequestOrderByWithRelationInput
  }

  export type ExpenseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExpenseWhereInput | ExpenseWhereInput[]
    OR?: ExpenseWhereInput[]
    NOT?: ExpenseWhereInput | ExpenseWhereInput[]
    createdAt?: DateTimeFilter<"Expense"> | Date | string
    updatedAt?: DateTimeFilter<"Expense"> | Date | string
    title?: StringNullableFilter<"Expense"> | string | null
    description?: StringNullableFilter<"Expense"> | string | null
    amount?: FloatNullableFilter<"Expense"> | number | null
    currency?: EnumCurrencyCodeNullableFilter<"Expense"> | $Enums.CurrencyCode | null
    date?: DateTimeNullableFilter<"Expense"> | Date | string | null
    category?: StringNullableFilter<"Expense"> | string | null
    status?: StringNullableFilter<"Expense"> | string | null
    notes?: StringNullableFilter<"Expense"> | string | null
    unitId?: IntNullableFilter<"Expense"> | number | null
    leaseId?: IntNullableFilter<"Expense"> | number | null
    maintenanceRequestId?: IntNullableFilter<"Expense"> | number | null
    unit?: XOR<UnitNullableScalarRelationFilter, UnitWhereInput> | null
    lease?: XOR<LeaseNullableScalarRelationFilter, LeaseWhereInput> | null
    maintenanceRequest?: XOR<MaintenanceRequestNullableScalarRelationFilter, MaintenanceRequestWhereInput> | null
  }, "id">

  export type ExpenseOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    unitId?: SortOrderInput | SortOrder
    leaseId?: SortOrderInput | SortOrder
    maintenanceRequestId?: SortOrderInput | SortOrder
    _count?: ExpenseCountOrderByAggregateInput
    _avg?: ExpenseAvgOrderByAggregateInput
    _max?: ExpenseMaxOrderByAggregateInput
    _min?: ExpenseMinOrderByAggregateInput
    _sum?: ExpenseSumOrderByAggregateInput
  }

  export type ExpenseScalarWhereWithAggregatesInput = {
    AND?: ExpenseScalarWhereWithAggregatesInput | ExpenseScalarWhereWithAggregatesInput[]
    OR?: ExpenseScalarWhereWithAggregatesInput[]
    NOT?: ExpenseScalarWhereWithAggregatesInput | ExpenseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Expense"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Expense"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Expense"> | Date | string
    title?: StringNullableWithAggregatesFilter<"Expense"> | string | null
    description?: StringNullableWithAggregatesFilter<"Expense"> | string | null
    amount?: FloatNullableWithAggregatesFilter<"Expense"> | number | null
    currency?: EnumCurrencyCodeNullableWithAggregatesFilter<"Expense"> | $Enums.CurrencyCode | null
    date?: DateTimeNullableWithAggregatesFilter<"Expense"> | Date | string | null
    category?: StringNullableWithAggregatesFilter<"Expense"> | string | null
    status?: StringNullableWithAggregatesFilter<"Expense"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Expense"> | string | null
    unitId?: IntNullableWithAggregatesFilter<"Expense"> | number | null
    leaseId?: IntNullableWithAggregatesFilter<"Expense"> | number | null
    maintenanceRequestId?: IntNullableWithAggregatesFilter<"Expense"> | number | null
  }

  export type RentPaymentWhereInput = {
    AND?: RentPaymentWhereInput | RentPaymentWhereInput[]
    OR?: RentPaymentWhereInput[]
    NOT?: RentPaymentWhereInput | RentPaymentWhereInput[]
    id?: IntFilter<"RentPayment"> | number
    createdAt?: DateTimeFilter<"RentPayment"> | Date | string
    updatedAt?: DateTimeFilter<"RentPayment"> | Date | string
    amount?: FloatNullableFilter<"RentPayment"> | number | null
    currency?: EnumCurrencyCodeNullableFilter<"RentPayment"> | $Enums.CurrencyCode | null
    date?: DateTimeNullableFilter<"RentPayment"> | Date | string | null
    status?: EnumPaymentStatusNullableFilter<"RentPayment"> | $Enums.PaymentStatus | null
    notes?: StringNullableFilter<"RentPayment"> | string | null
    paymentMethod?: StringNullableFilter<"RentPayment"> | string | null
    submittedBy?: IntFilter<"RentPayment"> | number
    submissionDate?: DateTimeNullableFilter<"RentPayment"> | Date | string | null
    approvalDate?: DateTimeNullableFilter<"RentPayment"> | Date | string | null
    leaseId?: IntNullableFilter<"RentPayment"> | number | null
    tenantId?: IntNullableFilter<"RentPayment"> | number | null
    lease?: XOR<LeaseNullableScalarRelationFilter, LeaseWhereInput> | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }

  export type RentPaymentOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amount?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    submittedBy?: SortOrder
    submissionDate?: SortOrderInput | SortOrder
    approvalDate?: SortOrderInput | SortOrder
    leaseId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    lease?: LeaseOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type RentPaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RentPaymentWhereInput | RentPaymentWhereInput[]
    OR?: RentPaymentWhereInput[]
    NOT?: RentPaymentWhereInput | RentPaymentWhereInput[]
    createdAt?: DateTimeFilter<"RentPayment"> | Date | string
    updatedAt?: DateTimeFilter<"RentPayment"> | Date | string
    amount?: FloatNullableFilter<"RentPayment"> | number | null
    currency?: EnumCurrencyCodeNullableFilter<"RentPayment"> | $Enums.CurrencyCode | null
    date?: DateTimeNullableFilter<"RentPayment"> | Date | string | null
    status?: EnumPaymentStatusNullableFilter<"RentPayment"> | $Enums.PaymentStatus | null
    notes?: StringNullableFilter<"RentPayment"> | string | null
    paymentMethod?: StringNullableFilter<"RentPayment"> | string | null
    submittedBy?: IntFilter<"RentPayment"> | number
    submissionDate?: DateTimeNullableFilter<"RentPayment"> | Date | string | null
    approvalDate?: DateTimeNullableFilter<"RentPayment"> | Date | string | null
    leaseId?: IntNullableFilter<"RentPayment"> | number | null
    tenantId?: IntNullableFilter<"RentPayment"> | number | null
    lease?: XOR<LeaseNullableScalarRelationFilter, LeaseWhereInput> | null
    tenant?: XOR<TenantNullableScalarRelationFilter, TenantWhereInput> | null
  }, "id">

  export type RentPaymentOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amount?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    submittedBy?: SortOrder
    submissionDate?: SortOrderInput | SortOrder
    approvalDate?: SortOrderInput | SortOrder
    leaseId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    _count?: RentPaymentCountOrderByAggregateInput
    _avg?: RentPaymentAvgOrderByAggregateInput
    _max?: RentPaymentMaxOrderByAggregateInput
    _min?: RentPaymentMinOrderByAggregateInput
    _sum?: RentPaymentSumOrderByAggregateInput
  }

  export type RentPaymentScalarWhereWithAggregatesInput = {
    AND?: RentPaymentScalarWhereWithAggregatesInput | RentPaymentScalarWhereWithAggregatesInput[]
    OR?: RentPaymentScalarWhereWithAggregatesInput[]
    NOT?: RentPaymentScalarWhereWithAggregatesInput | RentPaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RentPayment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RentPayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RentPayment"> | Date | string
    amount?: FloatNullableWithAggregatesFilter<"RentPayment"> | number | null
    currency?: EnumCurrencyCodeNullableWithAggregatesFilter<"RentPayment"> | $Enums.CurrencyCode | null
    date?: DateTimeNullableWithAggregatesFilter<"RentPayment"> | Date | string | null
    status?: EnumPaymentStatusNullableWithAggregatesFilter<"RentPayment"> | $Enums.PaymentStatus | null
    notes?: StringNullableWithAggregatesFilter<"RentPayment"> | string | null
    paymentMethod?: StringNullableWithAggregatesFilter<"RentPayment"> | string | null
    submittedBy?: IntWithAggregatesFilter<"RentPayment"> | number
    submissionDate?: DateTimeNullableWithAggregatesFilter<"RentPayment"> | Date | string | null
    approvalDate?: DateTimeNullableWithAggregatesFilter<"RentPayment"> | Date | string | null
    leaseId?: IntNullableWithAggregatesFilter<"RentPayment"> | number | null
    tenantId?: IntNullableWithAggregatesFilter<"RentPayment"> | number | null
  }

  export type ContactRequestWhereInput = {
    AND?: ContactRequestWhereInput | ContactRequestWhereInput[]
    OR?: ContactRequestWhereInput[]
    NOT?: ContactRequestWhereInput | ContactRequestWhereInput[]
    id?: IntFilter<"ContactRequest"> | number
    createdAt?: DateTimeFilter<"ContactRequest"> | Date | string
    firstName?: StringFilter<"ContactRequest"> | string
    lastName?: StringFilter<"ContactRequest"> | string
    phone?: StringFilter<"ContactRequest"> | string
    email?: StringFilter<"ContactRequest"> | string
    boardPositions?: StringNullableListFilter<"ContactRequest">
    communityName?: StringNullableFilter<"ContactRequest"> | string | null
    communityLocation?: StringNullableFilter<"ContactRequest"> | string | null
    communityDescription?: StringNullableFilter<"ContactRequest"> | string | null
    referralSource?: StringNullableFilter<"ContactRequest"> | string | null
    numberOfUnits?: IntNullableFilter<"ContactRequest"> | number | null
    propertyType?: StringFilter<"ContactRequest"> | string
  }

  export type ContactRequestOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    boardPositions?: SortOrder
    communityName?: SortOrderInput | SortOrder
    communityLocation?: SortOrderInput | SortOrder
    communityDescription?: SortOrderInput | SortOrder
    referralSource?: SortOrderInput | SortOrder
    numberOfUnits?: SortOrderInput | SortOrder
    propertyType?: SortOrder
  }

  export type ContactRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactRequestWhereInput | ContactRequestWhereInput[]
    OR?: ContactRequestWhereInput[]
    NOT?: ContactRequestWhereInput | ContactRequestWhereInput[]
    createdAt?: DateTimeFilter<"ContactRequest"> | Date | string
    firstName?: StringFilter<"ContactRequest"> | string
    lastName?: StringFilter<"ContactRequest"> | string
    phone?: StringFilter<"ContactRequest"> | string
    email?: StringFilter<"ContactRequest"> | string
    boardPositions?: StringNullableListFilter<"ContactRequest">
    communityName?: StringNullableFilter<"ContactRequest"> | string | null
    communityLocation?: StringNullableFilter<"ContactRequest"> | string | null
    communityDescription?: StringNullableFilter<"ContactRequest"> | string | null
    referralSource?: StringNullableFilter<"ContactRequest"> | string | null
    numberOfUnits?: IntNullableFilter<"ContactRequest"> | number | null
    propertyType?: StringFilter<"ContactRequest"> | string
  }, "id">

  export type ContactRequestOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    boardPositions?: SortOrder
    communityName?: SortOrderInput | SortOrder
    communityLocation?: SortOrderInput | SortOrder
    communityDescription?: SortOrderInput | SortOrder
    referralSource?: SortOrderInput | SortOrder
    numberOfUnits?: SortOrderInput | SortOrder
    propertyType?: SortOrder
    _count?: ContactRequestCountOrderByAggregateInput
    _avg?: ContactRequestAvgOrderByAggregateInput
    _max?: ContactRequestMaxOrderByAggregateInput
    _min?: ContactRequestMinOrderByAggregateInput
    _sum?: ContactRequestSumOrderByAggregateInput
  }

  export type ContactRequestScalarWhereWithAggregatesInput = {
    AND?: ContactRequestScalarWhereWithAggregatesInput | ContactRequestScalarWhereWithAggregatesInput[]
    OR?: ContactRequestScalarWhereWithAggregatesInput[]
    NOT?: ContactRequestScalarWhereWithAggregatesInput | ContactRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactRequest"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ContactRequest"> | Date | string
    firstName?: StringWithAggregatesFilter<"ContactRequest"> | string
    lastName?: StringWithAggregatesFilter<"ContactRequest"> | string
    phone?: StringWithAggregatesFilter<"ContactRequest"> | string
    email?: StringWithAggregatesFilter<"ContactRequest"> | string
    boardPositions?: StringNullableListFilter<"ContactRequest">
    communityName?: StringNullableWithAggregatesFilter<"ContactRequest"> | string | null
    communityLocation?: StringNullableWithAggregatesFilter<"ContactRequest"> | string | null
    communityDescription?: StringNullableWithAggregatesFilter<"ContactRequest"> | string | null
    referralSource?: StringNullableWithAggregatesFilter<"ContactRequest"> | string | null
    numberOfUnits?: IntNullableWithAggregatesFilter<"ContactRequest"> | number | null
    propertyType?: StringWithAggregatesFilter<"ContactRequest"> | string
  }

  export type WhitelistedUserWhereInput = {
    AND?: WhitelistedUserWhereInput | WhitelistedUserWhereInput[]
    OR?: WhitelistedUserWhereInput[]
    NOT?: WhitelistedUserWhereInput | WhitelistedUserWhereInput[]
    id?: IntFilter<"WhitelistedUser"> | number
    email?: StringFilter<"WhitelistedUser"> | string
    role?: StringFilter<"WhitelistedUser"> | string
    createdAt?: DateTimeFilter<"WhitelistedUser"> | Date | string
  }

  export type WhitelistedUserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type WhitelistedUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: WhitelistedUserWhereInput | WhitelistedUserWhereInput[]
    OR?: WhitelistedUserWhereInput[]
    NOT?: WhitelistedUserWhereInput | WhitelistedUserWhereInput[]
    role?: StringFilter<"WhitelistedUser"> | string
    createdAt?: DateTimeFilter<"WhitelistedUser"> | Date | string
  }, "id" | "email">

  export type WhitelistedUserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: WhitelistedUserCountOrderByAggregateInput
    _avg?: WhitelistedUserAvgOrderByAggregateInput
    _max?: WhitelistedUserMaxOrderByAggregateInput
    _min?: WhitelistedUserMinOrderByAggregateInput
    _sum?: WhitelistedUserSumOrderByAggregateInput
  }

  export type WhitelistedUserScalarWhereWithAggregatesInput = {
    AND?: WhitelistedUserScalarWhereWithAggregatesInput | WhitelistedUserScalarWhereWithAggregatesInput[]
    OR?: WhitelistedUserScalarWhereWithAggregatesInput[]
    NOT?: WhitelistedUserScalarWhereWithAggregatesInput | WhitelistedUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WhitelistedUser"> | number
    email?: StringWithAggregatesFilter<"WhitelistedUser"> | string
    role?: StringWithAggregatesFilter<"WhitelistedUser"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WhitelistedUser"> | Date | string
  }

  export type VendorWhereInput = {
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    id?: IntFilter<"Vendor"> | number
    name?: StringFilter<"Vendor"> | string
    email?: StringFilter<"Vendor"> | string
    phone?: StringFilter<"Vendor"> | string
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    requests?: MaintenanceRequestListRelationFilter
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    requests?: MaintenanceRequestOrderByRelationAggregateInput
  }

  export type VendorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    name?: StringFilter<"Vendor"> | string
    email?: StringFilter<"Vendor"> | string
    phone?: StringFilter<"Vendor"> | string
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    requests?: MaintenanceRequestListRelationFilter
  }, "id">

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    _count?: VendorCountOrderByAggregateInput
    _avg?: VendorAvgOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
    _sum?: VendorSumOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    OR?: VendorScalarWhereWithAggregatesInput[]
    NOT?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Vendor"> | number
    name?: StringWithAggregatesFilter<"Vendor"> | string
    email?: StringWithAggregatesFilter<"Vendor"> | string
    phone?: StringWithAggregatesFilter<"Vendor"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
  }

  export type LinkedRequestWhereInput = {
    AND?: LinkedRequestWhereInput | LinkedRequestWhereInput[]
    OR?: LinkedRequestWhereInput[]
    NOT?: LinkedRequestWhereInput | LinkedRequestWhereInput[]
    requestAId?: IntFilter<"LinkedRequest"> | number
    requestBId?: IntFilter<"LinkedRequest"> | number
    requestA?: XOR<MaintenanceRequestScalarRelationFilter, MaintenanceRequestWhereInput>
    requestB?: XOR<MaintenanceRequestScalarRelationFilter, MaintenanceRequestWhereInput>
  }

  export type LinkedRequestOrderByWithRelationInput = {
    requestAId?: SortOrder
    requestBId?: SortOrder
    requestA?: MaintenanceRequestOrderByWithRelationInput
    requestB?: MaintenanceRequestOrderByWithRelationInput
  }

  export type LinkedRequestWhereUniqueInput = Prisma.AtLeast<{
    requestAId_requestBId?: LinkedRequestRequestAIdRequestBIdCompoundUniqueInput
    AND?: LinkedRequestWhereInput | LinkedRequestWhereInput[]
    OR?: LinkedRequestWhereInput[]
    NOT?: LinkedRequestWhereInput | LinkedRequestWhereInput[]
    requestAId?: IntFilter<"LinkedRequest"> | number
    requestBId?: IntFilter<"LinkedRequest"> | number
    requestA?: XOR<MaintenanceRequestScalarRelationFilter, MaintenanceRequestWhereInput>
    requestB?: XOR<MaintenanceRequestScalarRelationFilter, MaintenanceRequestWhereInput>
  }, "requestAId_requestBId">

  export type LinkedRequestOrderByWithAggregationInput = {
    requestAId?: SortOrder
    requestBId?: SortOrder
    _count?: LinkedRequestCountOrderByAggregateInput
    _avg?: LinkedRequestAvgOrderByAggregateInput
    _max?: LinkedRequestMaxOrderByAggregateInput
    _min?: LinkedRequestMinOrderByAggregateInput
    _sum?: LinkedRequestSumOrderByAggregateInput
  }

  export type LinkedRequestScalarWhereWithAggregatesInput = {
    AND?: LinkedRequestScalarWhereWithAggregatesInput | LinkedRequestScalarWhereWithAggregatesInput[]
    OR?: LinkedRequestScalarWhereWithAggregatesInput[]
    NOT?: LinkedRequestScalarWhereWithAggregatesInput | LinkedRequestScalarWhereWithAggregatesInput[]
    requestAId?: IntWithAggregatesFilter<"LinkedRequest"> | number
    requestBId?: IntWithAggregatesFilter<"LinkedRequest"> | number
  }

  export type OverwriteCodeWhereInput = {
    AND?: OverwriteCodeWhereInput | OverwriteCodeWhereInput[]
    OR?: OverwriteCodeWhereInput[]
    NOT?: OverwriteCodeWhereInput | OverwriteCodeWhereInput[]
    id?: IntFilter<"OverwriteCode"> | number
    code?: StringFilter<"OverwriteCode"> | string
    expiresAt?: DateTimeFilter<"OverwriteCode"> | Date | string
    used?: BoolFilter<"OverwriteCode"> | boolean
    usedById?: IntNullableFilter<"OverwriteCode"> | number | null
    usedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    units?: UnitListRelationFilter
  }

  export type OverwriteCodeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    usedById?: SortOrderInput | SortOrder
    usedBy?: UserOrderByWithRelationInput
    units?: UnitOrderByRelationAggregateInput
  }

  export type OverwriteCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: OverwriteCodeWhereInput | OverwriteCodeWhereInput[]
    OR?: OverwriteCodeWhereInput[]
    NOT?: OverwriteCodeWhereInput | OverwriteCodeWhereInput[]
    expiresAt?: DateTimeFilter<"OverwriteCode"> | Date | string
    used?: BoolFilter<"OverwriteCode"> | boolean
    usedById?: IntNullableFilter<"OverwriteCode"> | number | null
    usedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    units?: UnitListRelationFilter
  }, "id" | "code">

  export type OverwriteCodeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    usedById?: SortOrderInput | SortOrder
    _count?: OverwriteCodeCountOrderByAggregateInput
    _avg?: OverwriteCodeAvgOrderByAggregateInput
    _max?: OverwriteCodeMaxOrderByAggregateInput
    _min?: OverwriteCodeMinOrderByAggregateInput
    _sum?: OverwriteCodeSumOrderByAggregateInput
  }

  export type OverwriteCodeScalarWhereWithAggregatesInput = {
    AND?: OverwriteCodeScalarWhereWithAggregatesInput | OverwriteCodeScalarWhereWithAggregatesInput[]
    OR?: OverwriteCodeScalarWhereWithAggregatesInput[]
    NOT?: OverwriteCodeScalarWhereWithAggregatesInput | OverwriteCodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OverwriteCode"> | number
    code?: StringWithAggregatesFilter<"OverwriteCode"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"OverwriteCode"> | Date | string
    used?: BoolWithAggregatesFilter<"OverwriteCode"> | boolean
    usedById?: IntNullableWithAggregatesFilter<"OverwriteCode"> | number | null
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    tenant?: TenantCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeCreateNestedManyWithoutUsedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    tenant?: TenantUncheckedCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitUncheckedCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUsedByInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUpdateManyWithoutUsedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUncheckedUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUncheckedUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUncheckedUpdateManyWithoutUsedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    user?: UserCreateNestedOneWithoutTenantInput
    leases?: LeaseCreateNestedManyWithoutTenantInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentCreateNestedManyWithoutTenantInput
    unit?: UnitCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestCreateNestedManyWithoutReporterInput
  }

  export type TenantUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    userId?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    leases?: LeaseUncheckedCreateNestedManyWithoutTenantInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutTenantInput
    unit?: UnitUncheckedCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestUncheckedCreateNestedManyWithoutReporterInput
  }

  export type TenantUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutTenantNestedInput
    leases?: LeaseUpdateManyWithoutTenantNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutTenantNestedInput
    unit?: UnitUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUpdateManyWithoutReporterNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    leases?: LeaseUncheckedUpdateManyWithoutTenantNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutTenantNestedInput
    unit?: UnitUncheckedUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUncheckedUpdateManyWithoutReporterNestedInput
  }

  export type TenantCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    userId?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
  }

  export type TenantUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TokenCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
    user: UserCreateNestedOneWithoutTokensInput
  }

  export type TokenUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
    userId: number
  }

  export type TokenUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTokensNestedInput
  }

  export type TokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type TokenCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
    userId: number
  }

  export type TokenUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type RealEstateObjectCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    images?: ImageCreateNestedManyWithoutRealEstateObjectInput
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput
    preferences?: PreferencesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput
    documents?: DocumentCreateNestedManyWithoutRealEstateObjectInput
    units?: UnitCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    images?: ImageUncheckedCreateNestedManyWithoutRealEstateObjectInput
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput
    preferences?: PreferencesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutRealEstateObjectInput
    units?: UnitUncheckedCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUpdateManyWithoutRealEstateObjectNestedInput
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput
    preferences?: PreferencesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput
    documents?: DocumentUpdateManyWithoutRealEstateObjectNestedInput
    units?: UnitUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type RealEstateObjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    preferences?: PreferencesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    units?: UnitUncheckedUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type RealEstateObjectCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
  }

  export type RealEstateObjectUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RealEstateObjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AmenityCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    category?: $Enums.AmenityCategory | null
    realEstateObjects?: AmenitiesOnRealEstateCreateNestedManyWithoutAmenityInput
  }

  export type AmenityUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    category?: $Enums.AmenityCategory | null
    realEstateObjects?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutAmenityInput
  }

  export type AmenityUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumAmenityCategoryFieldUpdateOperationsInput | $Enums.AmenityCategory | null
    realEstateObjects?: AmenitiesOnRealEstateUpdateManyWithoutAmenityNestedInput
  }

  export type AmenityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumAmenityCategoryFieldUpdateOperationsInput | $Enums.AmenityCategory | null
    realEstateObjects?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutAmenityNestedInput
  }

  export type AmenityCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    category?: $Enums.AmenityCategory | null
  }

  export type AmenityUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumAmenityCategoryFieldUpdateOperationsInput | $Enums.AmenityCategory | null
  }

  export type AmenityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumAmenityCategoryFieldUpdateOperationsInput | $Enums.AmenityCategory | null
  }

  export type AmenitiesOnRealEstateCreateInput = {
    assignedAt?: Date | string
    assignedBy: string
    amenity: AmenityCreateNestedOneWithoutRealEstateObjectsInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutAmenitiesInput
    unit?: UnitCreateNestedOneWithoutAmenitiesInput
  }

  export type AmenitiesOnRealEstateUncheckedCreateInput = {
    amenityId: number
    realEstateObjectId: number
    assignedAt?: Date | string
    assignedBy: string
    unitId?: number | null
  }

  export type AmenitiesOnRealEstateUpdateInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    amenity?: AmenityUpdateOneRequiredWithoutRealEstateObjectsNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutAmenitiesNestedInput
    unit?: UnitUpdateOneWithoutAmenitiesNestedInput
  }

  export type AmenitiesOnRealEstateUncheckedUpdateInput = {
    amenityId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AmenitiesOnRealEstateCreateManyInput = {
    amenityId: number
    realEstateObjectId: number
    assignedAt?: Date | string
    assignedBy: string
    unitId?: number | null
  }

  export type AmenitiesOnRealEstateUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type AmenitiesOnRealEstateUncheckedUpdateManyInput = {
    amenityId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PreferenceCreateInput = {
    name: string
    enabled?: boolean | null
    realEstateObjects?: PreferencesOnRealEstateCreateNestedManyWithoutPreferenceInput
  }

  export type PreferenceUncheckedCreateInput = {
    id?: number
    name: string
    enabled?: boolean | null
    realEstateObjects?: PreferencesOnRealEstateUncheckedCreateNestedManyWithoutPreferenceInput
  }

  export type PreferenceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    realEstateObjects?: PreferencesOnRealEstateUpdateManyWithoutPreferenceNestedInput
  }

  export type PreferenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    realEstateObjects?: PreferencesOnRealEstateUncheckedUpdateManyWithoutPreferenceNestedInput
  }

  export type PreferenceCreateManyInput = {
    id?: number
    name: string
    enabled?: boolean | null
  }

  export type PreferenceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PreferenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PreferencesOnRealEstateCreateInput = {
    assignedAt?: Date | string
    assignedBy: string
    preference: PreferenceCreateNestedOneWithoutRealEstateObjectsInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutPreferencesInput
  }

  export type PreferencesOnRealEstateUncheckedCreateInput = {
    preferenceId: number
    realEstateObjectId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type PreferencesOnRealEstateUpdateInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    preference?: PreferenceUpdateOneRequiredWithoutRealEstateObjectsNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type PreferencesOnRealEstateUncheckedUpdateInput = {
    preferenceId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type PreferencesOnRealEstateCreateManyInput = {
    preferenceId: number
    realEstateObjectId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type PreferencesOnRealEstateUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type PreferencesOnRealEstateUncheckedUpdateManyInput = {
    preferenceId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type UnitCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutUnitInput
    documents?: DocumentCreateNestedManyWithoutUnitInput
    images?: ImageCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutUnitInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutUnitsInput
    tenant?: TenantCreateNestedOneWithoutUnitInput
    leases?: LeaseCreateNestedManyWithoutUnitInput
    expenses?: ExpenseCreateNestedManyWithoutUnitInput
    owners?: UserCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeCreateNestedManyWithoutUnitsInput
  }

  export type UnitUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
    tenantId?: number | null
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutUnitInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUnitInput
    images?: ImageUncheckedCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutUnitInput
    leases?: LeaseUncheckedCreateNestedManyWithoutUnitInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutUnitInput
    owners?: UserUncheckedCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUnitsInput
  }

  export type UnitUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutUnitNestedInput
    documents?: DocumentUpdateManyWithoutUnitNestedInput
    images?: ImageUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutUnitNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutUnitsNestedInput
    tenant?: TenantUpdateOneWithoutUnitNestedInput
    leases?: LeaseUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUpdateManyWithoutUnitNestedInput
    owners?: UserUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUnitNestedInput
    images?: ImageUncheckedUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutUnitNestedInput
    leases?: LeaseUncheckedUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutUnitNestedInput
    owners?: UserUncheckedUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUncheckedUpdateManyWithoutUnitsNestedInput
  }

  export type UnitCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
    tenantId?: number | null
  }

  export type UnitUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
  }

  export type UnitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LeaseCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    documents?: DocumentCreateNestedManyWithoutLeaseInput
    tenant?: TenantCreateNestedOneWithoutLeasesInput
    unit?: UnitCreateNestedOneWithoutLeasesInput
    expenses?: ExpenseCreateNestedManyWithoutLeaseInput
    rentPayments?: RentPaymentCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleCreateNestedManyWithoutLeaseInput
  }

  export type LeaseUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    tenantId?: number | null
    unitId?: number | null
    documents?: DocumentUncheckedCreateNestedManyWithoutLeaseInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutLeaseInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleUncheckedCreateNestedManyWithoutLeaseInput
  }

  export type LeaseUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    documents?: DocumentUpdateManyWithoutLeaseNestedInput
    tenant?: TenantUpdateOneWithoutLeasesNestedInput
    unit?: UnitUpdateOneWithoutLeasesNestedInput
    expenses?: ExpenseUpdateManyWithoutLeaseNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUpdateManyWithoutLeaseNestedInput
  }

  export type LeaseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    documents?: DocumentUncheckedUpdateManyWithoutLeaseNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutLeaseNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUncheckedUpdateManyWithoutLeaseNestedInput
  }

  export type LeaseCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    tenantId?: number | null
    unitId?: number | null
  }

  export type LeaseUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type LeaseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LeasePaymentScheduleCreateInput = {
    createdAt?: Date | string
    dueDate: Date | string
    amountDue: number
    status?: $Enums.PaymentScheduleStatus
    lease: LeaseCreateNestedOneWithoutPaymentScheduleInput
  }

  export type LeasePaymentScheduleUncheckedCreateInput = {
    createdAt?: Date | string
    id?: number
    dueDate: Date | string
    amountDue: number
    status?: $Enums.PaymentScheduleStatus
    leaseId: number
  }

  export type LeasePaymentScheduleUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentScheduleStatusFieldUpdateOperationsInput | $Enums.PaymentScheduleStatus
    lease?: LeaseUpdateOneRequiredWithoutPaymentScheduleNestedInput
  }

  export type LeasePaymentScheduleUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentScheduleStatusFieldUpdateOperationsInput | $Enums.PaymentScheduleStatus
    leaseId?: IntFieldUpdateOperationsInput | number
  }

  export type LeasePaymentScheduleCreateManyInput = {
    createdAt?: Date | string
    id?: number
    dueDate: Date | string
    amountDue: number
    status?: $Enums.PaymentScheduleStatus
    leaseId: number
  }

  export type LeasePaymentScheduleUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentScheduleStatusFieldUpdateOperationsInput | $Enums.PaymentScheduleStatus
  }

  export type LeasePaymentScheduleUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentScheduleStatusFieldUpdateOperationsInput | $Enums.PaymentScheduleStatus
    leaseId?: IntFieldUpdateOperationsInput | number
  }

  export type ImageCreateInput = {
    imageUrl: string
    createdAt?: Date | string
    realEstateObject?: RealEstateObjectCreateNestedOneWithoutImagesInput
    unit?: UnitCreateNestedOneWithoutImagesInput
    user: UserCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateInput = {
    id?: number
    imageUrl: string
    createdAt?: Date | string
    realEstateObjectId?: number | null
    unitId?: number | null
    userId: number
  }

  export type ImageUpdateInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObject?: RealEstateObjectUpdateOneWithoutImagesNestedInput
    unit?: UnitUpdateOneWithoutImagesNestedInput
    user?: UserUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ImageCreateManyInput = {
    id?: number
    imageUrl: string
    createdAt?: Date | string
    realEstateObjectId?: number | null
    unitId?: number | null
    userId: number
  }

  export type ImageUpdateManyMutationInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentCreateInput = {
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDocumentsInput
    realEstateObject?: RealEstateObjectCreateNestedOneWithoutDocumentsInput
    lease?: LeaseCreateNestedOneWithoutDocumentsInput
    unit?: UnitCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: number
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    realEstateObjectId?: number | null
    leaseId?: number | null
    unitId?: number | null
  }

  export type DocumentUpdateInput = {
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
    realEstateObject?: RealEstateObjectUpdateOneWithoutDocumentsNestedInput
    lease?: LeaseUpdateOneWithoutDocumentsNestedInput
    unit?: UnitUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DocumentCreateManyInput = {
    id?: number
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    realEstateObjectId?: number | null
    leaseId?: number | null
    unitId?: number | null
  }

  export type DocumentUpdateManyMutationInput = {
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageCreateInput = {
    content: JsonNullValueInput | InputJsonValue
    type: string
    timestamp?: Date | string
    sender: UserCreateNestedOneWithoutSentMessagesInput
    receiver: UserCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    content: JsonNullValueInput | InputJsonValue
    type: string
    timestamp?: Date | string
    senderId: number
    receiverId: number
  }

  export type MessageUpdateInput = {
    content?: JsonNullValueInput | InputJsonValue
    type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateManyInput = {
    id?: number
    content: JsonNullValueInput | InputJsonValue
    type: string
    timestamp?: Date | string
    senderId: number
    receiverId: number
  }

  export type MessageUpdateManyMutationInput = {
    content?: JsonNullValueInput | InputJsonValue
    type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: IntFieldUpdateOperationsInput | number
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type MaintenanceRequestCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    owner?: UserCreateNestedOneWithoutMaintenanceRequestsInput
    tenant?: TenantCreateNestedOneWithoutMaintenanceRequestsInput
    vendor?: VendorCreateNestedOneWithoutRequestsInput
    reporter?: TenantCreateNestedOneWithoutMaintenanceRequestInput
    unit?: UnitCreateNestedOneWithoutMaintenanceRequestsInput
    expenses?: ExpenseCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    unitId?: number | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestUncheckedCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestUncheckedCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneWithoutMaintenanceRequestsNestedInput
    tenant?: TenantUpdateOneWithoutMaintenanceRequestsNestedInput
    vendor?: VendorUpdateOneWithoutRequestsNestedInput
    reporter?: TenantUpdateOneWithoutMaintenanceRequestNestedInput
    unit?: UnitUpdateOneWithoutMaintenanceRequestsNestedInput
    expenses?: ExpenseUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: ExpenseUncheckedUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUncheckedUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUncheckedUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    unitId?: number | null
  }

  export type MaintenanceRequestUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MaintenanceRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExpenseCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    unit?: UnitCreateNestedOneWithoutExpensesInput
    lease?: LeaseCreateNestedOneWithoutExpensesInput
    maintenanceRequest?: MaintenanceRequestCreateNestedOneWithoutExpensesInput
  }

  export type ExpenseUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    unitId?: number | null
    leaseId?: number | null
    maintenanceRequestId?: number | null
  }

  export type ExpenseUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: UnitUpdateOneWithoutExpensesNestedInput
    lease?: LeaseUpdateOneWithoutExpensesNestedInput
    maintenanceRequest?: MaintenanceRequestUpdateOneWithoutExpensesNestedInput
  }

  export type ExpenseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExpenseCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    unitId?: number | null
    leaseId?: number | null
    maintenanceRequestId?: number | null
  }

  export type ExpenseUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExpenseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RentPaymentCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    status?: $Enums.PaymentStatus | null
    notes?: string | null
    paymentMethod?: string | null
    submittedBy: number
    submissionDate?: Date | string | null
    approvalDate?: Date | string | null
    lease?: LeaseCreateNestedOneWithoutRentPaymentsInput
    tenant?: TenantCreateNestedOneWithoutRentPaymentsInput
  }

  export type RentPaymentUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    status?: $Enums.PaymentStatus | null
    notes?: string | null
    paymentMethod?: string | null
    submittedBy: number
    submissionDate?: Date | string | null
    approvalDate?: Date | string | null
    leaseId?: number | null
    tenantId?: number | null
  }

  export type RentPaymentUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: IntFieldUpdateOperationsInput | number
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lease?: LeaseUpdateOneWithoutRentPaymentsNestedInput
    tenant?: TenantUpdateOneWithoutRentPaymentsNestedInput
  }

  export type RentPaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: IntFieldUpdateOperationsInput | number
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RentPaymentCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    status?: $Enums.PaymentStatus | null
    notes?: string | null
    paymentMethod?: string | null
    submittedBy: number
    submissionDate?: Date | string | null
    approvalDate?: Date | string | null
    leaseId?: number | null
    tenantId?: number | null
  }

  export type RentPaymentUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: IntFieldUpdateOperationsInput | number
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RentPaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: IntFieldUpdateOperationsInput | number
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContactRequestCreateInput = {
    createdAt?: Date | string
    firstName: string
    lastName: string
    phone: string
    email: string
    boardPositions?: ContactRequestCreateboardPositionsInput | string[]
    communityName?: string | null
    communityLocation?: string | null
    communityDescription?: string | null
    referralSource?: string | null
    numberOfUnits?: number | null
    propertyType: string
  }

  export type ContactRequestUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    firstName: string
    lastName: string
    phone: string
    email: string
    boardPositions?: ContactRequestCreateboardPositionsInput | string[]
    communityName?: string | null
    communityLocation?: string | null
    communityDescription?: string | null
    referralSource?: string | null
    numberOfUnits?: number | null
    propertyType: string
  }

  export type ContactRequestUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    boardPositions?: ContactRequestUpdateboardPositionsInput | string[]
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
    communityLocation?: NullableStringFieldUpdateOperationsInput | string | null
    communityDescription?: NullableStringFieldUpdateOperationsInput | string | null
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfUnits?: NullableIntFieldUpdateOperationsInput | number | null
    propertyType?: StringFieldUpdateOperationsInput | string
  }

  export type ContactRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    boardPositions?: ContactRequestUpdateboardPositionsInput | string[]
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
    communityLocation?: NullableStringFieldUpdateOperationsInput | string | null
    communityDescription?: NullableStringFieldUpdateOperationsInput | string | null
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfUnits?: NullableIntFieldUpdateOperationsInput | number | null
    propertyType?: StringFieldUpdateOperationsInput | string
  }

  export type ContactRequestCreateManyInput = {
    id?: number
    createdAt?: Date | string
    firstName: string
    lastName: string
    phone: string
    email: string
    boardPositions?: ContactRequestCreateboardPositionsInput | string[]
    communityName?: string | null
    communityLocation?: string | null
    communityDescription?: string | null
    referralSource?: string | null
    numberOfUnits?: number | null
    propertyType: string
  }

  export type ContactRequestUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    boardPositions?: ContactRequestUpdateboardPositionsInput | string[]
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
    communityLocation?: NullableStringFieldUpdateOperationsInput | string | null
    communityDescription?: NullableStringFieldUpdateOperationsInput | string | null
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfUnits?: NullableIntFieldUpdateOperationsInput | number | null
    propertyType?: StringFieldUpdateOperationsInput | string
  }

  export type ContactRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    boardPositions?: ContactRequestUpdateboardPositionsInput | string[]
    communityName?: NullableStringFieldUpdateOperationsInput | string | null
    communityLocation?: NullableStringFieldUpdateOperationsInput | string | null
    communityDescription?: NullableStringFieldUpdateOperationsInput | string | null
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    numberOfUnits?: NullableIntFieldUpdateOperationsInput | number | null
    propertyType?: StringFieldUpdateOperationsInput | string
  }

  export type WhitelistedUserCreateInput = {
    email: string
    role: string
    createdAt?: Date | string
  }

  export type WhitelistedUserUncheckedCreateInput = {
    id?: number
    email: string
    role: string
    createdAt?: Date | string
  }

  export type WhitelistedUserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WhitelistedUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WhitelistedUserCreateManyInput = {
    id?: number
    email: string
    role: string
    createdAt?: Date | string
  }

  export type WhitelistedUserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WhitelistedUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorCreateInput = {
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    requests?: MaintenanceRequestCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    requests?: MaintenanceRequestUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requests?: MaintenanceRequestUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requests?: MaintenanceRequestUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorCreateManyInput = {
    id?: number
    name: string
    email: string
    phone: string
    createdAt?: Date | string
  }

  export type VendorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkedRequestCreateInput = {
    requestA: MaintenanceRequestCreateNestedOneWithoutLinkedAsAInput
    requestB: MaintenanceRequestCreateNestedOneWithoutLinkedAsBInput
  }

  export type LinkedRequestUncheckedCreateInput = {
    requestAId: number
    requestBId: number
  }

  export type LinkedRequestUpdateInput = {
    requestA?: MaintenanceRequestUpdateOneRequiredWithoutLinkedAsANestedInput
    requestB?: MaintenanceRequestUpdateOneRequiredWithoutLinkedAsBNestedInput
  }

  export type LinkedRequestUncheckedUpdateInput = {
    requestAId?: IntFieldUpdateOperationsInput | number
    requestBId?: IntFieldUpdateOperationsInput | number
  }

  export type LinkedRequestCreateManyInput = {
    requestAId: number
    requestBId: number
  }

  export type LinkedRequestUpdateManyMutationInput = {

  }

  export type LinkedRequestUncheckedUpdateManyInput = {
    requestAId?: IntFieldUpdateOperationsInput | number
    requestBId?: IntFieldUpdateOperationsInput | number
  }

  export type OverwriteCodeCreateInput = {
    code: string
    expiresAt: Date | string
    used?: boolean
    usedBy?: UserCreateNestedOneWithoutUsedCodesInput
    units?: UnitCreateNestedManyWithoutOverwriteCodesInput
  }

  export type OverwriteCodeUncheckedCreateInput = {
    id?: number
    code: string
    expiresAt: Date | string
    used?: boolean
    usedById?: number | null
    units?: UnitUncheckedCreateNestedManyWithoutOverwriteCodesInput
  }

  export type OverwriteCodeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    usedBy?: UserUpdateOneWithoutUsedCodesNestedInput
    units?: UnitUpdateManyWithoutOverwriteCodesNestedInput
  }

  export type OverwriteCodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    usedById?: NullableIntFieldUpdateOperationsInput | number | null
    units?: UnitUncheckedUpdateManyWithoutOverwriteCodesNestedInput
  }

  export type OverwriteCodeCreateManyInput = {
    id?: number
    code: string
    expiresAt: Date | string
    used?: boolean
    usedById?: number | null
  }

  export type OverwriteCodeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OverwriteCodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    usedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumCurrencyCodeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel> | $Enums.CurrencyCode | null
  }

  export type EnumAccountStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusFilter<$PrismaModel> | $Enums.AccountStatus
  }

  export type EnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type TokenListRelationFilter = {
    every?: TokenWhereInput
    some?: TokenWhereInput
    none?: TokenWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type TenantNullableScalarRelationFilter = {
    is?: TenantWhereInput | null
    isNot?: TenantWhereInput | null
  }

  export type MaintenanceRequestListRelationFilter = {
    every?: MaintenanceRequestWhereInput
    some?: MaintenanceRequestWhereInput
    none?: MaintenanceRequestWhereInput
  }

  export type UnitListRelationFilter = {
    every?: UnitWhereInput
    some?: UnitWhereInput
    none?: UnitWhereInput
  }

  export type OverwriteCodeListRelationFilter = {
    every?: OverwriteCodeWhereInput
    some?: OverwriteCodeWhereInput
    none?: OverwriteCodeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaintenanceRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UnitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OverwriteCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    name?: SortOrder
    dob?: SortOrder
    currencyCode?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    plaidLinkToken?: SortOrder
    title?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    company?: SortOrder
    bio?: SortOrder
    status?: SortOrder
    role?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    country?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    name?: SortOrder
    dob?: SortOrder
    currencyCode?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    plaidLinkToken?: SortOrder
    title?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    company?: SortOrder
    bio?: SortOrder
    status?: SortOrder
    role?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    country?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    name?: SortOrder
    dob?: SortOrder
    currencyCode?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    plaidLinkToken?: SortOrder
    title?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    company?: SortOrder
    bio?: SortOrder
    status?: SortOrder
    role?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    country?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel> | $Enums.CurrencyCode | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
    _max?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
  }

  export type EnumAccountStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel> | $Enums.AccountStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountStatusFilter<$PrismaModel>
    _max?: NestedEnumAccountStatusFilter<$PrismaModel>
  }

  export type EnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type EnumCivilStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CivilStatus | EnumCivilStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.CivilStatus[] | ListEnumCivilStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CivilStatus[] | ListEnumCivilStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCivilStatusNullableFilter<$PrismaModel> | $Enums.CivilStatus | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type LeaseListRelationFilter = {
    every?: LeaseWhereInput
    some?: LeaseWhereInput
    none?: LeaseWhereInput
  }

  export type RentPaymentListRelationFilter = {
    every?: RentPaymentWhereInput
    some?: RentPaymentWhereInput
    none?: RentPaymentWhereInput
  }

  export type LeaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RentPaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    civilStatus?: SortOrder
    occupation?: SortOrder
    income?: SortOrder
    creditScore?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
  }

  export type TenantAvgOrderByAggregateInput = {
    id?: SortOrder
    income?: SortOrder
    creditScore?: SortOrder
    userId?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    civilStatus?: SortOrder
    occupation?: SortOrder
    income?: SortOrder
    creditScore?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    civilStatus?: SortOrder
    occupation?: SortOrder
    income?: SortOrder
    creditScore?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
  }

  export type TenantSumOrderByAggregateInput = {
    id?: SortOrder
    income?: SortOrder
    creditScore?: SortOrder
    userId?: SortOrder
  }

  export type EnumCivilStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CivilStatus | EnumCivilStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.CivilStatus[] | ListEnumCivilStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CivilStatus[] | ListEnumCivilStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCivilStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.CivilStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCivilStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumCivilStatusNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    emailToken?: SortOrder
    valid?: SortOrder
    expiration?: SortOrder
    userId?: SortOrder
  }

  export type TokenAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    emailToken?: SortOrder
    valid?: SortOrder
    expiration?: SortOrder
    userId?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    emailToken?: SortOrder
    valid?: SortOrder
    expiration?: SortOrder
    userId?: SortOrder
  }

  export type TokenSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRealEstateTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RealEstateType | EnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.RealEstateType[] | ListEnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RealEstateType[] | ListEnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRealEstateTypeNullableFilter<$PrismaModel> | $Enums.RealEstateType | null
  }

  export type AmenitiesOnRealEstateListRelationFilter = {
    every?: AmenitiesOnRealEstateWhereInput
    some?: AmenitiesOnRealEstateWhereInput
    none?: AmenitiesOnRealEstateWhereInput
  }

  export type PreferencesOnRealEstateListRelationFilter = {
    every?: PreferencesOnRealEstateWhereInput
    some?: PreferencesOnRealEstateWhereInput
    none?: PreferencesOnRealEstateWhereInput
  }

  export type AmenitiesOnRealEstateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PreferencesOnRealEstateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RealEstateObjectCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    lotSize?: SortOrder
    yearBuilt?: SortOrder
    realEstateType?: SortOrder
    marketPrice?: SortOrder
    currency?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    country?: SortOrder
  }

  export type RealEstateObjectAvgOrderByAggregateInput = {
    id?: SortOrder
    lotSize?: SortOrder
    yearBuilt?: SortOrder
    marketPrice?: SortOrder
  }

  export type RealEstateObjectMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    lotSize?: SortOrder
    yearBuilt?: SortOrder
    realEstateType?: SortOrder
    marketPrice?: SortOrder
    currency?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    country?: SortOrder
  }

  export type RealEstateObjectMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    lotSize?: SortOrder
    yearBuilt?: SortOrder
    realEstateType?: SortOrder
    marketPrice?: SortOrder
    currency?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    country?: SortOrder
  }

  export type RealEstateObjectSumOrderByAggregateInput = {
    id?: SortOrder
    lotSize?: SortOrder
    yearBuilt?: SortOrder
    marketPrice?: SortOrder
  }

  export type EnumRealEstateTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RealEstateType | EnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.RealEstateType[] | ListEnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RealEstateType[] | ListEnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRealEstateTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.RealEstateType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRealEstateTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumRealEstateTypeNullableFilter<$PrismaModel>
  }

  export type EnumAmenityCategoryNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AmenityCategory | EnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.AmenityCategory[] | ListEnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AmenityCategory[] | ListEnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAmenityCategoryNullableFilter<$PrismaModel> | $Enums.AmenityCategory | null
  }

  export type AmenityCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
  }

  export type AmenityAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AmenityMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
  }

  export type AmenityMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
  }

  export type AmenitySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumAmenityCategoryNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AmenityCategory | EnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.AmenityCategory[] | ListEnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AmenityCategory[] | ListEnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAmenityCategoryNullableWithAggregatesFilter<$PrismaModel> | $Enums.AmenityCategory | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAmenityCategoryNullableFilter<$PrismaModel>
    _max?: NestedEnumAmenityCategoryNullableFilter<$PrismaModel>
  }

  export type AmenityScalarRelationFilter = {
    is?: AmenityWhereInput
    isNot?: AmenityWhereInput
  }

  export type RealEstateObjectScalarRelationFilter = {
    is?: RealEstateObjectWhereInput
    isNot?: RealEstateObjectWhereInput
  }

  export type UnitNullableScalarRelationFilter = {
    is?: UnitWhereInput | null
    isNot?: UnitWhereInput | null
  }

  export type AmenitiesOnRealEstateAmenityIdRealEstateObjectIdCompoundUniqueInput = {
    amenityId: number
    realEstateObjectId: number
  }

  export type AmenitiesOnRealEstateCountOrderByAggregateInput = {
    amenityId?: SortOrder
    realEstateObjectId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    unitId?: SortOrder
  }

  export type AmenitiesOnRealEstateAvgOrderByAggregateInput = {
    amenityId?: SortOrder
    realEstateObjectId?: SortOrder
    unitId?: SortOrder
  }

  export type AmenitiesOnRealEstateMaxOrderByAggregateInput = {
    amenityId?: SortOrder
    realEstateObjectId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    unitId?: SortOrder
  }

  export type AmenitiesOnRealEstateMinOrderByAggregateInput = {
    amenityId?: SortOrder
    realEstateObjectId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    unitId?: SortOrder
  }

  export type AmenitiesOnRealEstateSumOrderByAggregateInput = {
    amenityId?: SortOrder
    realEstateObjectId?: SortOrder
    unitId?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type PreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    enabled?: SortOrder
  }

  export type PreferenceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    enabled?: SortOrder
  }

  export type PreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    enabled?: SortOrder
  }

  export type PreferenceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type PreferenceScalarRelationFilter = {
    is?: PreferenceWhereInput
    isNot?: PreferenceWhereInput
  }

  export type PreferencesOnRealEstatePreferenceIdRealEstateObjectIdCompoundUniqueInput = {
    preferenceId: number
    realEstateObjectId: number
  }

  export type PreferencesOnRealEstateCountOrderByAggregateInput = {
    preferenceId?: SortOrder
    realEstateObjectId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type PreferencesOnRealEstateAvgOrderByAggregateInput = {
    preferenceId?: SortOrder
    realEstateObjectId?: SortOrder
  }

  export type PreferencesOnRealEstateMaxOrderByAggregateInput = {
    preferenceId?: SortOrder
    realEstateObjectId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type PreferencesOnRealEstateMinOrderByAggregateInput = {
    preferenceId?: SortOrder
    realEstateObjectId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type PreferencesOnRealEstateSumOrderByAggregateInput = {
    preferenceId?: SortOrder
    realEstateObjectId?: SortOrder
  }

  export type EnumListingStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ListingStatus | EnumListingStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumListingStatusNullableFilter<$PrismaModel> | $Enums.ListingStatus | null
  }

  export type ExpenseListRelationFilter = {
    every?: ExpenseWhereInput
    some?: ExpenseWhereInput
    none?: ExpenseWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ExpenseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UnitCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    unitIdentifier?: SortOrder
    unitNumber?: SortOrder
    floor?: SortOrder
    unitSize?: SortOrder
    numOfFloors?: SortOrder
    numOfRooms?: SortOrder
    numOfBedrooms?: SortOrder
    numOfBathrooms?: SortOrder
    garages?: SortOrder
    rentalPrice?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    realEstateObjectId?: SortOrder
    tenantId?: SortOrder
  }

  export type UnitAvgOrderByAggregateInput = {
    id?: SortOrder
    floor?: SortOrder
    unitSize?: SortOrder
    numOfFloors?: SortOrder
    numOfRooms?: SortOrder
    numOfBedrooms?: SortOrder
    numOfBathrooms?: SortOrder
    garages?: SortOrder
    rentalPrice?: SortOrder
    realEstateObjectId?: SortOrder
    tenantId?: SortOrder
  }

  export type UnitMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    unitIdentifier?: SortOrder
    unitNumber?: SortOrder
    floor?: SortOrder
    unitSize?: SortOrder
    numOfFloors?: SortOrder
    numOfRooms?: SortOrder
    numOfBedrooms?: SortOrder
    numOfBathrooms?: SortOrder
    garages?: SortOrder
    rentalPrice?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    realEstateObjectId?: SortOrder
    tenantId?: SortOrder
  }

  export type UnitMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    unitIdentifier?: SortOrder
    unitNumber?: SortOrder
    floor?: SortOrder
    unitSize?: SortOrder
    numOfFloors?: SortOrder
    numOfRooms?: SortOrder
    numOfBedrooms?: SortOrder
    numOfBathrooms?: SortOrder
    garages?: SortOrder
    rentalPrice?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    realEstateObjectId?: SortOrder
    tenantId?: SortOrder
  }

  export type UnitSumOrderByAggregateInput = {
    id?: SortOrder
    floor?: SortOrder
    unitSize?: SortOrder
    numOfFloors?: SortOrder
    numOfRooms?: SortOrder
    numOfBedrooms?: SortOrder
    numOfBathrooms?: SortOrder
    garages?: SortOrder
    rentalPrice?: SortOrder
    realEstateObjectId?: SortOrder
    tenantId?: SortOrder
  }

  export type EnumListingStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ListingStatus | EnumListingStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumListingStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.ListingStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumListingStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumListingStatusNullableFilter<$PrismaModel>
  }

  export type EnumLeaseStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaseStatus | EnumLeaseStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.LeaseStatus[] | ListEnumLeaseStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LeaseStatus[] | ListEnumLeaseStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLeaseStatusNullableFilter<$PrismaModel> | $Enums.LeaseStatus | null
  }

  export type EnumPaymentFrequencyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentFrequency | EnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentFrequencyNullableFilter<$PrismaModel> | $Enums.PaymentFrequency | null
  }

  export type LeasePaymentScheduleListRelationFilter = {
    every?: LeasePaymentScheduleWhereInput
    some?: LeasePaymentScheduleWhereInput
    none?: LeasePaymentScheduleWhereInput
  }

  export type LeasePaymentScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaseCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    rentalPrice?: SortOrder
    status?: SortOrder
    paymentFrequency?: SortOrder
    notes?: SortOrder
    specialTerms?: SortOrder
    currency?: SortOrder
    totalRentDue?: SortOrder
    rentPaid?: SortOrder
    tenantId?: SortOrder
    unitId?: SortOrder
  }

  export type LeaseAvgOrderByAggregateInput = {
    id?: SortOrder
    rentalPrice?: SortOrder
    totalRentDue?: SortOrder
    rentPaid?: SortOrder
    tenantId?: SortOrder
    unitId?: SortOrder
  }

  export type LeaseMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    rentalPrice?: SortOrder
    status?: SortOrder
    paymentFrequency?: SortOrder
    notes?: SortOrder
    specialTerms?: SortOrder
    currency?: SortOrder
    totalRentDue?: SortOrder
    rentPaid?: SortOrder
    tenantId?: SortOrder
    unitId?: SortOrder
  }

  export type LeaseMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    rentalPrice?: SortOrder
    status?: SortOrder
    paymentFrequency?: SortOrder
    notes?: SortOrder
    specialTerms?: SortOrder
    currency?: SortOrder
    totalRentDue?: SortOrder
    rentPaid?: SortOrder
    tenantId?: SortOrder
    unitId?: SortOrder
  }

  export type LeaseSumOrderByAggregateInput = {
    id?: SortOrder
    rentalPrice?: SortOrder
    totalRentDue?: SortOrder
    rentPaid?: SortOrder
    tenantId?: SortOrder
    unitId?: SortOrder
  }

  export type EnumLeaseStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaseStatus | EnumLeaseStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.LeaseStatus[] | ListEnumLeaseStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LeaseStatus[] | ListEnumLeaseStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLeaseStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.LeaseStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLeaseStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumLeaseStatusNullableFilter<$PrismaModel>
  }

  export type EnumPaymentFrequencyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentFrequency | EnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentFrequencyNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentFrequency | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentFrequencyNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentFrequencyNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumPaymentScheduleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentScheduleStatus | EnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentScheduleStatus[] | ListEnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentScheduleStatus[] | ListEnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentScheduleStatusFilter<$PrismaModel> | $Enums.PaymentScheduleStatus
  }

  export type LeaseScalarRelationFilter = {
    is?: LeaseWhereInput
    isNot?: LeaseWhereInput
  }

  export type LeasePaymentScheduleCountOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    dueDate?: SortOrder
    amountDue?: SortOrder
    status?: SortOrder
    leaseId?: SortOrder
  }

  export type LeasePaymentScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    amountDue?: SortOrder
    leaseId?: SortOrder
  }

  export type LeasePaymentScheduleMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    dueDate?: SortOrder
    amountDue?: SortOrder
    status?: SortOrder
    leaseId?: SortOrder
  }

  export type LeasePaymentScheduleMinOrderByAggregateInput = {
    createdAt?: SortOrder
    id?: SortOrder
    dueDate?: SortOrder
    amountDue?: SortOrder
    status?: SortOrder
    leaseId?: SortOrder
  }

  export type LeasePaymentScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    amountDue?: SortOrder
    leaseId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumPaymentScheduleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentScheduleStatus | EnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentScheduleStatus[] | ListEnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentScheduleStatus[] | ListEnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentScheduleStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentScheduleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentScheduleStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentScheduleStatusFilter<$PrismaModel>
  }

  export type RealEstateObjectNullableScalarRelationFilter = {
    is?: RealEstateObjectWhereInput | null
    isNot?: RealEstateObjectWhereInput | null
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    realEstateObjectId?: SortOrder
    unitId?: SortOrder
    userId?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    id?: SortOrder
    realEstateObjectId?: SortOrder
    unitId?: SortOrder
    userId?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    realEstateObjectId?: SortOrder
    unitId?: SortOrder
    userId?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    realEstateObjectId?: SortOrder
    unitId?: SortOrder
    userId?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    id?: SortOrder
    realEstateObjectId?: SortOrder
    unitId?: SortOrder
    userId?: SortOrder
  }

  export type EnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type LeaseNullableScalarRelationFilter = {
    is?: LeaseWhereInput | null
    isNot?: LeaseWhereInput | null
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    documentType?: SortOrder
    filePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    realEstateObjectId?: SortOrder
    leaseId?: SortOrder
    unitId?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    realEstateObjectId?: SortOrder
    leaseId?: SortOrder
    unitId?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    documentType?: SortOrder
    filePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    realEstateObjectId?: SortOrder
    leaseId?: SortOrder
    unitId?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    documentType?: SortOrder
    filePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    realEstateObjectId?: SortOrder
    leaseId?: SortOrder
    unitId?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    realEstateObjectId?: SortOrder
    leaseId?: SortOrder
    unitId?: SortOrder
  }

  export type EnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    type?: SortOrder
    timestamp?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    timestamp?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    timestamp?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumMaintenanceStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaintenanceStatusNullableFilter<$PrismaModel> | $Enums.MaintenanceStatus | null
  }

  export type EnumPriorityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPriorityNullableFilter<$PrismaModel> | $Enums.Priority | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type VendorNullableScalarRelationFilter = {
    is?: VendorWhereInput | null
    isNot?: VendorWhereInput | null
  }

  export type LinkedRequestListRelationFilter = {
    every?: LinkedRequestWhereInput
    some?: LinkedRequestWhereInput
    none?: LinkedRequestWhereInput
  }

  export type LinkedRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaintenanceRequestCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    title?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    ownerId?: SortOrder
    tenantId?: SortOrder
    notes?: SortOrder
    category?: SortOrder
    categoryOther?: SortOrder
    pendingTagRequest?: SortOrder
    isHOAIssue?: SortOrder
    attachments?: SortOrder
    repairCost?: SortOrder
    invoiceUrl?: SortOrder
    vendorId?: SortOrder
    vendorAccepted?: SortOrder
    vendorRespondedAt?: SortOrder
    lastNotificationAt?: SortOrder
    reporterId?: SortOrder
    unitId?: SortOrder
  }

  export type MaintenanceRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    tenantId?: SortOrder
    repairCost?: SortOrder
    vendorId?: SortOrder
    reporterId?: SortOrder
    unitId?: SortOrder
  }

  export type MaintenanceRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    title?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    ownerId?: SortOrder
    tenantId?: SortOrder
    notes?: SortOrder
    category?: SortOrder
    categoryOther?: SortOrder
    pendingTagRequest?: SortOrder
    isHOAIssue?: SortOrder
    repairCost?: SortOrder
    invoiceUrl?: SortOrder
    vendorId?: SortOrder
    vendorAccepted?: SortOrder
    vendorRespondedAt?: SortOrder
    lastNotificationAt?: SortOrder
    reporterId?: SortOrder
    unitId?: SortOrder
  }

  export type MaintenanceRequestMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    title?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    ownerId?: SortOrder
    tenantId?: SortOrder
    notes?: SortOrder
    category?: SortOrder
    categoryOther?: SortOrder
    pendingTagRequest?: SortOrder
    isHOAIssue?: SortOrder
    repairCost?: SortOrder
    invoiceUrl?: SortOrder
    vendorId?: SortOrder
    vendorAccepted?: SortOrder
    vendorRespondedAt?: SortOrder
    lastNotificationAt?: SortOrder
    reporterId?: SortOrder
    unitId?: SortOrder
  }

  export type MaintenanceRequestSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    tenantId?: SortOrder
    repairCost?: SortOrder
    vendorId?: SortOrder
    reporterId?: SortOrder
    unitId?: SortOrder
  }

  export type EnumMaintenanceStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaintenanceStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceStatusNullableFilter<$PrismaModel>
  }

  export type EnumPriorityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPriorityNullableWithAggregatesFilter<$PrismaModel> | $Enums.Priority | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPriorityNullableFilter<$PrismaModel>
    _max?: NestedEnumPriorityNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type MaintenanceRequestNullableScalarRelationFilter = {
    is?: MaintenanceRequestWhereInput | null
    isNot?: MaintenanceRequestWhereInput | null
  }

  export type ExpenseCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    category?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    unitId?: SortOrder
    leaseId?: SortOrder
    maintenanceRequestId?: SortOrder
  }

  export type ExpenseAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    unitId?: SortOrder
    leaseId?: SortOrder
    maintenanceRequestId?: SortOrder
  }

  export type ExpenseMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    category?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    unitId?: SortOrder
    leaseId?: SortOrder
    maintenanceRequestId?: SortOrder
  }

  export type ExpenseMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    category?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    unitId?: SortOrder
    leaseId?: SortOrder
    maintenanceRequestId?: SortOrder
  }

  export type ExpenseSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    unitId?: SortOrder
    leaseId?: SortOrder
    maintenanceRequestId?: SortOrder
  }

  export type EnumPaymentStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableFilter<$PrismaModel> | $Enums.PaymentStatus | null
  }

  export type RentPaymentCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    paymentMethod?: SortOrder
    submittedBy?: SortOrder
    submissionDate?: SortOrder
    approvalDate?: SortOrder
    leaseId?: SortOrder
    tenantId?: SortOrder
  }

  export type RentPaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    submittedBy?: SortOrder
    leaseId?: SortOrder
    tenantId?: SortOrder
  }

  export type RentPaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    paymentMethod?: SortOrder
    submittedBy?: SortOrder
    submissionDate?: SortOrder
    approvalDate?: SortOrder
    leaseId?: SortOrder
    tenantId?: SortOrder
  }

  export type RentPaymentMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    date?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    paymentMethod?: SortOrder
    submittedBy?: SortOrder
    submissionDate?: SortOrder
    approvalDate?: SortOrder
    leaseId?: SortOrder
    tenantId?: SortOrder
  }

  export type RentPaymentSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    submittedBy?: SortOrder
    leaseId?: SortOrder
    tenantId?: SortOrder
  }

  export type EnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
  }

  export type ContactRequestCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    boardPositions?: SortOrder
    communityName?: SortOrder
    communityLocation?: SortOrder
    communityDescription?: SortOrder
    referralSource?: SortOrder
    numberOfUnits?: SortOrder
    propertyType?: SortOrder
  }

  export type ContactRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    numberOfUnits?: SortOrder
  }

  export type ContactRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    communityName?: SortOrder
    communityLocation?: SortOrder
    communityDescription?: SortOrder
    referralSource?: SortOrder
    numberOfUnits?: SortOrder
    propertyType?: SortOrder
  }

  export type ContactRequestMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    communityName?: SortOrder
    communityLocation?: SortOrder
    communityDescription?: SortOrder
    referralSource?: SortOrder
    numberOfUnits?: SortOrder
    propertyType?: SortOrder
  }

  export type ContactRequestSumOrderByAggregateInput = {
    id?: SortOrder
    numberOfUnits?: SortOrder
  }

  export type WhitelistedUserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type WhitelistedUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WhitelistedUserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type WhitelistedUserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type WhitelistedUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MaintenanceRequestScalarRelationFilter = {
    is?: MaintenanceRequestWhereInput
    isNot?: MaintenanceRequestWhereInput
  }

  export type LinkedRequestRequestAIdRequestBIdCompoundUniqueInput = {
    requestAId: number
    requestBId: number
  }

  export type LinkedRequestCountOrderByAggregateInput = {
    requestAId?: SortOrder
    requestBId?: SortOrder
  }

  export type LinkedRequestAvgOrderByAggregateInput = {
    requestAId?: SortOrder
    requestBId?: SortOrder
  }

  export type LinkedRequestMaxOrderByAggregateInput = {
    requestAId?: SortOrder
    requestBId?: SortOrder
  }

  export type LinkedRequestMinOrderByAggregateInput = {
    requestAId?: SortOrder
    requestBId?: SortOrder
  }

  export type LinkedRequestSumOrderByAggregateInput = {
    requestAId?: SortOrder
    requestBId?: SortOrder
  }

  export type OverwriteCodeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    usedById?: SortOrder
  }

  export type OverwriteCodeAvgOrderByAggregateInput = {
    id?: SortOrder
    usedById?: SortOrder
  }

  export type OverwriteCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    usedById?: SortOrder
  }

  export type OverwriteCodeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    usedById?: SortOrder
  }

  export type OverwriteCodeSumOrderByAggregateInput = {
    id?: SortOrder
    usedById?: SortOrder
  }

  export type TokenCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ImageCreateNestedManyWithoutUserInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput> | ImageCreateWithoutUserInput[] | ImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput | ImageCreateOrConnectWithoutUserInput[]
    createMany?: ImageCreateManyUserInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutUserInput = {
    create?: XOR<TenantCreateWithoutUserInput, TenantUncheckedCreateWithoutUserInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUserInput
    connect?: TenantWhereUniqueInput
  }

  export type MaintenanceRequestCreateNestedManyWithoutOwnerInput = {
    create?: XOR<MaintenanceRequestCreateWithoutOwnerInput, MaintenanceRequestUncheckedCreateWithoutOwnerInput> | MaintenanceRequestCreateWithoutOwnerInput[] | MaintenanceRequestUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutOwnerInput | MaintenanceRequestCreateOrConnectWithoutOwnerInput[]
    createMany?: MaintenanceRequestCreateManyOwnerInputEnvelope
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
  }

  export type UnitCreateNestedManyWithoutOwnersInput = {
    create?: XOR<UnitCreateWithoutOwnersInput, UnitUncheckedCreateWithoutOwnersInput> | UnitCreateWithoutOwnersInput[] | UnitUncheckedCreateWithoutOwnersInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutOwnersInput | UnitCreateOrConnectWithoutOwnersInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
  }

  export type OverwriteCodeCreateNestedManyWithoutUsedByInput = {
    create?: XOR<OverwriteCodeCreateWithoutUsedByInput, OverwriteCodeUncheckedCreateWithoutUsedByInput> | OverwriteCodeCreateWithoutUsedByInput[] | OverwriteCodeUncheckedCreateWithoutUsedByInput[]
    connectOrCreate?: OverwriteCodeCreateOrConnectWithoutUsedByInput | OverwriteCodeCreateOrConnectWithoutUsedByInput[]
    createMany?: OverwriteCodeCreateManyUsedByInputEnvelope
    connect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
  }

  export type TokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ImageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput> | ImageCreateWithoutUserInput[] | ImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput | ImageCreateOrConnectWithoutUserInput[]
    createMany?: ImageCreateManyUserInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type TenantUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TenantCreateWithoutUserInput, TenantUncheckedCreateWithoutUserInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUserInput
    connect?: TenantWhereUniqueInput
  }

  export type MaintenanceRequestUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<MaintenanceRequestCreateWithoutOwnerInput, MaintenanceRequestUncheckedCreateWithoutOwnerInput> | MaintenanceRequestCreateWithoutOwnerInput[] | MaintenanceRequestUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutOwnerInput | MaintenanceRequestCreateOrConnectWithoutOwnerInput[]
    createMany?: MaintenanceRequestCreateManyOwnerInputEnvelope
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
  }

  export type UnitUncheckedCreateNestedManyWithoutOwnersInput = {
    create?: XOR<UnitCreateWithoutOwnersInput, UnitUncheckedCreateWithoutOwnersInput> | UnitCreateWithoutOwnersInput[] | UnitUncheckedCreateWithoutOwnersInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutOwnersInput | UnitCreateOrConnectWithoutOwnersInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
  }

  export type OverwriteCodeUncheckedCreateNestedManyWithoutUsedByInput = {
    create?: XOR<OverwriteCodeCreateWithoutUsedByInput, OverwriteCodeUncheckedCreateWithoutUsedByInput> | OverwriteCodeCreateWithoutUsedByInput[] | OverwriteCodeUncheckedCreateWithoutUsedByInput[]
    connectOrCreate?: OverwriteCodeCreateOrConnectWithoutUsedByInput | OverwriteCodeCreateOrConnectWithoutUsedByInput[]
    createMany?: OverwriteCodeCreateManyUsedByInputEnvelope
    connect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumCurrencyCodeFieldUpdateOperationsInput = {
    set?: $Enums.CurrencyCode | null
  }

  export type EnumAccountStatusFieldUpdateOperationsInput = {
    set?: $Enums.AccountStatus
  }

  export type NullableEnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole | null
  }

  export type TokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutUserInput | TokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutUserInput | TokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutUserInput | TokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUserInput | DocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUserInput | DocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUserInput | DocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ImageUpdateManyWithoutUserNestedInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput> | ImageCreateWithoutUserInput[] | ImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput | ImageCreateOrConnectWithoutUserInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutUserInput | ImageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ImageCreateManyUserInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutUserInput | ImageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutUserInput | ImageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type TenantUpdateOneWithoutUserNestedInput = {
    create?: XOR<TenantCreateWithoutUserInput, TenantUncheckedCreateWithoutUserInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUserInput
    upsert?: TenantUpsertWithoutUserInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutUserInput, TenantUpdateWithoutUserInput>, TenantUncheckedUpdateWithoutUserInput>
  }

  export type MaintenanceRequestUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutOwnerInput, MaintenanceRequestUncheckedCreateWithoutOwnerInput> | MaintenanceRequestCreateWithoutOwnerInput[] | MaintenanceRequestUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutOwnerInput | MaintenanceRequestCreateOrConnectWithoutOwnerInput[]
    upsert?: MaintenanceRequestUpsertWithWhereUniqueWithoutOwnerInput | MaintenanceRequestUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: MaintenanceRequestCreateManyOwnerInputEnvelope
    set?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    disconnect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    delete?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    update?: MaintenanceRequestUpdateWithWhereUniqueWithoutOwnerInput | MaintenanceRequestUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: MaintenanceRequestUpdateManyWithWhereWithoutOwnerInput | MaintenanceRequestUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
  }

  export type UnitUpdateManyWithoutOwnersNestedInput = {
    create?: XOR<UnitCreateWithoutOwnersInput, UnitUncheckedCreateWithoutOwnersInput> | UnitCreateWithoutOwnersInput[] | UnitUncheckedCreateWithoutOwnersInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutOwnersInput | UnitCreateOrConnectWithoutOwnersInput[]
    upsert?: UnitUpsertWithWhereUniqueWithoutOwnersInput | UnitUpsertWithWhereUniqueWithoutOwnersInput[]
    set?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    disconnect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    delete?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    update?: UnitUpdateWithWhereUniqueWithoutOwnersInput | UnitUpdateWithWhereUniqueWithoutOwnersInput[]
    updateMany?: UnitUpdateManyWithWhereWithoutOwnersInput | UnitUpdateManyWithWhereWithoutOwnersInput[]
    deleteMany?: UnitScalarWhereInput | UnitScalarWhereInput[]
  }

  export type OverwriteCodeUpdateManyWithoutUsedByNestedInput = {
    create?: XOR<OverwriteCodeCreateWithoutUsedByInput, OverwriteCodeUncheckedCreateWithoutUsedByInput> | OverwriteCodeCreateWithoutUsedByInput[] | OverwriteCodeUncheckedCreateWithoutUsedByInput[]
    connectOrCreate?: OverwriteCodeCreateOrConnectWithoutUsedByInput | OverwriteCodeCreateOrConnectWithoutUsedByInput[]
    upsert?: OverwriteCodeUpsertWithWhereUniqueWithoutUsedByInput | OverwriteCodeUpsertWithWhereUniqueWithoutUsedByInput[]
    createMany?: OverwriteCodeCreateManyUsedByInputEnvelope
    set?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    disconnect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    delete?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    connect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    update?: OverwriteCodeUpdateWithWhereUniqueWithoutUsedByInput | OverwriteCodeUpdateWithWhereUniqueWithoutUsedByInput[]
    updateMany?: OverwriteCodeUpdateManyWithWhereWithoutUsedByInput | OverwriteCodeUpdateManyWithWhereWithoutUsedByInput[]
    deleteMany?: OverwriteCodeScalarWhereInput | OverwriteCodeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutUserInput | TokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutUserInput | TokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutUserInput | TokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUserInput | DocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUserInput | DocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUserInput | DocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ImageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput> | ImageCreateWithoutUserInput[] | ImageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput | ImageCreateOrConnectWithoutUserInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutUserInput | ImageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ImageCreateManyUserInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutUserInput | ImageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutUserInput | ImageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type TenantUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TenantCreateWithoutUserInput, TenantUncheckedCreateWithoutUserInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUserInput
    upsert?: TenantUpsertWithoutUserInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutUserInput, TenantUpdateWithoutUserInput>, TenantUncheckedUpdateWithoutUserInput>
  }

  export type MaintenanceRequestUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutOwnerInput, MaintenanceRequestUncheckedCreateWithoutOwnerInput> | MaintenanceRequestCreateWithoutOwnerInput[] | MaintenanceRequestUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutOwnerInput | MaintenanceRequestCreateOrConnectWithoutOwnerInput[]
    upsert?: MaintenanceRequestUpsertWithWhereUniqueWithoutOwnerInput | MaintenanceRequestUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: MaintenanceRequestCreateManyOwnerInputEnvelope
    set?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    disconnect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    delete?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    update?: MaintenanceRequestUpdateWithWhereUniqueWithoutOwnerInput | MaintenanceRequestUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: MaintenanceRequestUpdateManyWithWhereWithoutOwnerInput | MaintenanceRequestUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
  }

  export type UnitUncheckedUpdateManyWithoutOwnersNestedInput = {
    create?: XOR<UnitCreateWithoutOwnersInput, UnitUncheckedCreateWithoutOwnersInput> | UnitCreateWithoutOwnersInput[] | UnitUncheckedCreateWithoutOwnersInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutOwnersInput | UnitCreateOrConnectWithoutOwnersInput[]
    upsert?: UnitUpsertWithWhereUniqueWithoutOwnersInput | UnitUpsertWithWhereUniqueWithoutOwnersInput[]
    set?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    disconnect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    delete?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    update?: UnitUpdateWithWhereUniqueWithoutOwnersInput | UnitUpdateWithWhereUniqueWithoutOwnersInput[]
    updateMany?: UnitUpdateManyWithWhereWithoutOwnersInput | UnitUpdateManyWithWhereWithoutOwnersInput[]
    deleteMany?: UnitScalarWhereInput | UnitScalarWhereInput[]
  }

  export type OverwriteCodeUncheckedUpdateManyWithoutUsedByNestedInput = {
    create?: XOR<OverwriteCodeCreateWithoutUsedByInput, OverwriteCodeUncheckedCreateWithoutUsedByInput> | OverwriteCodeCreateWithoutUsedByInput[] | OverwriteCodeUncheckedCreateWithoutUsedByInput[]
    connectOrCreate?: OverwriteCodeCreateOrConnectWithoutUsedByInput | OverwriteCodeCreateOrConnectWithoutUsedByInput[]
    upsert?: OverwriteCodeUpsertWithWhereUniqueWithoutUsedByInput | OverwriteCodeUpsertWithWhereUniqueWithoutUsedByInput[]
    createMany?: OverwriteCodeCreateManyUsedByInputEnvelope
    set?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    disconnect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    delete?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    connect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    update?: OverwriteCodeUpdateWithWhereUniqueWithoutUsedByInput | OverwriteCodeUpdateWithWhereUniqueWithoutUsedByInput[]
    updateMany?: OverwriteCodeUpdateManyWithWhereWithoutUsedByInput | OverwriteCodeUpdateManyWithWhereWithoutUsedByInput[]
    deleteMany?: OverwriteCodeScalarWhereInput | OverwriteCodeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput
    connect?: UserWhereUniqueInput
  }

  export type LeaseCreateNestedManyWithoutTenantInput = {
    create?: XOR<LeaseCreateWithoutTenantInput, LeaseUncheckedCreateWithoutTenantInput> | LeaseCreateWithoutTenantInput[] | LeaseUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaseCreateOrConnectWithoutTenantInput | LeaseCreateOrConnectWithoutTenantInput[]
    createMany?: LeaseCreateManyTenantInputEnvelope
    connect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
  }

  export type MaintenanceRequestCreateNestedManyWithoutTenantInput = {
    create?: XOR<MaintenanceRequestCreateWithoutTenantInput, MaintenanceRequestUncheckedCreateWithoutTenantInput> | MaintenanceRequestCreateWithoutTenantInput[] | MaintenanceRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutTenantInput | MaintenanceRequestCreateOrConnectWithoutTenantInput[]
    createMany?: MaintenanceRequestCreateManyTenantInputEnvelope
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
  }

  export type RentPaymentCreateNestedManyWithoutTenantInput = {
    create?: XOR<RentPaymentCreateWithoutTenantInput, RentPaymentUncheckedCreateWithoutTenantInput> | RentPaymentCreateWithoutTenantInput[] | RentPaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: RentPaymentCreateOrConnectWithoutTenantInput | RentPaymentCreateOrConnectWithoutTenantInput[]
    createMany?: RentPaymentCreateManyTenantInputEnvelope
    connect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
  }

  export type UnitCreateNestedManyWithoutTenantInput = {
    create?: XOR<UnitCreateWithoutTenantInput, UnitUncheckedCreateWithoutTenantInput> | UnitCreateWithoutTenantInput[] | UnitUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutTenantInput | UnitCreateOrConnectWithoutTenantInput[]
    createMany?: UnitCreateManyTenantInputEnvelope
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
  }

  export type MaintenanceRequestCreateNestedManyWithoutReporterInput = {
    create?: XOR<MaintenanceRequestCreateWithoutReporterInput, MaintenanceRequestUncheckedCreateWithoutReporterInput> | MaintenanceRequestCreateWithoutReporterInput[] | MaintenanceRequestUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutReporterInput | MaintenanceRequestCreateOrConnectWithoutReporterInput[]
    createMany?: MaintenanceRequestCreateManyReporterInputEnvelope
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
  }

  export type LeaseUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<LeaseCreateWithoutTenantInput, LeaseUncheckedCreateWithoutTenantInput> | LeaseCreateWithoutTenantInput[] | LeaseUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaseCreateOrConnectWithoutTenantInput | LeaseCreateOrConnectWithoutTenantInput[]
    createMany?: LeaseCreateManyTenantInputEnvelope
    connect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
  }

  export type MaintenanceRequestUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<MaintenanceRequestCreateWithoutTenantInput, MaintenanceRequestUncheckedCreateWithoutTenantInput> | MaintenanceRequestCreateWithoutTenantInput[] | MaintenanceRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutTenantInput | MaintenanceRequestCreateOrConnectWithoutTenantInput[]
    createMany?: MaintenanceRequestCreateManyTenantInputEnvelope
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
  }

  export type RentPaymentUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<RentPaymentCreateWithoutTenantInput, RentPaymentUncheckedCreateWithoutTenantInput> | RentPaymentCreateWithoutTenantInput[] | RentPaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: RentPaymentCreateOrConnectWithoutTenantInput | RentPaymentCreateOrConnectWithoutTenantInput[]
    createMany?: RentPaymentCreateManyTenantInputEnvelope
    connect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
  }

  export type UnitUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<UnitCreateWithoutTenantInput, UnitUncheckedCreateWithoutTenantInput> | UnitCreateWithoutTenantInput[] | UnitUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutTenantInput | UnitCreateOrConnectWithoutTenantInput[]
    createMany?: UnitCreateManyTenantInputEnvelope
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
  }

  export type MaintenanceRequestUncheckedCreateNestedManyWithoutReporterInput = {
    create?: XOR<MaintenanceRequestCreateWithoutReporterInput, MaintenanceRequestUncheckedCreateWithoutReporterInput> | MaintenanceRequestCreateWithoutReporterInput[] | MaintenanceRequestUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutReporterInput | MaintenanceRequestCreateOrConnectWithoutReporterInput[]
    createMany?: MaintenanceRequestCreateManyReporterInputEnvelope
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
  }

  export type NullableEnumCivilStatusFieldUpdateOperationsInput = {
    set?: $Enums.CivilStatus | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput
    upsert?: UserUpsertWithoutTenantInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTenantInput, UserUpdateWithoutTenantInput>, UserUncheckedUpdateWithoutTenantInput>
  }

  export type LeaseUpdateManyWithoutTenantNestedInput = {
    create?: XOR<LeaseCreateWithoutTenantInput, LeaseUncheckedCreateWithoutTenantInput> | LeaseCreateWithoutTenantInput[] | LeaseUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaseCreateOrConnectWithoutTenantInput | LeaseCreateOrConnectWithoutTenantInput[]
    upsert?: LeaseUpsertWithWhereUniqueWithoutTenantInput | LeaseUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: LeaseCreateManyTenantInputEnvelope
    set?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    disconnect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    delete?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    connect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    update?: LeaseUpdateWithWhereUniqueWithoutTenantInput | LeaseUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: LeaseUpdateManyWithWhereWithoutTenantInput | LeaseUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: LeaseScalarWhereInput | LeaseScalarWhereInput[]
  }

  export type MaintenanceRequestUpdateManyWithoutTenantNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutTenantInput, MaintenanceRequestUncheckedCreateWithoutTenantInput> | MaintenanceRequestCreateWithoutTenantInput[] | MaintenanceRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutTenantInput | MaintenanceRequestCreateOrConnectWithoutTenantInput[]
    upsert?: MaintenanceRequestUpsertWithWhereUniqueWithoutTenantInput | MaintenanceRequestUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: MaintenanceRequestCreateManyTenantInputEnvelope
    set?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    disconnect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    delete?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    update?: MaintenanceRequestUpdateWithWhereUniqueWithoutTenantInput | MaintenanceRequestUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: MaintenanceRequestUpdateManyWithWhereWithoutTenantInput | MaintenanceRequestUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
  }

  export type RentPaymentUpdateManyWithoutTenantNestedInput = {
    create?: XOR<RentPaymentCreateWithoutTenantInput, RentPaymentUncheckedCreateWithoutTenantInput> | RentPaymentCreateWithoutTenantInput[] | RentPaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: RentPaymentCreateOrConnectWithoutTenantInput | RentPaymentCreateOrConnectWithoutTenantInput[]
    upsert?: RentPaymentUpsertWithWhereUniqueWithoutTenantInput | RentPaymentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: RentPaymentCreateManyTenantInputEnvelope
    set?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    disconnect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    delete?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    connect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    update?: RentPaymentUpdateWithWhereUniqueWithoutTenantInput | RentPaymentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: RentPaymentUpdateManyWithWhereWithoutTenantInput | RentPaymentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: RentPaymentScalarWhereInput | RentPaymentScalarWhereInput[]
  }

  export type UnitUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UnitCreateWithoutTenantInput, UnitUncheckedCreateWithoutTenantInput> | UnitCreateWithoutTenantInput[] | UnitUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutTenantInput | UnitCreateOrConnectWithoutTenantInput[]
    upsert?: UnitUpsertWithWhereUniqueWithoutTenantInput | UnitUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UnitCreateManyTenantInputEnvelope
    set?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    disconnect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    delete?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    update?: UnitUpdateWithWhereUniqueWithoutTenantInput | UnitUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UnitUpdateManyWithWhereWithoutTenantInput | UnitUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UnitScalarWhereInput | UnitScalarWhereInput[]
  }

  export type MaintenanceRequestUpdateManyWithoutReporterNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutReporterInput, MaintenanceRequestUncheckedCreateWithoutReporterInput> | MaintenanceRequestCreateWithoutReporterInput[] | MaintenanceRequestUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutReporterInput | MaintenanceRequestCreateOrConnectWithoutReporterInput[]
    upsert?: MaintenanceRequestUpsertWithWhereUniqueWithoutReporterInput | MaintenanceRequestUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: MaintenanceRequestCreateManyReporterInputEnvelope
    set?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    disconnect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    delete?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    update?: MaintenanceRequestUpdateWithWhereUniqueWithoutReporterInput | MaintenanceRequestUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: MaintenanceRequestUpdateManyWithWhereWithoutReporterInput | MaintenanceRequestUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
  }

  export type LeaseUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<LeaseCreateWithoutTenantInput, LeaseUncheckedCreateWithoutTenantInput> | LeaseCreateWithoutTenantInput[] | LeaseUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: LeaseCreateOrConnectWithoutTenantInput | LeaseCreateOrConnectWithoutTenantInput[]
    upsert?: LeaseUpsertWithWhereUniqueWithoutTenantInput | LeaseUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: LeaseCreateManyTenantInputEnvelope
    set?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    disconnect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    delete?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    connect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    update?: LeaseUpdateWithWhereUniqueWithoutTenantInput | LeaseUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: LeaseUpdateManyWithWhereWithoutTenantInput | LeaseUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: LeaseScalarWhereInput | LeaseScalarWhereInput[]
  }

  export type MaintenanceRequestUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutTenantInput, MaintenanceRequestUncheckedCreateWithoutTenantInput> | MaintenanceRequestCreateWithoutTenantInput[] | MaintenanceRequestUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutTenantInput | MaintenanceRequestCreateOrConnectWithoutTenantInput[]
    upsert?: MaintenanceRequestUpsertWithWhereUniqueWithoutTenantInput | MaintenanceRequestUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: MaintenanceRequestCreateManyTenantInputEnvelope
    set?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    disconnect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    delete?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    update?: MaintenanceRequestUpdateWithWhereUniqueWithoutTenantInput | MaintenanceRequestUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: MaintenanceRequestUpdateManyWithWhereWithoutTenantInput | MaintenanceRequestUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
  }

  export type RentPaymentUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<RentPaymentCreateWithoutTenantInput, RentPaymentUncheckedCreateWithoutTenantInput> | RentPaymentCreateWithoutTenantInput[] | RentPaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: RentPaymentCreateOrConnectWithoutTenantInput | RentPaymentCreateOrConnectWithoutTenantInput[]
    upsert?: RentPaymentUpsertWithWhereUniqueWithoutTenantInput | RentPaymentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: RentPaymentCreateManyTenantInputEnvelope
    set?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    disconnect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    delete?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    connect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    update?: RentPaymentUpdateWithWhereUniqueWithoutTenantInput | RentPaymentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: RentPaymentUpdateManyWithWhereWithoutTenantInput | RentPaymentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: RentPaymentScalarWhereInput | RentPaymentScalarWhereInput[]
  }

  export type UnitUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UnitCreateWithoutTenantInput, UnitUncheckedCreateWithoutTenantInput> | UnitCreateWithoutTenantInput[] | UnitUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutTenantInput | UnitCreateOrConnectWithoutTenantInput[]
    upsert?: UnitUpsertWithWhereUniqueWithoutTenantInput | UnitUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UnitCreateManyTenantInputEnvelope
    set?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    disconnect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    delete?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    update?: UnitUpdateWithWhereUniqueWithoutTenantInput | UnitUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UnitUpdateManyWithWhereWithoutTenantInput | UnitUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UnitScalarWhereInput | UnitScalarWhereInput[]
  }

  export type MaintenanceRequestUncheckedUpdateManyWithoutReporterNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutReporterInput, MaintenanceRequestUncheckedCreateWithoutReporterInput> | MaintenanceRequestCreateWithoutReporterInput[] | MaintenanceRequestUncheckedCreateWithoutReporterInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutReporterInput | MaintenanceRequestCreateOrConnectWithoutReporterInput[]
    upsert?: MaintenanceRequestUpsertWithWhereUniqueWithoutReporterInput | MaintenanceRequestUpsertWithWhereUniqueWithoutReporterInput[]
    createMany?: MaintenanceRequestCreateManyReporterInputEnvelope
    set?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    disconnect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    delete?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    update?: MaintenanceRequestUpdateWithWhereUniqueWithoutReporterInput | MaintenanceRequestUpdateWithWhereUniqueWithoutReporterInput[]
    updateMany?: MaintenanceRequestUpdateManyWithWhereWithoutReporterInput | MaintenanceRequestUpdateManyWithWhereWithoutReporterInput[]
    deleteMany?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTokensInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    connect?: UserWhereUniqueInput
  }

  export type EnumTokenTypeFieldUpdateOperationsInput = {
    set?: $Enums.TokenType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutTokensNestedInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    upsert?: UserUpsertWithoutTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTokensInput, UserUpdateWithoutTokensInput>, UserUncheckedUpdateWithoutTokensInput>
  }

  export type ImageCreateNestedManyWithoutRealEstateObjectInput = {
    create?: XOR<ImageCreateWithoutRealEstateObjectInput, ImageUncheckedCreateWithoutRealEstateObjectInput> | ImageCreateWithoutRealEstateObjectInput[] | ImageUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutRealEstateObjectInput | ImageCreateOrConnectWithoutRealEstateObjectInput[]
    createMany?: ImageCreateManyRealEstateObjectInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type AmenitiesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutRealEstateObjectInput, AmenitiesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput> | AmenitiesOnRealEstateCreateWithoutRealEstateObjectInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput | AmenitiesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput[]
    createMany?: AmenitiesOnRealEstateCreateManyRealEstateObjectInputEnvelope
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
  }

  export type PreferencesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput = {
    create?: XOR<PreferencesOnRealEstateCreateWithoutRealEstateObjectInput, PreferencesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput> | PreferencesOnRealEstateCreateWithoutRealEstateObjectInput[] | PreferencesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: PreferencesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput | PreferencesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput[]
    createMany?: PreferencesOnRealEstateCreateManyRealEstateObjectInputEnvelope
    connect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutRealEstateObjectInput = {
    create?: XOR<DocumentCreateWithoutRealEstateObjectInput, DocumentUncheckedCreateWithoutRealEstateObjectInput> | DocumentCreateWithoutRealEstateObjectInput[] | DocumentUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutRealEstateObjectInput | DocumentCreateOrConnectWithoutRealEstateObjectInput[]
    createMany?: DocumentCreateManyRealEstateObjectInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type UnitCreateNestedManyWithoutRealEstateObjectInput = {
    create?: XOR<UnitCreateWithoutRealEstateObjectInput, UnitUncheckedCreateWithoutRealEstateObjectInput> | UnitCreateWithoutRealEstateObjectInput[] | UnitUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutRealEstateObjectInput | UnitCreateOrConnectWithoutRealEstateObjectInput[]
    createMany?: UnitCreateManyRealEstateObjectInputEnvelope
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
  }

  export type ImageUncheckedCreateNestedManyWithoutRealEstateObjectInput = {
    create?: XOR<ImageCreateWithoutRealEstateObjectInput, ImageUncheckedCreateWithoutRealEstateObjectInput> | ImageCreateWithoutRealEstateObjectInput[] | ImageUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutRealEstateObjectInput | ImageCreateOrConnectWithoutRealEstateObjectInput[]
    createMany?: ImageCreateManyRealEstateObjectInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutRealEstateObjectInput, AmenitiesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput> | AmenitiesOnRealEstateCreateWithoutRealEstateObjectInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput | AmenitiesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput[]
    createMany?: AmenitiesOnRealEstateCreateManyRealEstateObjectInputEnvelope
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
  }

  export type PreferencesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput = {
    create?: XOR<PreferencesOnRealEstateCreateWithoutRealEstateObjectInput, PreferencesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput> | PreferencesOnRealEstateCreateWithoutRealEstateObjectInput[] | PreferencesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: PreferencesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput | PreferencesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput[]
    createMany?: PreferencesOnRealEstateCreateManyRealEstateObjectInputEnvelope
    connect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutRealEstateObjectInput = {
    create?: XOR<DocumentCreateWithoutRealEstateObjectInput, DocumentUncheckedCreateWithoutRealEstateObjectInput> | DocumentCreateWithoutRealEstateObjectInput[] | DocumentUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutRealEstateObjectInput | DocumentCreateOrConnectWithoutRealEstateObjectInput[]
    createMany?: DocumentCreateManyRealEstateObjectInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type UnitUncheckedCreateNestedManyWithoutRealEstateObjectInput = {
    create?: XOR<UnitCreateWithoutRealEstateObjectInput, UnitUncheckedCreateWithoutRealEstateObjectInput> | UnitCreateWithoutRealEstateObjectInput[] | UnitUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutRealEstateObjectInput | UnitCreateOrConnectWithoutRealEstateObjectInput[]
    createMany?: UnitCreateManyRealEstateObjectInputEnvelope
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
  }

  export type NullableEnumRealEstateTypeFieldUpdateOperationsInput = {
    set?: $Enums.RealEstateType | null
  }

  export type ImageUpdateManyWithoutRealEstateObjectNestedInput = {
    create?: XOR<ImageCreateWithoutRealEstateObjectInput, ImageUncheckedCreateWithoutRealEstateObjectInput> | ImageCreateWithoutRealEstateObjectInput[] | ImageUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutRealEstateObjectInput | ImageCreateOrConnectWithoutRealEstateObjectInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutRealEstateObjectInput | ImageUpsertWithWhereUniqueWithoutRealEstateObjectInput[]
    createMany?: ImageCreateManyRealEstateObjectInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutRealEstateObjectInput | ImageUpdateWithWhereUniqueWithoutRealEstateObjectInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutRealEstateObjectInput | ImageUpdateManyWithWhereWithoutRealEstateObjectInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type AmenitiesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutRealEstateObjectInput, AmenitiesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput> | AmenitiesOnRealEstateCreateWithoutRealEstateObjectInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput | AmenitiesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput[]
    upsert?: AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutRealEstateObjectInput | AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutRealEstateObjectInput[]
    createMany?: AmenitiesOnRealEstateCreateManyRealEstateObjectInputEnvelope
    set?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    disconnect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    delete?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    update?: AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutRealEstateObjectInput | AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutRealEstateObjectInput[]
    updateMany?: AmenitiesOnRealEstateUpdateManyWithWhereWithoutRealEstateObjectInput | AmenitiesOnRealEstateUpdateManyWithWhereWithoutRealEstateObjectInput[]
    deleteMany?: AmenitiesOnRealEstateScalarWhereInput | AmenitiesOnRealEstateScalarWhereInput[]
  }

  export type PreferencesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput = {
    create?: XOR<PreferencesOnRealEstateCreateWithoutRealEstateObjectInput, PreferencesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput> | PreferencesOnRealEstateCreateWithoutRealEstateObjectInput[] | PreferencesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: PreferencesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput | PreferencesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput[]
    upsert?: PreferencesOnRealEstateUpsertWithWhereUniqueWithoutRealEstateObjectInput | PreferencesOnRealEstateUpsertWithWhereUniqueWithoutRealEstateObjectInput[]
    createMany?: PreferencesOnRealEstateCreateManyRealEstateObjectInputEnvelope
    set?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    disconnect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    delete?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    connect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    update?: PreferencesOnRealEstateUpdateWithWhereUniqueWithoutRealEstateObjectInput | PreferencesOnRealEstateUpdateWithWhereUniqueWithoutRealEstateObjectInput[]
    updateMany?: PreferencesOnRealEstateUpdateManyWithWhereWithoutRealEstateObjectInput | PreferencesOnRealEstateUpdateManyWithWhereWithoutRealEstateObjectInput[]
    deleteMany?: PreferencesOnRealEstateScalarWhereInput | PreferencesOnRealEstateScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutRealEstateObjectNestedInput = {
    create?: XOR<DocumentCreateWithoutRealEstateObjectInput, DocumentUncheckedCreateWithoutRealEstateObjectInput> | DocumentCreateWithoutRealEstateObjectInput[] | DocumentUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutRealEstateObjectInput | DocumentCreateOrConnectWithoutRealEstateObjectInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutRealEstateObjectInput | DocumentUpsertWithWhereUniqueWithoutRealEstateObjectInput[]
    createMany?: DocumentCreateManyRealEstateObjectInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutRealEstateObjectInput | DocumentUpdateWithWhereUniqueWithoutRealEstateObjectInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutRealEstateObjectInput | DocumentUpdateManyWithWhereWithoutRealEstateObjectInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type UnitUpdateManyWithoutRealEstateObjectNestedInput = {
    create?: XOR<UnitCreateWithoutRealEstateObjectInput, UnitUncheckedCreateWithoutRealEstateObjectInput> | UnitCreateWithoutRealEstateObjectInput[] | UnitUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutRealEstateObjectInput | UnitCreateOrConnectWithoutRealEstateObjectInput[]
    upsert?: UnitUpsertWithWhereUniqueWithoutRealEstateObjectInput | UnitUpsertWithWhereUniqueWithoutRealEstateObjectInput[]
    createMany?: UnitCreateManyRealEstateObjectInputEnvelope
    set?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    disconnect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    delete?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    update?: UnitUpdateWithWhereUniqueWithoutRealEstateObjectInput | UnitUpdateWithWhereUniqueWithoutRealEstateObjectInput[]
    updateMany?: UnitUpdateManyWithWhereWithoutRealEstateObjectInput | UnitUpdateManyWithWhereWithoutRealEstateObjectInput[]
    deleteMany?: UnitScalarWhereInput | UnitScalarWhereInput[]
  }

  export type ImageUncheckedUpdateManyWithoutRealEstateObjectNestedInput = {
    create?: XOR<ImageCreateWithoutRealEstateObjectInput, ImageUncheckedCreateWithoutRealEstateObjectInput> | ImageCreateWithoutRealEstateObjectInput[] | ImageUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutRealEstateObjectInput | ImageCreateOrConnectWithoutRealEstateObjectInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutRealEstateObjectInput | ImageUpsertWithWhereUniqueWithoutRealEstateObjectInput[]
    createMany?: ImageCreateManyRealEstateObjectInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutRealEstateObjectInput | ImageUpdateWithWhereUniqueWithoutRealEstateObjectInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutRealEstateObjectInput | ImageUpdateManyWithWhereWithoutRealEstateObjectInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type AmenitiesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutRealEstateObjectInput, AmenitiesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput> | AmenitiesOnRealEstateCreateWithoutRealEstateObjectInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput | AmenitiesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput[]
    upsert?: AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutRealEstateObjectInput | AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutRealEstateObjectInput[]
    createMany?: AmenitiesOnRealEstateCreateManyRealEstateObjectInputEnvelope
    set?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    disconnect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    delete?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    update?: AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutRealEstateObjectInput | AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutRealEstateObjectInput[]
    updateMany?: AmenitiesOnRealEstateUpdateManyWithWhereWithoutRealEstateObjectInput | AmenitiesOnRealEstateUpdateManyWithWhereWithoutRealEstateObjectInput[]
    deleteMany?: AmenitiesOnRealEstateScalarWhereInput | AmenitiesOnRealEstateScalarWhereInput[]
  }

  export type PreferencesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput = {
    create?: XOR<PreferencesOnRealEstateCreateWithoutRealEstateObjectInput, PreferencesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput> | PreferencesOnRealEstateCreateWithoutRealEstateObjectInput[] | PreferencesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: PreferencesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput | PreferencesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput[]
    upsert?: PreferencesOnRealEstateUpsertWithWhereUniqueWithoutRealEstateObjectInput | PreferencesOnRealEstateUpsertWithWhereUniqueWithoutRealEstateObjectInput[]
    createMany?: PreferencesOnRealEstateCreateManyRealEstateObjectInputEnvelope
    set?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    disconnect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    delete?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    connect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    update?: PreferencesOnRealEstateUpdateWithWhereUniqueWithoutRealEstateObjectInput | PreferencesOnRealEstateUpdateWithWhereUniqueWithoutRealEstateObjectInput[]
    updateMany?: PreferencesOnRealEstateUpdateManyWithWhereWithoutRealEstateObjectInput | PreferencesOnRealEstateUpdateManyWithWhereWithoutRealEstateObjectInput[]
    deleteMany?: PreferencesOnRealEstateScalarWhereInput | PreferencesOnRealEstateScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutRealEstateObjectNestedInput = {
    create?: XOR<DocumentCreateWithoutRealEstateObjectInput, DocumentUncheckedCreateWithoutRealEstateObjectInput> | DocumentCreateWithoutRealEstateObjectInput[] | DocumentUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutRealEstateObjectInput | DocumentCreateOrConnectWithoutRealEstateObjectInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutRealEstateObjectInput | DocumentUpsertWithWhereUniqueWithoutRealEstateObjectInput[]
    createMany?: DocumentCreateManyRealEstateObjectInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutRealEstateObjectInput | DocumentUpdateWithWhereUniqueWithoutRealEstateObjectInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutRealEstateObjectInput | DocumentUpdateManyWithWhereWithoutRealEstateObjectInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type UnitUncheckedUpdateManyWithoutRealEstateObjectNestedInput = {
    create?: XOR<UnitCreateWithoutRealEstateObjectInput, UnitUncheckedCreateWithoutRealEstateObjectInput> | UnitCreateWithoutRealEstateObjectInput[] | UnitUncheckedCreateWithoutRealEstateObjectInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutRealEstateObjectInput | UnitCreateOrConnectWithoutRealEstateObjectInput[]
    upsert?: UnitUpsertWithWhereUniqueWithoutRealEstateObjectInput | UnitUpsertWithWhereUniqueWithoutRealEstateObjectInput[]
    createMany?: UnitCreateManyRealEstateObjectInputEnvelope
    set?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    disconnect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    delete?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    update?: UnitUpdateWithWhereUniqueWithoutRealEstateObjectInput | UnitUpdateWithWhereUniqueWithoutRealEstateObjectInput[]
    updateMany?: UnitUpdateManyWithWhereWithoutRealEstateObjectInput | UnitUpdateManyWithWhereWithoutRealEstateObjectInput[]
    deleteMany?: UnitScalarWhereInput | UnitScalarWhereInput[]
  }

  export type AmenitiesOnRealEstateCreateNestedManyWithoutAmenityInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutAmenityInput, AmenitiesOnRealEstateUncheckedCreateWithoutAmenityInput> | AmenitiesOnRealEstateCreateWithoutAmenityInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutAmenityInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutAmenityInput | AmenitiesOnRealEstateCreateOrConnectWithoutAmenityInput[]
    createMany?: AmenitiesOnRealEstateCreateManyAmenityInputEnvelope
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
  }

  export type AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutAmenityInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutAmenityInput, AmenitiesOnRealEstateUncheckedCreateWithoutAmenityInput> | AmenitiesOnRealEstateCreateWithoutAmenityInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutAmenityInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutAmenityInput | AmenitiesOnRealEstateCreateOrConnectWithoutAmenityInput[]
    createMany?: AmenitiesOnRealEstateCreateManyAmenityInputEnvelope
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
  }

  export type NullableEnumAmenityCategoryFieldUpdateOperationsInput = {
    set?: $Enums.AmenityCategory | null
  }

  export type AmenitiesOnRealEstateUpdateManyWithoutAmenityNestedInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutAmenityInput, AmenitiesOnRealEstateUncheckedCreateWithoutAmenityInput> | AmenitiesOnRealEstateCreateWithoutAmenityInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutAmenityInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutAmenityInput | AmenitiesOnRealEstateCreateOrConnectWithoutAmenityInput[]
    upsert?: AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutAmenityInput | AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutAmenityInput[]
    createMany?: AmenitiesOnRealEstateCreateManyAmenityInputEnvelope
    set?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    disconnect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    delete?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    update?: AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutAmenityInput | AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutAmenityInput[]
    updateMany?: AmenitiesOnRealEstateUpdateManyWithWhereWithoutAmenityInput | AmenitiesOnRealEstateUpdateManyWithWhereWithoutAmenityInput[]
    deleteMany?: AmenitiesOnRealEstateScalarWhereInput | AmenitiesOnRealEstateScalarWhereInput[]
  }

  export type AmenitiesOnRealEstateUncheckedUpdateManyWithoutAmenityNestedInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutAmenityInput, AmenitiesOnRealEstateUncheckedCreateWithoutAmenityInput> | AmenitiesOnRealEstateCreateWithoutAmenityInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutAmenityInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutAmenityInput | AmenitiesOnRealEstateCreateOrConnectWithoutAmenityInput[]
    upsert?: AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutAmenityInput | AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutAmenityInput[]
    createMany?: AmenitiesOnRealEstateCreateManyAmenityInputEnvelope
    set?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    disconnect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    delete?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    update?: AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutAmenityInput | AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutAmenityInput[]
    updateMany?: AmenitiesOnRealEstateUpdateManyWithWhereWithoutAmenityInput | AmenitiesOnRealEstateUpdateManyWithWhereWithoutAmenityInput[]
    deleteMany?: AmenitiesOnRealEstateScalarWhereInput | AmenitiesOnRealEstateScalarWhereInput[]
  }

  export type AmenityCreateNestedOneWithoutRealEstateObjectsInput = {
    create?: XOR<AmenityCreateWithoutRealEstateObjectsInput, AmenityUncheckedCreateWithoutRealEstateObjectsInput>
    connectOrCreate?: AmenityCreateOrConnectWithoutRealEstateObjectsInput
    connect?: AmenityWhereUniqueInput
  }

  export type RealEstateObjectCreateNestedOneWithoutAmenitiesInput = {
    create?: XOR<RealEstateObjectCreateWithoutAmenitiesInput, RealEstateObjectUncheckedCreateWithoutAmenitiesInput>
    connectOrCreate?: RealEstateObjectCreateOrConnectWithoutAmenitiesInput
    connect?: RealEstateObjectWhereUniqueInput
  }

  export type UnitCreateNestedOneWithoutAmenitiesInput = {
    create?: XOR<UnitCreateWithoutAmenitiesInput, UnitUncheckedCreateWithoutAmenitiesInput>
    connectOrCreate?: UnitCreateOrConnectWithoutAmenitiesInput
    connect?: UnitWhereUniqueInput
  }

  export type AmenityUpdateOneRequiredWithoutRealEstateObjectsNestedInput = {
    create?: XOR<AmenityCreateWithoutRealEstateObjectsInput, AmenityUncheckedCreateWithoutRealEstateObjectsInput>
    connectOrCreate?: AmenityCreateOrConnectWithoutRealEstateObjectsInput
    upsert?: AmenityUpsertWithoutRealEstateObjectsInput
    connect?: AmenityWhereUniqueInput
    update?: XOR<XOR<AmenityUpdateToOneWithWhereWithoutRealEstateObjectsInput, AmenityUpdateWithoutRealEstateObjectsInput>, AmenityUncheckedUpdateWithoutRealEstateObjectsInput>
  }

  export type RealEstateObjectUpdateOneRequiredWithoutAmenitiesNestedInput = {
    create?: XOR<RealEstateObjectCreateWithoutAmenitiesInput, RealEstateObjectUncheckedCreateWithoutAmenitiesInput>
    connectOrCreate?: RealEstateObjectCreateOrConnectWithoutAmenitiesInput
    upsert?: RealEstateObjectUpsertWithoutAmenitiesInput
    connect?: RealEstateObjectWhereUniqueInput
    update?: XOR<XOR<RealEstateObjectUpdateToOneWithWhereWithoutAmenitiesInput, RealEstateObjectUpdateWithoutAmenitiesInput>, RealEstateObjectUncheckedUpdateWithoutAmenitiesInput>
  }

  export type UnitUpdateOneWithoutAmenitiesNestedInput = {
    create?: XOR<UnitCreateWithoutAmenitiesInput, UnitUncheckedCreateWithoutAmenitiesInput>
    connectOrCreate?: UnitCreateOrConnectWithoutAmenitiesInput
    upsert?: UnitUpsertWithoutAmenitiesInput
    disconnect?: UnitWhereInput | boolean
    delete?: UnitWhereInput | boolean
    connect?: UnitWhereUniqueInput
    update?: XOR<XOR<UnitUpdateToOneWithWhereWithoutAmenitiesInput, UnitUpdateWithoutAmenitiesInput>, UnitUncheckedUpdateWithoutAmenitiesInput>
  }

  export type PreferencesOnRealEstateCreateNestedManyWithoutPreferenceInput = {
    create?: XOR<PreferencesOnRealEstateCreateWithoutPreferenceInput, PreferencesOnRealEstateUncheckedCreateWithoutPreferenceInput> | PreferencesOnRealEstateCreateWithoutPreferenceInput[] | PreferencesOnRealEstateUncheckedCreateWithoutPreferenceInput[]
    connectOrCreate?: PreferencesOnRealEstateCreateOrConnectWithoutPreferenceInput | PreferencesOnRealEstateCreateOrConnectWithoutPreferenceInput[]
    createMany?: PreferencesOnRealEstateCreateManyPreferenceInputEnvelope
    connect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
  }

  export type PreferencesOnRealEstateUncheckedCreateNestedManyWithoutPreferenceInput = {
    create?: XOR<PreferencesOnRealEstateCreateWithoutPreferenceInput, PreferencesOnRealEstateUncheckedCreateWithoutPreferenceInput> | PreferencesOnRealEstateCreateWithoutPreferenceInput[] | PreferencesOnRealEstateUncheckedCreateWithoutPreferenceInput[]
    connectOrCreate?: PreferencesOnRealEstateCreateOrConnectWithoutPreferenceInput | PreferencesOnRealEstateCreateOrConnectWithoutPreferenceInput[]
    createMany?: PreferencesOnRealEstateCreateManyPreferenceInputEnvelope
    connect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type PreferencesOnRealEstateUpdateManyWithoutPreferenceNestedInput = {
    create?: XOR<PreferencesOnRealEstateCreateWithoutPreferenceInput, PreferencesOnRealEstateUncheckedCreateWithoutPreferenceInput> | PreferencesOnRealEstateCreateWithoutPreferenceInput[] | PreferencesOnRealEstateUncheckedCreateWithoutPreferenceInput[]
    connectOrCreate?: PreferencesOnRealEstateCreateOrConnectWithoutPreferenceInput | PreferencesOnRealEstateCreateOrConnectWithoutPreferenceInput[]
    upsert?: PreferencesOnRealEstateUpsertWithWhereUniqueWithoutPreferenceInput | PreferencesOnRealEstateUpsertWithWhereUniqueWithoutPreferenceInput[]
    createMany?: PreferencesOnRealEstateCreateManyPreferenceInputEnvelope
    set?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    disconnect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    delete?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    connect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    update?: PreferencesOnRealEstateUpdateWithWhereUniqueWithoutPreferenceInput | PreferencesOnRealEstateUpdateWithWhereUniqueWithoutPreferenceInput[]
    updateMany?: PreferencesOnRealEstateUpdateManyWithWhereWithoutPreferenceInput | PreferencesOnRealEstateUpdateManyWithWhereWithoutPreferenceInput[]
    deleteMany?: PreferencesOnRealEstateScalarWhereInput | PreferencesOnRealEstateScalarWhereInput[]
  }

  export type PreferencesOnRealEstateUncheckedUpdateManyWithoutPreferenceNestedInput = {
    create?: XOR<PreferencesOnRealEstateCreateWithoutPreferenceInput, PreferencesOnRealEstateUncheckedCreateWithoutPreferenceInput> | PreferencesOnRealEstateCreateWithoutPreferenceInput[] | PreferencesOnRealEstateUncheckedCreateWithoutPreferenceInput[]
    connectOrCreate?: PreferencesOnRealEstateCreateOrConnectWithoutPreferenceInput | PreferencesOnRealEstateCreateOrConnectWithoutPreferenceInput[]
    upsert?: PreferencesOnRealEstateUpsertWithWhereUniqueWithoutPreferenceInput | PreferencesOnRealEstateUpsertWithWhereUniqueWithoutPreferenceInput[]
    createMany?: PreferencesOnRealEstateCreateManyPreferenceInputEnvelope
    set?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    disconnect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    delete?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    connect?: PreferencesOnRealEstateWhereUniqueInput | PreferencesOnRealEstateWhereUniqueInput[]
    update?: PreferencesOnRealEstateUpdateWithWhereUniqueWithoutPreferenceInput | PreferencesOnRealEstateUpdateWithWhereUniqueWithoutPreferenceInput[]
    updateMany?: PreferencesOnRealEstateUpdateManyWithWhereWithoutPreferenceInput | PreferencesOnRealEstateUpdateManyWithWhereWithoutPreferenceInput[]
    deleteMany?: PreferencesOnRealEstateScalarWhereInput | PreferencesOnRealEstateScalarWhereInput[]
  }

  export type PreferenceCreateNestedOneWithoutRealEstateObjectsInput = {
    create?: XOR<PreferenceCreateWithoutRealEstateObjectsInput, PreferenceUncheckedCreateWithoutRealEstateObjectsInput>
    connectOrCreate?: PreferenceCreateOrConnectWithoutRealEstateObjectsInput
    connect?: PreferenceWhereUniqueInput
  }

  export type RealEstateObjectCreateNestedOneWithoutPreferencesInput = {
    create?: XOR<RealEstateObjectCreateWithoutPreferencesInput, RealEstateObjectUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: RealEstateObjectCreateOrConnectWithoutPreferencesInput
    connect?: RealEstateObjectWhereUniqueInput
  }

  export type PreferenceUpdateOneRequiredWithoutRealEstateObjectsNestedInput = {
    create?: XOR<PreferenceCreateWithoutRealEstateObjectsInput, PreferenceUncheckedCreateWithoutRealEstateObjectsInput>
    connectOrCreate?: PreferenceCreateOrConnectWithoutRealEstateObjectsInput
    upsert?: PreferenceUpsertWithoutRealEstateObjectsInput
    connect?: PreferenceWhereUniqueInput
    update?: XOR<XOR<PreferenceUpdateToOneWithWhereWithoutRealEstateObjectsInput, PreferenceUpdateWithoutRealEstateObjectsInput>, PreferenceUncheckedUpdateWithoutRealEstateObjectsInput>
  }

  export type RealEstateObjectUpdateOneRequiredWithoutPreferencesNestedInput = {
    create?: XOR<RealEstateObjectCreateWithoutPreferencesInput, RealEstateObjectUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: RealEstateObjectCreateOrConnectWithoutPreferencesInput
    upsert?: RealEstateObjectUpsertWithoutPreferencesInput
    connect?: RealEstateObjectWhereUniqueInput
    update?: XOR<XOR<RealEstateObjectUpdateToOneWithWhereWithoutPreferencesInput, RealEstateObjectUpdateWithoutPreferencesInput>, RealEstateObjectUncheckedUpdateWithoutPreferencesInput>
  }

  export type AmenitiesOnRealEstateCreateNestedManyWithoutUnitInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutUnitInput, AmenitiesOnRealEstateUncheckedCreateWithoutUnitInput> | AmenitiesOnRealEstateCreateWithoutUnitInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutUnitInput | AmenitiesOnRealEstateCreateOrConnectWithoutUnitInput[]
    createMany?: AmenitiesOnRealEstateCreateManyUnitInputEnvelope
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutUnitInput = {
    create?: XOR<DocumentCreateWithoutUnitInput, DocumentUncheckedCreateWithoutUnitInput> | DocumentCreateWithoutUnitInput[] | DocumentUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUnitInput | DocumentCreateOrConnectWithoutUnitInput[]
    createMany?: DocumentCreateManyUnitInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ImageCreateNestedManyWithoutUnitInput = {
    create?: XOR<ImageCreateWithoutUnitInput, ImageUncheckedCreateWithoutUnitInput> | ImageCreateWithoutUnitInput[] | ImageUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUnitInput | ImageCreateOrConnectWithoutUnitInput[]
    createMany?: ImageCreateManyUnitInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type MaintenanceRequestCreateNestedManyWithoutUnitInput = {
    create?: XOR<MaintenanceRequestCreateWithoutUnitInput, MaintenanceRequestUncheckedCreateWithoutUnitInput> | MaintenanceRequestCreateWithoutUnitInput[] | MaintenanceRequestUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutUnitInput | MaintenanceRequestCreateOrConnectWithoutUnitInput[]
    createMany?: MaintenanceRequestCreateManyUnitInputEnvelope
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
  }

  export type RealEstateObjectCreateNestedOneWithoutUnitsInput = {
    create?: XOR<RealEstateObjectCreateWithoutUnitsInput, RealEstateObjectUncheckedCreateWithoutUnitsInput>
    connectOrCreate?: RealEstateObjectCreateOrConnectWithoutUnitsInput
    connect?: RealEstateObjectWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutUnitInput = {
    create?: XOR<TenantCreateWithoutUnitInput, TenantUncheckedCreateWithoutUnitInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUnitInput
    connect?: TenantWhereUniqueInput
  }

  export type LeaseCreateNestedManyWithoutUnitInput = {
    create?: XOR<LeaseCreateWithoutUnitInput, LeaseUncheckedCreateWithoutUnitInput> | LeaseCreateWithoutUnitInput[] | LeaseUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: LeaseCreateOrConnectWithoutUnitInput | LeaseCreateOrConnectWithoutUnitInput[]
    createMany?: LeaseCreateManyUnitInputEnvelope
    connect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
  }

  export type ExpenseCreateNestedManyWithoutUnitInput = {
    create?: XOR<ExpenseCreateWithoutUnitInput, ExpenseUncheckedCreateWithoutUnitInput> | ExpenseCreateWithoutUnitInput[] | ExpenseUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutUnitInput | ExpenseCreateOrConnectWithoutUnitInput[]
    createMany?: ExpenseCreateManyUnitInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutOwnedUnitsInput = {
    create?: XOR<UserCreateWithoutOwnedUnitsInput, UserUncheckedCreateWithoutOwnedUnitsInput> | UserCreateWithoutOwnedUnitsInput[] | UserUncheckedCreateWithoutOwnedUnitsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOwnedUnitsInput | UserCreateOrConnectWithoutOwnedUnitsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type OverwriteCodeCreateNestedManyWithoutUnitsInput = {
    create?: XOR<OverwriteCodeCreateWithoutUnitsInput, OverwriteCodeUncheckedCreateWithoutUnitsInput> | OverwriteCodeCreateWithoutUnitsInput[] | OverwriteCodeUncheckedCreateWithoutUnitsInput[]
    connectOrCreate?: OverwriteCodeCreateOrConnectWithoutUnitsInput | OverwriteCodeCreateOrConnectWithoutUnitsInput[]
    connect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
  }

  export type AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutUnitInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutUnitInput, AmenitiesOnRealEstateUncheckedCreateWithoutUnitInput> | AmenitiesOnRealEstateCreateWithoutUnitInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutUnitInput | AmenitiesOnRealEstateCreateOrConnectWithoutUnitInput[]
    createMany?: AmenitiesOnRealEstateCreateManyUnitInputEnvelope
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutUnitInput = {
    create?: XOR<DocumentCreateWithoutUnitInput, DocumentUncheckedCreateWithoutUnitInput> | DocumentCreateWithoutUnitInput[] | DocumentUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUnitInput | DocumentCreateOrConnectWithoutUnitInput[]
    createMany?: DocumentCreateManyUnitInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ImageUncheckedCreateNestedManyWithoutUnitInput = {
    create?: XOR<ImageCreateWithoutUnitInput, ImageUncheckedCreateWithoutUnitInput> | ImageCreateWithoutUnitInput[] | ImageUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUnitInput | ImageCreateOrConnectWithoutUnitInput[]
    createMany?: ImageCreateManyUnitInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type MaintenanceRequestUncheckedCreateNestedManyWithoutUnitInput = {
    create?: XOR<MaintenanceRequestCreateWithoutUnitInput, MaintenanceRequestUncheckedCreateWithoutUnitInput> | MaintenanceRequestCreateWithoutUnitInput[] | MaintenanceRequestUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutUnitInput | MaintenanceRequestCreateOrConnectWithoutUnitInput[]
    createMany?: MaintenanceRequestCreateManyUnitInputEnvelope
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
  }

  export type LeaseUncheckedCreateNestedManyWithoutUnitInput = {
    create?: XOR<LeaseCreateWithoutUnitInput, LeaseUncheckedCreateWithoutUnitInput> | LeaseCreateWithoutUnitInput[] | LeaseUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: LeaseCreateOrConnectWithoutUnitInput | LeaseCreateOrConnectWithoutUnitInput[]
    createMany?: LeaseCreateManyUnitInputEnvelope
    connect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
  }

  export type ExpenseUncheckedCreateNestedManyWithoutUnitInput = {
    create?: XOR<ExpenseCreateWithoutUnitInput, ExpenseUncheckedCreateWithoutUnitInput> | ExpenseCreateWithoutUnitInput[] | ExpenseUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutUnitInput | ExpenseCreateOrConnectWithoutUnitInput[]
    createMany?: ExpenseCreateManyUnitInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutOwnedUnitsInput = {
    create?: XOR<UserCreateWithoutOwnedUnitsInput, UserUncheckedCreateWithoutOwnedUnitsInput> | UserCreateWithoutOwnedUnitsInput[] | UserUncheckedCreateWithoutOwnedUnitsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOwnedUnitsInput | UserCreateOrConnectWithoutOwnedUnitsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type OverwriteCodeUncheckedCreateNestedManyWithoutUnitsInput = {
    create?: XOR<OverwriteCodeCreateWithoutUnitsInput, OverwriteCodeUncheckedCreateWithoutUnitsInput> | OverwriteCodeCreateWithoutUnitsInput[] | OverwriteCodeUncheckedCreateWithoutUnitsInput[]
    connectOrCreate?: OverwriteCodeCreateOrConnectWithoutUnitsInput | OverwriteCodeCreateOrConnectWithoutUnitsInput[]
    connect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
  }

  export type NullableEnumListingStatusFieldUpdateOperationsInput = {
    set?: $Enums.ListingStatus | null
  }

  export type AmenitiesOnRealEstateUpdateManyWithoutUnitNestedInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutUnitInput, AmenitiesOnRealEstateUncheckedCreateWithoutUnitInput> | AmenitiesOnRealEstateCreateWithoutUnitInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutUnitInput | AmenitiesOnRealEstateCreateOrConnectWithoutUnitInput[]
    upsert?: AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutUnitInput | AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: AmenitiesOnRealEstateCreateManyUnitInputEnvelope
    set?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    disconnect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    delete?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    update?: AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutUnitInput | AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: AmenitiesOnRealEstateUpdateManyWithWhereWithoutUnitInput | AmenitiesOnRealEstateUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: AmenitiesOnRealEstateScalarWhereInput | AmenitiesOnRealEstateScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutUnitNestedInput = {
    create?: XOR<DocumentCreateWithoutUnitInput, DocumentUncheckedCreateWithoutUnitInput> | DocumentCreateWithoutUnitInput[] | DocumentUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUnitInput | DocumentCreateOrConnectWithoutUnitInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUnitInput | DocumentUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: DocumentCreateManyUnitInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUnitInput | DocumentUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUnitInput | DocumentUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ImageUpdateManyWithoutUnitNestedInput = {
    create?: XOR<ImageCreateWithoutUnitInput, ImageUncheckedCreateWithoutUnitInput> | ImageCreateWithoutUnitInput[] | ImageUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUnitInput | ImageCreateOrConnectWithoutUnitInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutUnitInput | ImageUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: ImageCreateManyUnitInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutUnitInput | ImageUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutUnitInput | ImageUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type MaintenanceRequestUpdateManyWithoutUnitNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutUnitInput, MaintenanceRequestUncheckedCreateWithoutUnitInput> | MaintenanceRequestCreateWithoutUnitInput[] | MaintenanceRequestUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutUnitInput | MaintenanceRequestCreateOrConnectWithoutUnitInput[]
    upsert?: MaintenanceRequestUpsertWithWhereUniqueWithoutUnitInput | MaintenanceRequestUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: MaintenanceRequestCreateManyUnitInputEnvelope
    set?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    disconnect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    delete?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    update?: MaintenanceRequestUpdateWithWhereUniqueWithoutUnitInput | MaintenanceRequestUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: MaintenanceRequestUpdateManyWithWhereWithoutUnitInput | MaintenanceRequestUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
  }

  export type RealEstateObjectUpdateOneRequiredWithoutUnitsNestedInput = {
    create?: XOR<RealEstateObjectCreateWithoutUnitsInput, RealEstateObjectUncheckedCreateWithoutUnitsInput>
    connectOrCreate?: RealEstateObjectCreateOrConnectWithoutUnitsInput
    upsert?: RealEstateObjectUpsertWithoutUnitsInput
    connect?: RealEstateObjectWhereUniqueInput
    update?: XOR<XOR<RealEstateObjectUpdateToOneWithWhereWithoutUnitsInput, RealEstateObjectUpdateWithoutUnitsInput>, RealEstateObjectUncheckedUpdateWithoutUnitsInput>
  }

  export type TenantUpdateOneWithoutUnitNestedInput = {
    create?: XOR<TenantCreateWithoutUnitInput, TenantUncheckedCreateWithoutUnitInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUnitInput
    upsert?: TenantUpsertWithoutUnitInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutUnitInput, TenantUpdateWithoutUnitInput>, TenantUncheckedUpdateWithoutUnitInput>
  }

  export type LeaseUpdateManyWithoutUnitNestedInput = {
    create?: XOR<LeaseCreateWithoutUnitInput, LeaseUncheckedCreateWithoutUnitInput> | LeaseCreateWithoutUnitInput[] | LeaseUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: LeaseCreateOrConnectWithoutUnitInput | LeaseCreateOrConnectWithoutUnitInput[]
    upsert?: LeaseUpsertWithWhereUniqueWithoutUnitInput | LeaseUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: LeaseCreateManyUnitInputEnvelope
    set?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    disconnect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    delete?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    connect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    update?: LeaseUpdateWithWhereUniqueWithoutUnitInput | LeaseUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: LeaseUpdateManyWithWhereWithoutUnitInput | LeaseUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: LeaseScalarWhereInput | LeaseScalarWhereInput[]
  }

  export type ExpenseUpdateManyWithoutUnitNestedInput = {
    create?: XOR<ExpenseCreateWithoutUnitInput, ExpenseUncheckedCreateWithoutUnitInput> | ExpenseCreateWithoutUnitInput[] | ExpenseUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutUnitInput | ExpenseCreateOrConnectWithoutUnitInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutUnitInput | ExpenseUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: ExpenseCreateManyUnitInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutUnitInput | ExpenseUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutUnitInput | ExpenseUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type UserUpdateManyWithoutOwnedUnitsNestedInput = {
    create?: XOR<UserCreateWithoutOwnedUnitsInput, UserUncheckedCreateWithoutOwnedUnitsInput> | UserCreateWithoutOwnedUnitsInput[] | UserUncheckedCreateWithoutOwnedUnitsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOwnedUnitsInput | UserCreateOrConnectWithoutOwnedUnitsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOwnedUnitsInput | UserUpsertWithWhereUniqueWithoutOwnedUnitsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOwnedUnitsInput | UserUpdateWithWhereUniqueWithoutOwnedUnitsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOwnedUnitsInput | UserUpdateManyWithWhereWithoutOwnedUnitsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type OverwriteCodeUpdateManyWithoutUnitsNestedInput = {
    create?: XOR<OverwriteCodeCreateWithoutUnitsInput, OverwriteCodeUncheckedCreateWithoutUnitsInput> | OverwriteCodeCreateWithoutUnitsInput[] | OverwriteCodeUncheckedCreateWithoutUnitsInput[]
    connectOrCreate?: OverwriteCodeCreateOrConnectWithoutUnitsInput | OverwriteCodeCreateOrConnectWithoutUnitsInput[]
    upsert?: OverwriteCodeUpsertWithWhereUniqueWithoutUnitsInput | OverwriteCodeUpsertWithWhereUniqueWithoutUnitsInput[]
    set?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    disconnect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    delete?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    connect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    update?: OverwriteCodeUpdateWithWhereUniqueWithoutUnitsInput | OverwriteCodeUpdateWithWhereUniqueWithoutUnitsInput[]
    updateMany?: OverwriteCodeUpdateManyWithWhereWithoutUnitsInput | OverwriteCodeUpdateManyWithWhereWithoutUnitsInput[]
    deleteMany?: OverwriteCodeScalarWhereInput | OverwriteCodeScalarWhereInput[]
  }

  export type AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitNestedInput = {
    create?: XOR<AmenitiesOnRealEstateCreateWithoutUnitInput, AmenitiesOnRealEstateUncheckedCreateWithoutUnitInput> | AmenitiesOnRealEstateCreateWithoutUnitInput[] | AmenitiesOnRealEstateUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: AmenitiesOnRealEstateCreateOrConnectWithoutUnitInput | AmenitiesOnRealEstateCreateOrConnectWithoutUnitInput[]
    upsert?: AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutUnitInput | AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: AmenitiesOnRealEstateCreateManyUnitInputEnvelope
    set?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    disconnect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    delete?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    connect?: AmenitiesOnRealEstateWhereUniqueInput | AmenitiesOnRealEstateWhereUniqueInput[]
    update?: AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutUnitInput | AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: AmenitiesOnRealEstateUpdateManyWithWhereWithoutUnitInput | AmenitiesOnRealEstateUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: AmenitiesOnRealEstateScalarWhereInput | AmenitiesOnRealEstateScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutUnitNestedInput = {
    create?: XOR<DocumentCreateWithoutUnitInput, DocumentUncheckedCreateWithoutUnitInput> | DocumentCreateWithoutUnitInput[] | DocumentUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUnitInput | DocumentCreateOrConnectWithoutUnitInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUnitInput | DocumentUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: DocumentCreateManyUnitInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUnitInput | DocumentUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUnitInput | DocumentUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ImageUncheckedUpdateManyWithoutUnitNestedInput = {
    create?: XOR<ImageCreateWithoutUnitInput, ImageUncheckedCreateWithoutUnitInput> | ImageCreateWithoutUnitInput[] | ImageUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutUnitInput | ImageCreateOrConnectWithoutUnitInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutUnitInput | ImageUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: ImageCreateManyUnitInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutUnitInput | ImageUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutUnitInput | ImageUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type MaintenanceRequestUncheckedUpdateManyWithoutUnitNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutUnitInput, MaintenanceRequestUncheckedCreateWithoutUnitInput> | MaintenanceRequestCreateWithoutUnitInput[] | MaintenanceRequestUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutUnitInput | MaintenanceRequestCreateOrConnectWithoutUnitInput[]
    upsert?: MaintenanceRequestUpsertWithWhereUniqueWithoutUnitInput | MaintenanceRequestUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: MaintenanceRequestCreateManyUnitInputEnvelope
    set?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    disconnect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    delete?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    update?: MaintenanceRequestUpdateWithWhereUniqueWithoutUnitInput | MaintenanceRequestUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: MaintenanceRequestUpdateManyWithWhereWithoutUnitInput | MaintenanceRequestUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
  }

  export type LeaseUncheckedUpdateManyWithoutUnitNestedInput = {
    create?: XOR<LeaseCreateWithoutUnitInput, LeaseUncheckedCreateWithoutUnitInput> | LeaseCreateWithoutUnitInput[] | LeaseUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: LeaseCreateOrConnectWithoutUnitInput | LeaseCreateOrConnectWithoutUnitInput[]
    upsert?: LeaseUpsertWithWhereUniqueWithoutUnitInput | LeaseUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: LeaseCreateManyUnitInputEnvelope
    set?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    disconnect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    delete?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    connect?: LeaseWhereUniqueInput | LeaseWhereUniqueInput[]
    update?: LeaseUpdateWithWhereUniqueWithoutUnitInput | LeaseUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: LeaseUpdateManyWithWhereWithoutUnitInput | LeaseUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: LeaseScalarWhereInput | LeaseScalarWhereInput[]
  }

  export type ExpenseUncheckedUpdateManyWithoutUnitNestedInput = {
    create?: XOR<ExpenseCreateWithoutUnitInput, ExpenseUncheckedCreateWithoutUnitInput> | ExpenseCreateWithoutUnitInput[] | ExpenseUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutUnitInput | ExpenseCreateOrConnectWithoutUnitInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutUnitInput | ExpenseUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: ExpenseCreateManyUnitInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutUnitInput | ExpenseUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutUnitInput | ExpenseUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutOwnedUnitsNestedInput = {
    create?: XOR<UserCreateWithoutOwnedUnitsInput, UserUncheckedCreateWithoutOwnedUnitsInput> | UserCreateWithoutOwnedUnitsInput[] | UserUncheckedCreateWithoutOwnedUnitsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOwnedUnitsInput | UserCreateOrConnectWithoutOwnedUnitsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOwnedUnitsInput | UserUpsertWithWhereUniqueWithoutOwnedUnitsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOwnedUnitsInput | UserUpdateWithWhereUniqueWithoutOwnedUnitsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOwnedUnitsInput | UserUpdateManyWithWhereWithoutOwnedUnitsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type OverwriteCodeUncheckedUpdateManyWithoutUnitsNestedInput = {
    create?: XOR<OverwriteCodeCreateWithoutUnitsInput, OverwriteCodeUncheckedCreateWithoutUnitsInput> | OverwriteCodeCreateWithoutUnitsInput[] | OverwriteCodeUncheckedCreateWithoutUnitsInput[]
    connectOrCreate?: OverwriteCodeCreateOrConnectWithoutUnitsInput | OverwriteCodeCreateOrConnectWithoutUnitsInput[]
    upsert?: OverwriteCodeUpsertWithWhereUniqueWithoutUnitsInput | OverwriteCodeUpsertWithWhereUniqueWithoutUnitsInput[]
    set?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    disconnect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    delete?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    connect?: OverwriteCodeWhereUniqueInput | OverwriteCodeWhereUniqueInput[]
    update?: OverwriteCodeUpdateWithWhereUniqueWithoutUnitsInput | OverwriteCodeUpdateWithWhereUniqueWithoutUnitsInput[]
    updateMany?: OverwriteCodeUpdateManyWithWhereWithoutUnitsInput | OverwriteCodeUpdateManyWithWhereWithoutUnitsInput[]
    deleteMany?: OverwriteCodeScalarWhereInput | OverwriteCodeScalarWhereInput[]
  }

  export type DocumentCreateNestedManyWithoutLeaseInput = {
    create?: XOR<DocumentCreateWithoutLeaseInput, DocumentUncheckedCreateWithoutLeaseInput> | DocumentCreateWithoutLeaseInput[] | DocumentUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLeaseInput | DocumentCreateOrConnectWithoutLeaseInput[]
    createMany?: DocumentCreateManyLeaseInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutLeasesInput = {
    create?: XOR<TenantCreateWithoutLeasesInput, TenantUncheckedCreateWithoutLeasesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutLeasesInput
    connect?: TenantWhereUniqueInput
  }

  export type UnitCreateNestedOneWithoutLeasesInput = {
    create?: XOR<UnitCreateWithoutLeasesInput, UnitUncheckedCreateWithoutLeasesInput>
    connectOrCreate?: UnitCreateOrConnectWithoutLeasesInput
    connect?: UnitWhereUniqueInput
  }

  export type ExpenseCreateNestedManyWithoutLeaseInput = {
    create?: XOR<ExpenseCreateWithoutLeaseInput, ExpenseUncheckedCreateWithoutLeaseInput> | ExpenseCreateWithoutLeaseInput[] | ExpenseUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutLeaseInput | ExpenseCreateOrConnectWithoutLeaseInput[]
    createMany?: ExpenseCreateManyLeaseInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type RentPaymentCreateNestedManyWithoutLeaseInput = {
    create?: XOR<RentPaymentCreateWithoutLeaseInput, RentPaymentUncheckedCreateWithoutLeaseInput> | RentPaymentCreateWithoutLeaseInput[] | RentPaymentUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: RentPaymentCreateOrConnectWithoutLeaseInput | RentPaymentCreateOrConnectWithoutLeaseInput[]
    createMany?: RentPaymentCreateManyLeaseInputEnvelope
    connect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
  }

  export type LeasePaymentScheduleCreateNestedManyWithoutLeaseInput = {
    create?: XOR<LeasePaymentScheduleCreateWithoutLeaseInput, LeasePaymentScheduleUncheckedCreateWithoutLeaseInput> | LeasePaymentScheduleCreateWithoutLeaseInput[] | LeasePaymentScheduleUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: LeasePaymentScheduleCreateOrConnectWithoutLeaseInput | LeasePaymentScheduleCreateOrConnectWithoutLeaseInput[]
    createMany?: LeasePaymentScheduleCreateManyLeaseInputEnvelope
    connect?: LeasePaymentScheduleWhereUniqueInput | LeasePaymentScheduleWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutLeaseInput = {
    create?: XOR<DocumentCreateWithoutLeaseInput, DocumentUncheckedCreateWithoutLeaseInput> | DocumentCreateWithoutLeaseInput[] | DocumentUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLeaseInput | DocumentCreateOrConnectWithoutLeaseInput[]
    createMany?: DocumentCreateManyLeaseInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ExpenseUncheckedCreateNestedManyWithoutLeaseInput = {
    create?: XOR<ExpenseCreateWithoutLeaseInput, ExpenseUncheckedCreateWithoutLeaseInput> | ExpenseCreateWithoutLeaseInput[] | ExpenseUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutLeaseInput | ExpenseCreateOrConnectWithoutLeaseInput[]
    createMany?: ExpenseCreateManyLeaseInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type RentPaymentUncheckedCreateNestedManyWithoutLeaseInput = {
    create?: XOR<RentPaymentCreateWithoutLeaseInput, RentPaymentUncheckedCreateWithoutLeaseInput> | RentPaymentCreateWithoutLeaseInput[] | RentPaymentUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: RentPaymentCreateOrConnectWithoutLeaseInput | RentPaymentCreateOrConnectWithoutLeaseInput[]
    createMany?: RentPaymentCreateManyLeaseInputEnvelope
    connect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
  }

  export type LeasePaymentScheduleUncheckedCreateNestedManyWithoutLeaseInput = {
    create?: XOR<LeasePaymentScheduleCreateWithoutLeaseInput, LeasePaymentScheduleUncheckedCreateWithoutLeaseInput> | LeasePaymentScheduleCreateWithoutLeaseInput[] | LeasePaymentScheduleUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: LeasePaymentScheduleCreateOrConnectWithoutLeaseInput | LeasePaymentScheduleCreateOrConnectWithoutLeaseInput[]
    createMany?: LeasePaymentScheduleCreateManyLeaseInputEnvelope
    connect?: LeasePaymentScheduleWhereUniqueInput | LeasePaymentScheduleWhereUniqueInput[]
  }

  export type NullableEnumLeaseStatusFieldUpdateOperationsInput = {
    set?: $Enums.LeaseStatus | null
  }

  export type NullableEnumPaymentFrequencyFieldUpdateOperationsInput = {
    set?: $Enums.PaymentFrequency | null
  }

  export type DocumentUpdateManyWithoutLeaseNestedInput = {
    create?: XOR<DocumentCreateWithoutLeaseInput, DocumentUncheckedCreateWithoutLeaseInput> | DocumentCreateWithoutLeaseInput[] | DocumentUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLeaseInput | DocumentCreateOrConnectWithoutLeaseInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutLeaseInput | DocumentUpsertWithWhereUniqueWithoutLeaseInput[]
    createMany?: DocumentCreateManyLeaseInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutLeaseInput | DocumentUpdateWithWhereUniqueWithoutLeaseInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutLeaseInput | DocumentUpdateManyWithWhereWithoutLeaseInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type TenantUpdateOneWithoutLeasesNestedInput = {
    create?: XOR<TenantCreateWithoutLeasesInput, TenantUncheckedCreateWithoutLeasesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutLeasesInput
    upsert?: TenantUpsertWithoutLeasesInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutLeasesInput, TenantUpdateWithoutLeasesInput>, TenantUncheckedUpdateWithoutLeasesInput>
  }

  export type UnitUpdateOneWithoutLeasesNestedInput = {
    create?: XOR<UnitCreateWithoutLeasesInput, UnitUncheckedCreateWithoutLeasesInput>
    connectOrCreate?: UnitCreateOrConnectWithoutLeasesInput
    upsert?: UnitUpsertWithoutLeasesInput
    disconnect?: UnitWhereInput | boolean
    delete?: UnitWhereInput | boolean
    connect?: UnitWhereUniqueInput
    update?: XOR<XOR<UnitUpdateToOneWithWhereWithoutLeasesInput, UnitUpdateWithoutLeasesInput>, UnitUncheckedUpdateWithoutLeasesInput>
  }

  export type ExpenseUpdateManyWithoutLeaseNestedInput = {
    create?: XOR<ExpenseCreateWithoutLeaseInput, ExpenseUncheckedCreateWithoutLeaseInput> | ExpenseCreateWithoutLeaseInput[] | ExpenseUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutLeaseInput | ExpenseCreateOrConnectWithoutLeaseInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutLeaseInput | ExpenseUpsertWithWhereUniqueWithoutLeaseInput[]
    createMany?: ExpenseCreateManyLeaseInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutLeaseInput | ExpenseUpdateWithWhereUniqueWithoutLeaseInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutLeaseInput | ExpenseUpdateManyWithWhereWithoutLeaseInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type RentPaymentUpdateManyWithoutLeaseNestedInput = {
    create?: XOR<RentPaymentCreateWithoutLeaseInput, RentPaymentUncheckedCreateWithoutLeaseInput> | RentPaymentCreateWithoutLeaseInput[] | RentPaymentUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: RentPaymentCreateOrConnectWithoutLeaseInput | RentPaymentCreateOrConnectWithoutLeaseInput[]
    upsert?: RentPaymentUpsertWithWhereUniqueWithoutLeaseInput | RentPaymentUpsertWithWhereUniqueWithoutLeaseInput[]
    createMany?: RentPaymentCreateManyLeaseInputEnvelope
    set?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    disconnect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    delete?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    connect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    update?: RentPaymentUpdateWithWhereUniqueWithoutLeaseInput | RentPaymentUpdateWithWhereUniqueWithoutLeaseInput[]
    updateMany?: RentPaymentUpdateManyWithWhereWithoutLeaseInput | RentPaymentUpdateManyWithWhereWithoutLeaseInput[]
    deleteMany?: RentPaymentScalarWhereInput | RentPaymentScalarWhereInput[]
  }

  export type LeasePaymentScheduleUpdateManyWithoutLeaseNestedInput = {
    create?: XOR<LeasePaymentScheduleCreateWithoutLeaseInput, LeasePaymentScheduleUncheckedCreateWithoutLeaseInput> | LeasePaymentScheduleCreateWithoutLeaseInput[] | LeasePaymentScheduleUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: LeasePaymentScheduleCreateOrConnectWithoutLeaseInput | LeasePaymentScheduleCreateOrConnectWithoutLeaseInput[]
    upsert?: LeasePaymentScheduleUpsertWithWhereUniqueWithoutLeaseInput | LeasePaymentScheduleUpsertWithWhereUniqueWithoutLeaseInput[]
    createMany?: LeasePaymentScheduleCreateManyLeaseInputEnvelope
    set?: LeasePaymentScheduleWhereUniqueInput | LeasePaymentScheduleWhereUniqueInput[]
    disconnect?: LeasePaymentScheduleWhereUniqueInput | LeasePaymentScheduleWhereUniqueInput[]
    delete?: LeasePaymentScheduleWhereUniqueInput | LeasePaymentScheduleWhereUniqueInput[]
    connect?: LeasePaymentScheduleWhereUniqueInput | LeasePaymentScheduleWhereUniqueInput[]
    update?: LeasePaymentScheduleUpdateWithWhereUniqueWithoutLeaseInput | LeasePaymentScheduleUpdateWithWhereUniqueWithoutLeaseInput[]
    updateMany?: LeasePaymentScheduleUpdateManyWithWhereWithoutLeaseInput | LeasePaymentScheduleUpdateManyWithWhereWithoutLeaseInput[]
    deleteMany?: LeasePaymentScheduleScalarWhereInput | LeasePaymentScheduleScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutLeaseNestedInput = {
    create?: XOR<DocumentCreateWithoutLeaseInput, DocumentUncheckedCreateWithoutLeaseInput> | DocumentCreateWithoutLeaseInput[] | DocumentUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLeaseInput | DocumentCreateOrConnectWithoutLeaseInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutLeaseInput | DocumentUpsertWithWhereUniqueWithoutLeaseInput[]
    createMany?: DocumentCreateManyLeaseInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutLeaseInput | DocumentUpdateWithWhereUniqueWithoutLeaseInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutLeaseInput | DocumentUpdateManyWithWhereWithoutLeaseInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ExpenseUncheckedUpdateManyWithoutLeaseNestedInput = {
    create?: XOR<ExpenseCreateWithoutLeaseInput, ExpenseUncheckedCreateWithoutLeaseInput> | ExpenseCreateWithoutLeaseInput[] | ExpenseUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutLeaseInput | ExpenseCreateOrConnectWithoutLeaseInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutLeaseInput | ExpenseUpsertWithWhereUniqueWithoutLeaseInput[]
    createMany?: ExpenseCreateManyLeaseInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutLeaseInput | ExpenseUpdateWithWhereUniqueWithoutLeaseInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutLeaseInput | ExpenseUpdateManyWithWhereWithoutLeaseInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type RentPaymentUncheckedUpdateManyWithoutLeaseNestedInput = {
    create?: XOR<RentPaymentCreateWithoutLeaseInput, RentPaymentUncheckedCreateWithoutLeaseInput> | RentPaymentCreateWithoutLeaseInput[] | RentPaymentUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: RentPaymentCreateOrConnectWithoutLeaseInput | RentPaymentCreateOrConnectWithoutLeaseInput[]
    upsert?: RentPaymentUpsertWithWhereUniqueWithoutLeaseInput | RentPaymentUpsertWithWhereUniqueWithoutLeaseInput[]
    createMany?: RentPaymentCreateManyLeaseInputEnvelope
    set?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    disconnect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    delete?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    connect?: RentPaymentWhereUniqueInput | RentPaymentWhereUniqueInput[]
    update?: RentPaymentUpdateWithWhereUniqueWithoutLeaseInput | RentPaymentUpdateWithWhereUniqueWithoutLeaseInput[]
    updateMany?: RentPaymentUpdateManyWithWhereWithoutLeaseInput | RentPaymentUpdateManyWithWhereWithoutLeaseInput[]
    deleteMany?: RentPaymentScalarWhereInput | RentPaymentScalarWhereInput[]
  }

  export type LeasePaymentScheduleUncheckedUpdateManyWithoutLeaseNestedInput = {
    create?: XOR<LeasePaymentScheduleCreateWithoutLeaseInput, LeasePaymentScheduleUncheckedCreateWithoutLeaseInput> | LeasePaymentScheduleCreateWithoutLeaseInput[] | LeasePaymentScheduleUncheckedCreateWithoutLeaseInput[]
    connectOrCreate?: LeasePaymentScheduleCreateOrConnectWithoutLeaseInput | LeasePaymentScheduleCreateOrConnectWithoutLeaseInput[]
    upsert?: LeasePaymentScheduleUpsertWithWhereUniqueWithoutLeaseInput | LeasePaymentScheduleUpsertWithWhereUniqueWithoutLeaseInput[]
    createMany?: LeasePaymentScheduleCreateManyLeaseInputEnvelope
    set?: LeasePaymentScheduleWhereUniqueInput | LeasePaymentScheduleWhereUniqueInput[]
    disconnect?: LeasePaymentScheduleWhereUniqueInput | LeasePaymentScheduleWhereUniqueInput[]
    delete?: LeasePaymentScheduleWhereUniqueInput | LeasePaymentScheduleWhereUniqueInput[]
    connect?: LeasePaymentScheduleWhereUniqueInput | LeasePaymentScheduleWhereUniqueInput[]
    update?: LeasePaymentScheduleUpdateWithWhereUniqueWithoutLeaseInput | LeasePaymentScheduleUpdateWithWhereUniqueWithoutLeaseInput[]
    updateMany?: LeasePaymentScheduleUpdateManyWithWhereWithoutLeaseInput | LeasePaymentScheduleUpdateManyWithWhereWithoutLeaseInput[]
    deleteMany?: LeasePaymentScheduleScalarWhereInput | LeasePaymentScheduleScalarWhereInput[]
  }

  export type LeaseCreateNestedOneWithoutPaymentScheduleInput = {
    create?: XOR<LeaseCreateWithoutPaymentScheduleInput, LeaseUncheckedCreateWithoutPaymentScheduleInput>
    connectOrCreate?: LeaseCreateOrConnectWithoutPaymentScheduleInput
    connect?: LeaseWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPaymentScheduleStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentScheduleStatus
  }

  export type LeaseUpdateOneRequiredWithoutPaymentScheduleNestedInput = {
    create?: XOR<LeaseCreateWithoutPaymentScheduleInput, LeaseUncheckedCreateWithoutPaymentScheduleInput>
    connectOrCreate?: LeaseCreateOrConnectWithoutPaymentScheduleInput
    upsert?: LeaseUpsertWithoutPaymentScheduleInput
    connect?: LeaseWhereUniqueInput
    update?: XOR<XOR<LeaseUpdateToOneWithWhereWithoutPaymentScheduleInput, LeaseUpdateWithoutPaymentScheduleInput>, LeaseUncheckedUpdateWithoutPaymentScheduleInput>
  }

  export type RealEstateObjectCreateNestedOneWithoutImagesInput = {
    create?: XOR<RealEstateObjectCreateWithoutImagesInput, RealEstateObjectUncheckedCreateWithoutImagesInput>
    connectOrCreate?: RealEstateObjectCreateOrConnectWithoutImagesInput
    connect?: RealEstateObjectWhereUniqueInput
  }

  export type UnitCreateNestedOneWithoutImagesInput = {
    create?: XOR<UnitCreateWithoutImagesInput, UnitUncheckedCreateWithoutImagesInput>
    connectOrCreate?: UnitCreateOrConnectWithoutImagesInput
    connect?: UnitWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutImagesInput = {
    create?: XOR<UserCreateWithoutImagesInput, UserUncheckedCreateWithoutImagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutImagesInput
    connect?: UserWhereUniqueInput
  }

  export type RealEstateObjectUpdateOneWithoutImagesNestedInput = {
    create?: XOR<RealEstateObjectCreateWithoutImagesInput, RealEstateObjectUncheckedCreateWithoutImagesInput>
    connectOrCreate?: RealEstateObjectCreateOrConnectWithoutImagesInput
    upsert?: RealEstateObjectUpsertWithoutImagesInput
    disconnect?: RealEstateObjectWhereInput | boolean
    delete?: RealEstateObjectWhereInput | boolean
    connect?: RealEstateObjectWhereUniqueInput
    update?: XOR<XOR<RealEstateObjectUpdateToOneWithWhereWithoutImagesInput, RealEstateObjectUpdateWithoutImagesInput>, RealEstateObjectUncheckedUpdateWithoutImagesInput>
  }

  export type UnitUpdateOneWithoutImagesNestedInput = {
    create?: XOR<UnitCreateWithoutImagesInput, UnitUncheckedCreateWithoutImagesInput>
    connectOrCreate?: UnitCreateOrConnectWithoutImagesInput
    upsert?: UnitUpsertWithoutImagesInput
    disconnect?: UnitWhereInput | boolean
    delete?: UnitWhereInput | boolean
    connect?: UnitWhereUniqueInput
    update?: XOR<XOR<UnitUpdateToOneWithWhereWithoutImagesInput, UnitUpdateWithoutImagesInput>, UnitUncheckedUpdateWithoutImagesInput>
  }

  export type UserUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<UserCreateWithoutImagesInput, UserUncheckedCreateWithoutImagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutImagesInput
    upsert?: UserUpsertWithoutImagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutImagesInput, UserUpdateWithoutImagesInput>, UserUncheckedUpdateWithoutImagesInput>
  }

  export type UserCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type RealEstateObjectCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<RealEstateObjectCreateWithoutDocumentsInput, RealEstateObjectUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: RealEstateObjectCreateOrConnectWithoutDocumentsInput
    connect?: RealEstateObjectWhereUniqueInput
  }

  export type LeaseCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<LeaseCreateWithoutDocumentsInput, LeaseUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: LeaseCreateOrConnectWithoutDocumentsInput
    connect?: LeaseWhereUniqueInput
  }

  export type UnitCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<UnitCreateWithoutDocumentsInput, UnitUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UnitCreateOrConnectWithoutDocumentsInput
    connect?: UnitWhereUniqueInput
  }

  export type EnumDocumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DocumentType
  }

  export type UserUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    upsert?: UserUpsertWithoutDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentsInput, UserUpdateWithoutDocumentsInput>, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type RealEstateObjectUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<RealEstateObjectCreateWithoutDocumentsInput, RealEstateObjectUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: RealEstateObjectCreateOrConnectWithoutDocumentsInput
    upsert?: RealEstateObjectUpsertWithoutDocumentsInput
    disconnect?: RealEstateObjectWhereInput | boolean
    delete?: RealEstateObjectWhereInput | boolean
    connect?: RealEstateObjectWhereUniqueInput
    update?: XOR<XOR<RealEstateObjectUpdateToOneWithWhereWithoutDocumentsInput, RealEstateObjectUpdateWithoutDocumentsInput>, RealEstateObjectUncheckedUpdateWithoutDocumentsInput>
  }

  export type LeaseUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<LeaseCreateWithoutDocumentsInput, LeaseUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: LeaseCreateOrConnectWithoutDocumentsInput
    upsert?: LeaseUpsertWithoutDocumentsInput
    disconnect?: LeaseWhereInput | boolean
    delete?: LeaseWhereInput | boolean
    connect?: LeaseWhereUniqueInput
    update?: XOR<XOR<LeaseUpdateToOneWithWhereWithoutDocumentsInput, LeaseUpdateWithoutDocumentsInput>, LeaseUncheckedUpdateWithoutDocumentsInput>
  }

  export type UnitUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<UnitCreateWithoutDocumentsInput, UnitUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UnitCreateOrConnectWithoutDocumentsInput
    upsert?: UnitUpsertWithoutDocumentsInput
    disconnect?: UnitWhereInput | boolean
    delete?: UnitWhereInput | boolean
    connect?: UnitWhereUniqueInput
    update?: XOR<XOR<UnitUpdateToOneWithWhereWithoutDocumentsInput, UnitUpdateWithoutDocumentsInput>, UnitUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedMessagesInput = {
    create?: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedMessagesNestedInput = {
    create?: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedMessagesInput
    upsert?: UserUpsertWithoutReceivedMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedMessagesInput, UserUpdateWithoutReceivedMessagesInput>, UserUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type MaintenanceRequestCreateattachmentsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutMaintenanceRequestsInput = {
    create?: XOR<UserCreateWithoutMaintenanceRequestsInput, UserUncheckedCreateWithoutMaintenanceRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMaintenanceRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutMaintenanceRequestsInput = {
    create?: XOR<TenantCreateWithoutMaintenanceRequestsInput, TenantUncheckedCreateWithoutMaintenanceRequestsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMaintenanceRequestsInput
    connect?: TenantWhereUniqueInput
  }

  export type VendorCreateNestedOneWithoutRequestsInput = {
    create?: XOR<VendorCreateWithoutRequestsInput, VendorUncheckedCreateWithoutRequestsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutRequestsInput
    connect?: VendorWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutMaintenanceRequestInput = {
    create?: XOR<TenantCreateWithoutMaintenanceRequestInput, TenantUncheckedCreateWithoutMaintenanceRequestInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMaintenanceRequestInput
    connect?: TenantWhereUniqueInput
  }

  export type UnitCreateNestedOneWithoutMaintenanceRequestsInput = {
    create?: XOR<UnitCreateWithoutMaintenanceRequestsInput, UnitUncheckedCreateWithoutMaintenanceRequestsInput>
    connectOrCreate?: UnitCreateOrConnectWithoutMaintenanceRequestsInput
    connect?: UnitWhereUniqueInput
  }

  export type ExpenseCreateNestedManyWithoutMaintenanceRequestInput = {
    create?: XOR<ExpenseCreateWithoutMaintenanceRequestInput, ExpenseUncheckedCreateWithoutMaintenanceRequestInput> | ExpenseCreateWithoutMaintenanceRequestInput[] | ExpenseUncheckedCreateWithoutMaintenanceRequestInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutMaintenanceRequestInput | ExpenseCreateOrConnectWithoutMaintenanceRequestInput[]
    createMany?: ExpenseCreateManyMaintenanceRequestInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type LinkedRequestCreateNestedManyWithoutRequestAInput = {
    create?: XOR<LinkedRequestCreateWithoutRequestAInput, LinkedRequestUncheckedCreateWithoutRequestAInput> | LinkedRequestCreateWithoutRequestAInput[] | LinkedRequestUncheckedCreateWithoutRequestAInput[]
    connectOrCreate?: LinkedRequestCreateOrConnectWithoutRequestAInput | LinkedRequestCreateOrConnectWithoutRequestAInput[]
    createMany?: LinkedRequestCreateManyRequestAInputEnvelope
    connect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
  }

  export type LinkedRequestCreateNestedManyWithoutRequestBInput = {
    create?: XOR<LinkedRequestCreateWithoutRequestBInput, LinkedRequestUncheckedCreateWithoutRequestBInput> | LinkedRequestCreateWithoutRequestBInput[] | LinkedRequestUncheckedCreateWithoutRequestBInput[]
    connectOrCreate?: LinkedRequestCreateOrConnectWithoutRequestBInput | LinkedRequestCreateOrConnectWithoutRequestBInput[]
    createMany?: LinkedRequestCreateManyRequestBInputEnvelope
    connect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
  }

  export type ExpenseUncheckedCreateNestedManyWithoutMaintenanceRequestInput = {
    create?: XOR<ExpenseCreateWithoutMaintenanceRequestInput, ExpenseUncheckedCreateWithoutMaintenanceRequestInput> | ExpenseCreateWithoutMaintenanceRequestInput[] | ExpenseUncheckedCreateWithoutMaintenanceRequestInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutMaintenanceRequestInput | ExpenseCreateOrConnectWithoutMaintenanceRequestInput[]
    createMany?: ExpenseCreateManyMaintenanceRequestInputEnvelope
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
  }

  export type LinkedRequestUncheckedCreateNestedManyWithoutRequestAInput = {
    create?: XOR<LinkedRequestCreateWithoutRequestAInput, LinkedRequestUncheckedCreateWithoutRequestAInput> | LinkedRequestCreateWithoutRequestAInput[] | LinkedRequestUncheckedCreateWithoutRequestAInput[]
    connectOrCreate?: LinkedRequestCreateOrConnectWithoutRequestAInput | LinkedRequestCreateOrConnectWithoutRequestAInput[]
    createMany?: LinkedRequestCreateManyRequestAInputEnvelope
    connect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
  }

  export type LinkedRequestUncheckedCreateNestedManyWithoutRequestBInput = {
    create?: XOR<LinkedRequestCreateWithoutRequestBInput, LinkedRequestUncheckedCreateWithoutRequestBInput> | LinkedRequestCreateWithoutRequestBInput[] | LinkedRequestUncheckedCreateWithoutRequestBInput[]
    connectOrCreate?: LinkedRequestCreateOrConnectWithoutRequestBInput | LinkedRequestCreateOrConnectWithoutRequestBInput[]
    createMany?: LinkedRequestCreateManyRequestBInputEnvelope
    connect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
  }

  export type NullableEnumMaintenanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.MaintenanceStatus | null
  }

  export type NullableEnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority | null
  }

  export type MaintenanceRequestUpdateattachmentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneWithoutMaintenanceRequestsNestedInput = {
    create?: XOR<UserCreateWithoutMaintenanceRequestsInput, UserUncheckedCreateWithoutMaintenanceRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMaintenanceRequestsInput
    upsert?: UserUpsertWithoutMaintenanceRequestsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMaintenanceRequestsInput, UserUpdateWithoutMaintenanceRequestsInput>, UserUncheckedUpdateWithoutMaintenanceRequestsInput>
  }

  export type TenantUpdateOneWithoutMaintenanceRequestsNestedInput = {
    create?: XOR<TenantCreateWithoutMaintenanceRequestsInput, TenantUncheckedCreateWithoutMaintenanceRequestsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMaintenanceRequestsInput
    upsert?: TenantUpsertWithoutMaintenanceRequestsInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutMaintenanceRequestsInput, TenantUpdateWithoutMaintenanceRequestsInput>, TenantUncheckedUpdateWithoutMaintenanceRequestsInput>
  }

  export type VendorUpdateOneWithoutRequestsNestedInput = {
    create?: XOR<VendorCreateWithoutRequestsInput, VendorUncheckedCreateWithoutRequestsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutRequestsInput
    upsert?: VendorUpsertWithoutRequestsInput
    disconnect?: VendorWhereInput | boolean
    delete?: VendorWhereInput | boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutRequestsInput, VendorUpdateWithoutRequestsInput>, VendorUncheckedUpdateWithoutRequestsInput>
  }

  export type TenantUpdateOneWithoutMaintenanceRequestNestedInput = {
    create?: XOR<TenantCreateWithoutMaintenanceRequestInput, TenantUncheckedCreateWithoutMaintenanceRequestInput>
    connectOrCreate?: TenantCreateOrConnectWithoutMaintenanceRequestInput
    upsert?: TenantUpsertWithoutMaintenanceRequestInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutMaintenanceRequestInput, TenantUpdateWithoutMaintenanceRequestInput>, TenantUncheckedUpdateWithoutMaintenanceRequestInput>
  }

  export type UnitUpdateOneWithoutMaintenanceRequestsNestedInput = {
    create?: XOR<UnitCreateWithoutMaintenanceRequestsInput, UnitUncheckedCreateWithoutMaintenanceRequestsInput>
    connectOrCreate?: UnitCreateOrConnectWithoutMaintenanceRequestsInput
    upsert?: UnitUpsertWithoutMaintenanceRequestsInput
    disconnect?: UnitWhereInput | boolean
    delete?: UnitWhereInput | boolean
    connect?: UnitWhereUniqueInput
    update?: XOR<XOR<UnitUpdateToOneWithWhereWithoutMaintenanceRequestsInput, UnitUpdateWithoutMaintenanceRequestsInput>, UnitUncheckedUpdateWithoutMaintenanceRequestsInput>
  }

  export type ExpenseUpdateManyWithoutMaintenanceRequestNestedInput = {
    create?: XOR<ExpenseCreateWithoutMaintenanceRequestInput, ExpenseUncheckedCreateWithoutMaintenanceRequestInput> | ExpenseCreateWithoutMaintenanceRequestInput[] | ExpenseUncheckedCreateWithoutMaintenanceRequestInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutMaintenanceRequestInput | ExpenseCreateOrConnectWithoutMaintenanceRequestInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutMaintenanceRequestInput | ExpenseUpsertWithWhereUniqueWithoutMaintenanceRequestInput[]
    createMany?: ExpenseCreateManyMaintenanceRequestInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutMaintenanceRequestInput | ExpenseUpdateWithWhereUniqueWithoutMaintenanceRequestInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutMaintenanceRequestInput | ExpenseUpdateManyWithWhereWithoutMaintenanceRequestInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type LinkedRequestUpdateManyWithoutRequestANestedInput = {
    create?: XOR<LinkedRequestCreateWithoutRequestAInput, LinkedRequestUncheckedCreateWithoutRequestAInput> | LinkedRequestCreateWithoutRequestAInput[] | LinkedRequestUncheckedCreateWithoutRequestAInput[]
    connectOrCreate?: LinkedRequestCreateOrConnectWithoutRequestAInput | LinkedRequestCreateOrConnectWithoutRequestAInput[]
    upsert?: LinkedRequestUpsertWithWhereUniqueWithoutRequestAInput | LinkedRequestUpsertWithWhereUniqueWithoutRequestAInput[]
    createMany?: LinkedRequestCreateManyRequestAInputEnvelope
    set?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    disconnect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    delete?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    connect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    update?: LinkedRequestUpdateWithWhereUniqueWithoutRequestAInput | LinkedRequestUpdateWithWhereUniqueWithoutRequestAInput[]
    updateMany?: LinkedRequestUpdateManyWithWhereWithoutRequestAInput | LinkedRequestUpdateManyWithWhereWithoutRequestAInput[]
    deleteMany?: LinkedRequestScalarWhereInput | LinkedRequestScalarWhereInput[]
  }

  export type LinkedRequestUpdateManyWithoutRequestBNestedInput = {
    create?: XOR<LinkedRequestCreateWithoutRequestBInput, LinkedRequestUncheckedCreateWithoutRequestBInput> | LinkedRequestCreateWithoutRequestBInput[] | LinkedRequestUncheckedCreateWithoutRequestBInput[]
    connectOrCreate?: LinkedRequestCreateOrConnectWithoutRequestBInput | LinkedRequestCreateOrConnectWithoutRequestBInput[]
    upsert?: LinkedRequestUpsertWithWhereUniqueWithoutRequestBInput | LinkedRequestUpsertWithWhereUniqueWithoutRequestBInput[]
    createMany?: LinkedRequestCreateManyRequestBInputEnvelope
    set?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    disconnect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    delete?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    connect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    update?: LinkedRequestUpdateWithWhereUniqueWithoutRequestBInput | LinkedRequestUpdateWithWhereUniqueWithoutRequestBInput[]
    updateMany?: LinkedRequestUpdateManyWithWhereWithoutRequestBInput | LinkedRequestUpdateManyWithWhereWithoutRequestBInput[]
    deleteMany?: LinkedRequestScalarWhereInput | LinkedRequestScalarWhereInput[]
  }

  export type ExpenseUncheckedUpdateManyWithoutMaintenanceRequestNestedInput = {
    create?: XOR<ExpenseCreateWithoutMaintenanceRequestInput, ExpenseUncheckedCreateWithoutMaintenanceRequestInput> | ExpenseCreateWithoutMaintenanceRequestInput[] | ExpenseUncheckedCreateWithoutMaintenanceRequestInput[]
    connectOrCreate?: ExpenseCreateOrConnectWithoutMaintenanceRequestInput | ExpenseCreateOrConnectWithoutMaintenanceRequestInput[]
    upsert?: ExpenseUpsertWithWhereUniqueWithoutMaintenanceRequestInput | ExpenseUpsertWithWhereUniqueWithoutMaintenanceRequestInput[]
    createMany?: ExpenseCreateManyMaintenanceRequestInputEnvelope
    set?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    disconnect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    delete?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    connect?: ExpenseWhereUniqueInput | ExpenseWhereUniqueInput[]
    update?: ExpenseUpdateWithWhereUniqueWithoutMaintenanceRequestInput | ExpenseUpdateWithWhereUniqueWithoutMaintenanceRequestInput[]
    updateMany?: ExpenseUpdateManyWithWhereWithoutMaintenanceRequestInput | ExpenseUpdateManyWithWhereWithoutMaintenanceRequestInput[]
    deleteMany?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
  }

  export type LinkedRequestUncheckedUpdateManyWithoutRequestANestedInput = {
    create?: XOR<LinkedRequestCreateWithoutRequestAInput, LinkedRequestUncheckedCreateWithoutRequestAInput> | LinkedRequestCreateWithoutRequestAInput[] | LinkedRequestUncheckedCreateWithoutRequestAInput[]
    connectOrCreate?: LinkedRequestCreateOrConnectWithoutRequestAInput | LinkedRequestCreateOrConnectWithoutRequestAInput[]
    upsert?: LinkedRequestUpsertWithWhereUniqueWithoutRequestAInput | LinkedRequestUpsertWithWhereUniqueWithoutRequestAInput[]
    createMany?: LinkedRequestCreateManyRequestAInputEnvelope
    set?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    disconnect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    delete?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    connect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    update?: LinkedRequestUpdateWithWhereUniqueWithoutRequestAInput | LinkedRequestUpdateWithWhereUniqueWithoutRequestAInput[]
    updateMany?: LinkedRequestUpdateManyWithWhereWithoutRequestAInput | LinkedRequestUpdateManyWithWhereWithoutRequestAInput[]
    deleteMany?: LinkedRequestScalarWhereInput | LinkedRequestScalarWhereInput[]
  }

  export type LinkedRequestUncheckedUpdateManyWithoutRequestBNestedInput = {
    create?: XOR<LinkedRequestCreateWithoutRequestBInput, LinkedRequestUncheckedCreateWithoutRequestBInput> | LinkedRequestCreateWithoutRequestBInput[] | LinkedRequestUncheckedCreateWithoutRequestBInput[]
    connectOrCreate?: LinkedRequestCreateOrConnectWithoutRequestBInput | LinkedRequestCreateOrConnectWithoutRequestBInput[]
    upsert?: LinkedRequestUpsertWithWhereUniqueWithoutRequestBInput | LinkedRequestUpsertWithWhereUniqueWithoutRequestBInput[]
    createMany?: LinkedRequestCreateManyRequestBInputEnvelope
    set?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    disconnect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    delete?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    connect?: LinkedRequestWhereUniqueInput | LinkedRequestWhereUniqueInput[]
    update?: LinkedRequestUpdateWithWhereUniqueWithoutRequestBInput | LinkedRequestUpdateWithWhereUniqueWithoutRequestBInput[]
    updateMany?: LinkedRequestUpdateManyWithWhereWithoutRequestBInput | LinkedRequestUpdateManyWithWhereWithoutRequestBInput[]
    deleteMany?: LinkedRequestScalarWhereInput | LinkedRequestScalarWhereInput[]
  }

  export type UnitCreateNestedOneWithoutExpensesInput = {
    create?: XOR<UnitCreateWithoutExpensesInput, UnitUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: UnitCreateOrConnectWithoutExpensesInput
    connect?: UnitWhereUniqueInput
  }

  export type LeaseCreateNestedOneWithoutExpensesInput = {
    create?: XOR<LeaseCreateWithoutExpensesInput, LeaseUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: LeaseCreateOrConnectWithoutExpensesInput
    connect?: LeaseWhereUniqueInput
  }

  export type MaintenanceRequestCreateNestedOneWithoutExpensesInput = {
    create?: XOR<MaintenanceRequestCreateWithoutExpensesInput, MaintenanceRequestUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutExpensesInput
    connect?: MaintenanceRequestWhereUniqueInput
  }

  export type UnitUpdateOneWithoutExpensesNestedInput = {
    create?: XOR<UnitCreateWithoutExpensesInput, UnitUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: UnitCreateOrConnectWithoutExpensesInput
    upsert?: UnitUpsertWithoutExpensesInput
    disconnect?: UnitWhereInput | boolean
    delete?: UnitWhereInput | boolean
    connect?: UnitWhereUniqueInput
    update?: XOR<XOR<UnitUpdateToOneWithWhereWithoutExpensesInput, UnitUpdateWithoutExpensesInput>, UnitUncheckedUpdateWithoutExpensesInput>
  }

  export type LeaseUpdateOneWithoutExpensesNestedInput = {
    create?: XOR<LeaseCreateWithoutExpensesInput, LeaseUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: LeaseCreateOrConnectWithoutExpensesInput
    upsert?: LeaseUpsertWithoutExpensesInput
    disconnect?: LeaseWhereInput | boolean
    delete?: LeaseWhereInput | boolean
    connect?: LeaseWhereUniqueInput
    update?: XOR<XOR<LeaseUpdateToOneWithWhereWithoutExpensesInput, LeaseUpdateWithoutExpensesInput>, LeaseUncheckedUpdateWithoutExpensesInput>
  }

  export type MaintenanceRequestUpdateOneWithoutExpensesNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutExpensesInput, MaintenanceRequestUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutExpensesInput
    upsert?: MaintenanceRequestUpsertWithoutExpensesInput
    disconnect?: MaintenanceRequestWhereInput | boolean
    delete?: MaintenanceRequestWhereInput | boolean
    connect?: MaintenanceRequestWhereUniqueInput
    update?: XOR<XOR<MaintenanceRequestUpdateToOneWithWhereWithoutExpensesInput, MaintenanceRequestUpdateWithoutExpensesInput>, MaintenanceRequestUncheckedUpdateWithoutExpensesInput>
  }

  export type LeaseCreateNestedOneWithoutRentPaymentsInput = {
    create?: XOR<LeaseCreateWithoutRentPaymentsInput, LeaseUncheckedCreateWithoutRentPaymentsInput>
    connectOrCreate?: LeaseCreateOrConnectWithoutRentPaymentsInput
    connect?: LeaseWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutRentPaymentsInput = {
    create?: XOR<TenantCreateWithoutRentPaymentsInput, TenantUncheckedCreateWithoutRentPaymentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutRentPaymentsInput
    connect?: TenantWhereUniqueInput
  }

  export type NullableEnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus | null
  }

  export type LeaseUpdateOneWithoutRentPaymentsNestedInput = {
    create?: XOR<LeaseCreateWithoutRentPaymentsInput, LeaseUncheckedCreateWithoutRentPaymentsInput>
    connectOrCreate?: LeaseCreateOrConnectWithoutRentPaymentsInput
    upsert?: LeaseUpsertWithoutRentPaymentsInput
    disconnect?: LeaseWhereInput | boolean
    delete?: LeaseWhereInput | boolean
    connect?: LeaseWhereUniqueInput
    update?: XOR<XOR<LeaseUpdateToOneWithWhereWithoutRentPaymentsInput, LeaseUpdateWithoutRentPaymentsInput>, LeaseUncheckedUpdateWithoutRentPaymentsInput>
  }

  export type TenantUpdateOneWithoutRentPaymentsNestedInput = {
    create?: XOR<TenantCreateWithoutRentPaymentsInput, TenantUncheckedCreateWithoutRentPaymentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutRentPaymentsInput
    upsert?: TenantUpsertWithoutRentPaymentsInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutRentPaymentsInput, TenantUpdateWithoutRentPaymentsInput>, TenantUncheckedUpdateWithoutRentPaymentsInput>
  }

  export type ContactRequestCreateboardPositionsInput = {
    set: string[]
  }

  export type ContactRequestUpdateboardPositionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type MaintenanceRequestCreateNestedManyWithoutVendorInput = {
    create?: XOR<MaintenanceRequestCreateWithoutVendorInput, MaintenanceRequestUncheckedCreateWithoutVendorInput> | MaintenanceRequestCreateWithoutVendorInput[] | MaintenanceRequestUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutVendorInput | MaintenanceRequestCreateOrConnectWithoutVendorInput[]
    createMany?: MaintenanceRequestCreateManyVendorInputEnvelope
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
  }

  export type MaintenanceRequestUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<MaintenanceRequestCreateWithoutVendorInput, MaintenanceRequestUncheckedCreateWithoutVendorInput> | MaintenanceRequestCreateWithoutVendorInput[] | MaintenanceRequestUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutVendorInput | MaintenanceRequestCreateOrConnectWithoutVendorInput[]
    createMany?: MaintenanceRequestCreateManyVendorInputEnvelope
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
  }

  export type MaintenanceRequestUpdateManyWithoutVendorNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutVendorInput, MaintenanceRequestUncheckedCreateWithoutVendorInput> | MaintenanceRequestCreateWithoutVendorInput[] | MaintenanceRequestUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutVendorInput | MaintenanceRequestCreateOrConnectWithoutVendorInput[]
    upsert?: MaintenanceRequestUpsertWithWhereUniqueWithoutVendorInput | MaintenanceRequestUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: MaintenanceRequestCreateManyVendorInputEnvelope
    set?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    disconnect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    delete?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    update?: MaintenanceRequestUpdateWithWhereUniqueWithoutVendorInput | MaintenanceRequestUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: MaintenanceRequestUpdateManyWithWhereWithoutVendorInput | MaintenanceRequestUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
  }

  export type MaintenanceRequestUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutVendorInput, MaintenanceRequestUncheckedCreateWithoutVendorInput> | MaintenanceRequestCreateWithoutVendorInput[] | MaintenanceRequestUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutVendorInput | MaintenanceRequestCreateOrConnectWithoutVendorInput[]
    upsert?: MaintenanceRequestUpsertWithWhereUniqueWithoutVendorInput | MaintenanceRequestUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: MaintenanceRequestCreateManyVendorInputEnvelope
    set?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    disconnect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    delete?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    connect?: MaintenanceRequestWhereUniqueInput | MaintenanceRequestWhereUniqueInput[]
    update?: MaintenanceRequestUpdateWithWhereUniqueWithoutVendorInput | MaintenanceRequestUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: MaintenanceRequestUpdateManyWithWhereWithoutVendorInput | MaintenanceRequestUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
  }

  export type MaintenanceRequestCreateNestedOneWithoutLinkedAsAInput = {
    create?: XOR<MaintenanceRequestCreateWithoutLinkedAsAInput, MaintenanceRequestUncheckedCreateWithoutLinkedAsAInput>
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutLinkedAsAInput
    connect?: MaintenanceRequestWhereUniqueInput
  }

  export type MaintenanceRequestCreateNestedOneWithoutLinkedAsBInput = {
    create?: XOR<MaintenanceRequestCreateWithoutLinkedAsBInput, MaintenanceRequestUncheckedCreateWithoutLinkedAsBInput>
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutLinkedAsBInput
    connect?: MaintenanceRequestWhereUniqueInput
  }

  export type MaintenanceRequestUpdateOneRequiredWithoutLinkedAsANestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutLinkedAsAInput, MaintenanceRequestUncheckedCreateWithoutLinkedAsAInput>
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutLinkedAsAInput
    upsert?: MaintenanceRequestUpsertWithoutLinkedAsAInput
    connect?: MaintenanceRequestWhereUniqueInput
    update?: XOR<XOR<MaintenanceRequestUpdateToOneWithWhereWithoutLinkedAsAInput, MaintenanceRequestUpdateWithoutLinkedAsAInput>, MaintenanceRequestUncheckedUpdateWithoutLinkedAsAInput>
  }

  export type MaintenanceRequestUpdateOneRequiredWithoutLinkedAsBNestedInput = {
    create?: XOR<MaintenanceRequestCreateWithoutLinkedAsBInput, MaintenanceRequestUncheckedCreateWithoutLinkedAsBInput>
    connectOrCreate?: MaintenanceRequestCreateOrConnectWithoutLinkedAsBInput
    upsert?: MaintenanceRequestUpsertWithoutLinkedAsBInput
    connect?: MaintenanceRequestWhereUniqueInput
    update?: XOR<XOR<MaintenanceRequestUpdateToOneWithWhereWithoutLinkedAsBInput, MaintenanceRequestUpdateWithoutLinkedAsBInput>, MaintenanceRequestUncheckedUpdateWithoutLinkedAsBInput>
  }

  export type UserCreateNestedOneWithoutUsedCodesInput = {
    create?: XOR<UserCreateWithoutUsedCodesInput, UserUncheckedCreateWithoutUsedCodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsedCodesInput
    connect?: UserWhereUniqueInput
  }

  export type UnitCreateNestedManyWithoutOverwriteCodesInput = {
    create?: XOR<UnitCreateWithoutOverwriteCodesInput, UnitUncheckedCreateWithoutOverwriteCodesInput> | UnitCreateWithoutOverwriteCodesInput[] | UnitUncheckedCreateWithoutOverwriteCodesInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutOverwriteCodesInput | UnitCreateOrConnectWithoutOverwriteCodesInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
  }

  export type UnitUncheckedCreateNestedManyWithoutOverwriteCodesInput = {
    create?: XOR<UnitCreateWithoutOverwriteCodesInput, UnitUncheckedCreateWithoutOverwriteCodesInput> | UnitCreateWithoutOverwriteCodesInput[] | UnitUncheckedCreateWithoutOverwriteCodesInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutOverwriteCodesInput | UnitCreateOrConnectWithoutOverwriteCodesInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutUsedCodesNestedInput = {
    create?: XOR<UserCreateWithoutUsedCodesInput, UserUncheckedCreateWithoutUsedCodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsedCodesInput
    upsert?: UserUpsertWithoutUsedCodesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUsedCodesInput, UserUpdateWithoutUsedCodesInput>, UserUncheckedUpdateWithoutUsedCodesInput>
  }

  export type UnitUpdateManyWithoutOverwriteCodesNestedInput = {
    create?: XOR<UnitCreateWithoutOverwriteCodesInput, UnitUncheckedCreateWithoutOverwriteCodesInput> | UnitCreateWithoutOverwriteCodesInput[] | UnitUncheckedCreateWithoutOverwriteCodesInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutOverwriteCodesInput | UnitCreateOrConnectWithoutOverwriteCodesInput[]
    upsert?: UnitUpsertWithWhereUniqueWithoutOverwriteCodesInput | UnitUpsertWithWhereUniqueWithoutOverwriteCodesInput[]
    set?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    disconnect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    delete?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    update?: UnitUpdateWithWhereUniqueWithoutOverwriteCodesInput | UnitUpdateWithWhereUniqueWithoutOverwriteCodesInput[]
    updateMany?: UnitUpdateManyWithWhereWithoutOverwriteCodesInput | UnitUpdateManyWithWhereWithoutOverwriteCodesInput[]
    deleteMany?: UnitScalarWhereInput | UnitScalarWhereInput[]
  }

  export type UnitUncheckedUpdateManyWithoutOverwriteCodesNestedInput = {
    create?: XOR<UnitCreateWithoutOverwriteCodesInput, UnitUncheckedCreateWithoutOverwriteCodesInput> | UnitCreateWithoutOverwriteCodesInput[] | UnitUncheckedCreateWithoutOverwriteCodesInput[]
    connectOrCreate?: UnitCreateOrConnectWithoutOverwriteCodesInput | UnitCreateOrConnectWithoutOverwriteCodesInput[]
    upsert?: UnitUpsertWithWhereUniqueWithoutOverwriteCodesInput | UnitUpsertWithWhereUniqueWithoutOverwriteCodesInput[]
    set?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    disconnect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    delete?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    connect?: UnitWhereUniqueInput | UnitWhereUniqueInput[]
    update?: UnitUpdateWithWhereUniqueWithoutOverwriteCodesInput | UnitUpdateWithWhereUniqueWithoutOverwriteCodesInput[]
    updateMany?: UnitUpdateManyWithWhereWithoutOverwriteCodesInput | UnitUpdateManyWithWhereWithoutOverwriteCodesInput[]
    deleteMany?: UnitScalarWhereInput | UnitScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumCurrencyCodeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel> | $Enums.CurrencyCode | null
  }

  export type NestedEnumAccountStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusFilter<$PrismaModel> | $Enums.AccountStatus
  }

  export type NestedEnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCurrencyCodeNullableWithAggregatesFilter<$PrismaModel> | $Enums.CurrencyCode | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
    _max?: NestedEnumCurrencyCodeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel> | $Enums.AccountStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountStatusFilter<$PrismaModel>
    _max?: NestedEnumAccountStatusFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type NestedEnumCivilStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CivilStatus | EnumCivilStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.CivilStatus[] | ListEnumCivilStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CivilStatus[] | ListEnumCivilStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCivilStatusNullableFilter<$PrismaModel> | $Enums.CivilStatus | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumCivilStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CivilStatus | EnumCivilStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.CivilStatus[] | ListEnumCivilStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CivilStatus[] | ListEnumCivilStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCivilStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.CivilStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCivilStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumCivilStatusNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRealEstateTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RealEstateType | EnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.RealEstateType[] | ListEnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RealEstateType[] | ListEnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRealEstateTypeNullableFilter<$PrismaModel> | $Enums.RealEstateType | null
  }

  export type NestedEnumRealEstateTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RealEstateType | EnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.RealEstateType[] | ListEnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RealEstateType[] | ListEnumRealEstateTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRealEstateTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.RealEstateType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRealEstateTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumRealEstateTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAmenityCategoryNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AmenityCategory | EnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.AmenityCategory[] | ListEnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AmenityCategory[] | ListEnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAmenityCategoryNullableFilter<$PrismaModel> | $Enums.AmenityCategory | null
  }

  export type NestedEnumAmenityCategoryNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AmenityCategory | EnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    in?: $Enums.AmenityCategory[] | ListEnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AmenityCategory[] | ListEnumAmenityCategoryFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAmenityCategoryNullableWithAggregatesFilter<$PrismaModel> | $Enums.AmenityCategory | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAmenityCategoryNullableFilter<$PrismaModel>
    _max?: NestedEnumAmenityCategoryNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumListingStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ListingStatus | EnumListingStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumListingStatusNullableFilter<$PrismaModel> | $Enums.ListingStatus | null
  }

  export type NestedEnumListingStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ListingStatus | EnumListingStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ListingStatus[] | ListEnumListingStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumListingStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.ListingStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumListingStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumListingStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumLeaseStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaseStatus | EnumLeaseStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.LeaseStatus[] | ListEnumLeaseStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LeaseStatus[] | ListEnumLeaseStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLeaseStatusNullableFilter<$PrismaModel> | $Enums.LeaseStatus | null
  }

  export type NestedEnumPaymentFrequencyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentFrequency | EnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentFrequencyNullableFilter<$PrismaModel> | $Enums.PaymentFrequency | null
  }

  export type NestedEnumLeaseStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaseStatus | EnumLeaseStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.LeaseStatus[] | ListEnumLeaseStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LeaseStatus[] | ListEnumLeaseStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLeaseStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.LeaseStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLeaseStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumLeaseStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumPaymentFrequencyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentFrequency | EnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentFrequencyNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentFrequency | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentFrequencyNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentFrequencyNullableFilter<$PrismaModel>
  }

  export type NestedEnumPaymentScheduleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentScheduleStatus | EnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentScheduleStatus[] | ListEnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentScheduleStatus[] | ListEnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentScheduleStatusFilter<$PrismaModel> | $Enums.PaymentScheduleStatus
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumPaymentScheduleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentScheduleStatus | EnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentScheduleStatus[] | ListEnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentScheduleStatus[] | ListEnumPaymentScheduleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentScheduleStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentScheduleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentScheduleStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentScheduleStatusFilter<$PrismaModel>
  }

  export type NestedEnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumMaintenanceStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaintenanceStatusNullableFilter<$PrismaModel> | $Enums.MaintenanceStatus | null
  }

  export type NestedEnumPriorityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPriorityNullableFilter<$PrismaModel> | $Enums.Priority | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumMaintenanceStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMaintenanceStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumPriorityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel> | null
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPriorityNullableWithAggregatesFilter<$PrismaModel> | $Enums.Priority | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPriorityNullableFilter<$PrismaModel>
    _max?: NestedEnumPriorityNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableFilter<$PrismaModel> | $Enums.PaymentStatus | null
  }

  export type NestedEnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusNullableFilter<$PrismaModel>
  }

  export type TokenCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
  }

  export type TokenUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
  }

  export type TokenCreateOrConnectWithoutUserInput = {
    where: TokenWhereUniqueInput
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenCreateManyUserInputEnvelope = {
    data: TokenCreateManyUserInput | TokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutUserInput = {
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    realEstateObject?: RealEstateObjectCreateNestedOneWithoutDocumentsInput
    lease?: LeaseCreateNestedOneWithoutDocumentsInput
    unit?: UnitCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutUserInput = {
    id?: number
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    realEstateObjectId?: number | null
    leaseId?: number | null
    unitId?: number | null
  }

  export type DocumentCreateOrConnectWithoutUserInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput>
  }

  export type DocumentCreateManyUserInputEnvelope = {
    data: DocumentCreateManyUserInput | DocumentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ImageCreateWithoutUserInput = {
    imageUrl: string
    createdAt?: Date | string
    realEstateObject?: RealEstateObjectCreateNestedOneWithoutImagesInput
    unit?: UnitCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateWithoutUserInput = {
    id?: number
    imageUrl: string
    createdAt?: Date | string
    realEstateObjectId?: number | null
    unitId?: number | null
  }

  export type ImageCreateOrConnectWithoutUserInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
  }

  export type ImageCreateManyUserInputEnvelope = {
    data: ImageCreateManyUserInput | ImageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    content: JsonNullValueInput | InputJsonValue
    type: string
    timestamp?: Date | string
    receiver: UserCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: number
    content: JsonNullValueInput | InputJsonValue
    type: string
    timestamp?: Date | string
    receiverId: number
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutReceiverInput = {
    content: JsonNullValueInput | InputJsonValue
    type: string
    timestamp?: Date | string
    sender: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageUncheckedCreateWithoutReceiverInput = {
    id?: number
    content: JsonNullValueInput | InputJsonValue
    type: string
    timestamp?: Date | string
    senderId: number
  }

  export type MessageCreateOrConnectWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageCreateManyReceiverInputEnvelope = {
    data: MessageCreateManyReceiverInput | MessageCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    leases?: LeaseCreateNestedManyWithoutTenantInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentCreateNestedManyWithoutTenantInput
    unit?: UnitCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestCreateNestedManyWithoutReporterInput
  }

  export type TenantUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    leases?: LeaseUncheckedCreateNestedManyWithoutTenantInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutTenantInput
    unit?: UnitUncheckedCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestUncheckedCreateNestedManyWithoutReporterInput
  }

  export type TenantCreateOrConnectWithoutUserInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutUserInput, TenantUncheckedCreateWithoutUserInput>
  }

  export type MaintenanceRequestCreateWithoutOwnerInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    tenant?: TenantCreateNestedOneWithoutMaintenanceRequestsInput
    vendor?: VendorCreateNestedOneWithoutRequestsInput
    reporter?: TenantCreateNestedOneWithoutMaintenanceRequestInput
    unit?: UnitCreateNestedOneWithoutMaintenanceRequestsInput
    expenses?: ExpenseCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestUncheckedCreateWithoutOwnerInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    unitId?: number | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestUncheckedCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestUncheckedCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestCreateOrConnectWithoutOwnerInput = {
    where: MaintenanceRequestWhereUniqueInput
    create: XOR<MaintenanceRequestCreateWithoutOwnerInput, MaintenanceRequestUncheckedCreateWithoutOwnerInput>
  }

  export type MaintenanceRequestCreateManyOwnerInputEnvelope = {
    data: MaintenanceRequestCreateManyOwnerInput | MaintenanceRequestCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type UnitCreateWithoutOwnersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutUnitInput
    documents?: DocumentCreateNestedManyWithoutUnitInput
    images?: ImageCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutUnitInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutUnitsInput
    tenant?: TenantCreateNestedOneWithoutUnitInput
    leases?: LeaseCreateNestedManyWithoutUnitInput
    expenses?: ExpenseCreateNestedManyWithoutUnitInput
    overwriteCodes?: OverwriteCodeCreateNestedManyWithoutUnitsInput
  }

  export type UnitUncheckedCreateWithoutOwnersInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
    tenantId?: number | null
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutUnitInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUnitInput
    images?: ImageUncheckedCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutUnitInput
    leases?: LeaseUncheckedCreateNestedManyWithoutUnitInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutUnitInput
    overwriteCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUnitsInput
  }

  export type UnitCreateOrConnectWithoutOwnersInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutOwnersInput, UnitUncheckedCreateWithoutOwnersInput>
  }

  export type OverwriteCodeCreateWithoutUsedByInput = {
    code: string
    expiresAt: Date | string
    used?: boolean
    units?: UnitCreateNestedManyWithoutOverwriteCodesInput
  }

  export type OverwriteCodeUncheckedCreateWithoutUsedByInput = {
    id?: number
    code: string
    expiresAt: Date | string
    used?: boolean
    units?: UnitUncheckedCreateNestedManyWithoutOverwriteCodesInput
  }

  export type OverwriteCodeCreateOrConnectWithoutUsedByInput = {
    where: OverwriteCodeWhereUniqueInput
    create: XOR<OverwriteCodeCreateWithoutUsedByInput, OverwriteCodeUncheckedCreateWithoutUsedByInput>
  }

  export type OverwriteCodeCreateManyUsedByInputEnvelope = {
    data: OverwriteCodeCreateManyUsedByInput | OverwriteCodeCreateManyUsedByInput[]
    skipDuplicates?: boolean
  }

  export type TokenUpsertWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    update: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenUpdateWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    data: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
  }

  export type TokenUpdateManyWithWhereWithoutUserInput = {
    where: TokenScalarWhereInput
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyWithoutUserInput>
  }

  export type TokenScalarWhereInput = {
    AND?: TokenScalarWhereInput | TokenScalarWhereInput[]
    OR?: TokenScalarWhereInput[]
    NOT?: TokenScalarWhereInput | TokenScalarWhereInput[]
    id?: IntFilter<"Token"> | number
    createdAt?: DateTimeFilter<"Token"> | Date | string
    updatedAt?: DateTimeFilter<"Token"> | Date | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    emailToken?: StringNullableFilter<"Token"> | string | null
    valid?: BoolFilter<"Token"> | boolean
    expiration?: DateTimeFilter<"Token"> | Date | string
    userId?: IntFilter<"Token"> | number
  }

  export type DocumentUpsertWithWhereUniqueWithoutUserInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutUserInput, DocumentUncheckedUpdateWithoutUserInput>
    create: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutUserInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutUserInput, DocumentUncheckedUpdateWithoutUserInput>
  }

  export type DocumentUpdateManyWithWhereWithoutUserInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutUserInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: IntFilter<"Document"> | number
    documentType?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    filePath?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    userId?: IntFilter<"Document"> | number
    realEstateObjectId?: IntNullableFilter<"Document"> | number | null
    leaseId?: IntNullableFilter<"Document"> | number | null
    unitId?: IntNullableFilter<"Document"> | number | null
  }

  export type ImageUpsertWithWhereUniqueWithoutUserInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutUserInput, ImageUncheckedUpdateWithoutUserInput>
    create: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutUserInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutUserInput, ImageUncheckedUpdateWithoutUserInput>
  }

  export type ImageUpdateManyWithWhereWithoutUserInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutUserInput>
  }

  export type ImageScalarWhereInput = {
    AND?: ImageScalarWhereInput | ImageScalarWhereInput[]
    OR?: ImageScalarWhereInput[]
    NOT?: ImageScalarWhereInput | ImageScalarWhereInput[]
    id?: IntFilter<"Image"> | number
    imageUrl?: StringFilter<"Image"> | string
    createdAt?: DateTimeFilter<"Image"> | Date | string
    realEstateObjectId?: IntNullableFilter<"Image"> | number | null
    unitId?: IntNullableFilter<"Image"> | number | null
    userId?: IntFilter<"Image"> | number
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: IntFilter<"Message"> | number
    content?: JsonFilter<"Message">
    type?: StringFilter<"Message"> | string
    timestamp?: DateTimeFilter<"Message"> | Date | string
    senderId?: IntFilter<"Message"> | number
    receiverId?: IntFilter<"Message"> | number
  }

  export type MessageUpsertWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
  }

  export type MessageUpdateManyWithWhereWithoutReceiverInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReceiverInput>
  }

  export type TenantUpsertWithoutUserInput = {
    update: XOR<TenantUpdateWithoutUserInput, TenantUncheckedUpdateWithoutUserInput>
    create: XOR<TenantCreateWithoutUserInput, TenantUncheckedCreateWithoutUserInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutUserInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutUserInput, TenantUncheckedUpdateWithoutUserInput>
  }

  export type TenantUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    leases?: LeaseUpdateManyWithoutTenantNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutTenantNestedInput
    unit?: UnitUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUpdateManyWithoutReporterNestedInput
  }

  export type TenantUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    leases?: LeaseUncheckedUpdateManyWithoutTenantNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutTenantNestedInput
    unit?: UnitUncheckedUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUncheckedUpdateManyWithoutReporterNestedInput
  }

  export type MaintenanceRequestUpsertWithWhereUniqueWithoutOwnerInput = {
    where: MaintenanceRequestWhereUniqueInput
    update: XOR<MaintenanceRequestUpdateWithoutOwnerInput, MaintenanceRequestUncheckedUpdateWithoutOwnerInput>
    create: XOR<MaintenanceRequestCreateWithoutOwnerInput, MaintenanceRequestUncheckedCreateWithoutOwnerInput>
  }

  export type MaintenanceRequestUpdateWithWhereUniqueWithoutOwnerInput = {
    where: MaintenanceRequestWhereUniqueInput
    data: XOR<MaintenanceRequestUpdateWithoutOwnerInput, MaintenanceRequestUncheckedUpdateWithoutOwnerInput>
  }

  export type MaintenanceRequestUpdateManyWithWhereWithoutOwnerInput = {
    where: MaintenanceRequestScalarWhereInput
    data: XOR<MaintenanceRequestUpdateManyMutationInput, MaintenanceRequestUncheckedUpdateManyWithoutOwnerInput>
  }

  export type MaintenanceRequestScalarWhereInput = {
    AND?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
    OR?: MaintenanceRequestScalarWhereInput[]
    NOT?: MaintenanceRequestScalarWhereInput | MaintenanceRequestScalarWhereInput[]
    id?: IntFilter<"MaintenanceRequest"> | number
    createdAt?: DateTimeFilter<"MaintenanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceRequest"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"MaintenanceRequest"> | Date | string | null
    title?: StringFilter<"MaintenanceRequest"> | string
    status?: EnumMaintenanceStatusNullableFilter<"MaintenanceRequest"> | $Enums.MaintenanceStatus | null
    priority?: EnumPriorityNullableFilter<"MaintenanceRequest"> | $Enums.Priority | null
    ownerId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    tenantId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    notes?: StringNullableFilter<"MaintenanceRequest"> | string | null
    category?: StringFilter<"MaintenanceRequest"> | string
    categoryOther?: StringNullableFilter<"MaintenanceRequest"> | string | null
    pendingTagRequest?: BoolFilter<"MaintenanceRequest"> | boolean
    isHOAIssue?: BoolFilter<"MaintenanceRequest"> | boolean
    attachments?: StringNullableListFilter<"MaintenanceRequest">
    repairCost?: DecimalNullableFilter<"MaintenanceRequest"> | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: StringNullableFilter<"MaintenanceRequest"> | string | null
    vendorId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    vendorAccepted?: BoolNullableFilter<"MaintenanceRequest"> | boolean | null
    vendorRespondedAt?: DateTimeNullableFilter<"MaintenanceRequest"> | Date | string | null
    lastNotificationAt?: DateTimeNullableFilter<"MaintenanceRequest"> | Date | string | null
    reporterId?: IntNullableFilter<"MaintenanceRequest"> | number | null
    unitId?: IntNullableFilter<"MaintenanceRequest"> | number | null
  }

  export type UnitUpsertWithWhereUniqueWithoutOwnersInput = {
    where: UnitWhereUniqueInput
    update: XOR<UnitUpdateWithoutOwnersInput, UnitUncheckedUpdateWithoutOwnersInput>
    create: XOR<UnitCreateWithoutOwnersInput, UnitUncheckedCreateWithoutOwnersInput>
  }

  export type UnitUpdateWithWhereUniqueWithoutOwnersInput = {
    where: UnitWhereUniqueInput
    data: XOR<UnitUpdateWithoutOwnersInput, UnitUncheckedUpdateWithoutOwnersInput>
  }

  export type UnitUpdateManyWithWhereWithoutOwnersInput = {
    where: UnitScalarWhereInput
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyWithoutOwnersInput>
  }

  export type UnitScalarWhereInput = {
    AND?: UnitScalarWhereInput | UnitScalarWhereInput[]
    OR?: UnitScalarWhereInput[]
    NOT?: UnitScalarWhereInput | UnitScalarWhereInput[]
    id?: IntFilter<"Unit"> | number
    createdAt?: DateTimeFilter<"Unit"> | Date | string
    updatedAt?: DateTimeFilter<"Unit"> | Date | string
    unitIdentifier?: StringNullableFilter<"Unit"> | string | null
    unitNumber?: StringNullableFilter<"Unit"> | string | null
    floor?: IntNullableFilter<"Unit"> | number | null
    unitSize?: FloatNullableFilter<"Unit"> | number | null
    numOfFloors?: IntNullableFilter<"Unit"> | number | null
    numOfRooms?: IntNullableFilter<"Unit"> | number | null
    numOfBedrooms?: IntNullableFilter<"Unit"> | number | null
    numOfBathrooms?: IntNullableFilter<"Unit"> | number | null
    garages?: IntNullableFilter<"Unit"> | number | null
    rentalPrice?: FloatNullableFilter<"Unit"> | number | null
    currency?: EnumCurrencyCodeNullableFilter<"Unit"> | $Enums.CurrencyCode | null
    status?: EnumListingStatusNullableFilter<"Unit"> | $Enums.ListingStatus | null
    realEstateObjectId?: IntFilter<"Unit"> | number
    tenantId?: IntNullableFilter<"Unit"> | number | null
  }

  export type OverwriteCodeUpsertWithWhereUniqueWithoutUsedByInput = {
    where: OverwriteCodeWhereUniqueInput
    update: XOR<OverwriteCodeUpdateWithoutUsedByInput, OverwriteCodeUncheckedUpdateWithoutUsedByInput>
    create: XOR<OverwriteCodeCreateWithoutUsedByInput, OverwriteCodeUncheckedCreateWithoutUsedByInput>
  }

  export type OverwriteCodeUpdateWithWhereUniqueWithoutUsedByInput = {
    where: OverwriteCodeWhereUniqueInput
    data: XOR<OverwriteCodeUpdateWithoutUsedByInput, OverwriteCodeUncheckedUpdateWithoutUsedByInput>
  }

  export type OverwriteCodeUpdateManyWithWhereWithoutUsedByInput = {
    where: OverwriteCodeScalarWhereInput
    data: XOR<OverwriteCodeUpdateManyMutationInput, OverwriteCodeUncheckedUpdateManyWithoutUsedByInput>
  }

  export type OverwriteCodeScalarWhereInput = {
    AND?: OverwriteCodeScalarWhereInput | OverwriteCodeScalarWhereInput[]
    OR?: OverwriteCodeScalarWhereInput[]
    NOT?: OverwriteCodeScalarWhereInput | OverwriteCodeScalarWhereInput[]
    id?: IntFilter<"OverwriteCode"> | number
    code?: StringFilter<"OverwriteCode"> | string
    expiresAt?: DateTimeFilter<"OverwriteCode"> | Date | string
    used?: BoolFilter<"OverwriteCode"> | boolean
    usedById?: IntNullableFilter<"OverwriteCode"> | number | null
  }

  export type UserCreateWithoutTenantInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeCreateNestedManyWithoutUsedByInput
  }

  export type UserUncheckedCreateWithoutTenantInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitUncheckedCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUsedByInput
  }

  export type UserCreateOrConnectWithoutTenantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type LeaseCreateWithoutTenantInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    documents?: DocumentCreateNestedManyWithoutLeaseInput
    unit?: UnitCreateNestedOneWithoutLeasesInput
    expenses?: ExpenseCreateNestedManyWithoutLeaseInput
    rentPayments?: RentPaymentCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleCreateNestedManyWithoutLeaseInput
  }

  export type LeaseUncheckedCreateWithoutTenantInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    unitId?: number | null
    documents?: DocumentUncheckedCreateNestedManyWithoutLeaseInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutLeaseInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleUncheckedCreateNestedManyWithoutLeaseInput
  }

  export type LeaseCreateOrConnectWithoutTenantInput = {
    where: LeaseWhereUniqueInput
    create: XOR<LeaseCreateWithoutTenantInput, LeaseUncheckedCreateWithoutTenantInput>
  }

  export type LeaseCreateManyTenantInputEnvelope = {
    data: LeaseCreateManyTenantInput | LeaseCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceRequestCreateWithoutTenantInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    owner?: UserCreateNestedOneWithoutMaintenanceRequestsInput
    vendor?: VendorCreateNestedOneWithoutRequestsInput
    reporter?: TenantCreateNestedOneWithoutMaintenanceRequestInput
    unit?: UnitCreateNestedOneWithoutMaintenanceRequestsInput
    expenses?: ExpenseCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestUncheckedCreateWithoutTenantInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    unitId?: number | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestUncheckedCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestUncheckedCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestCreateOrConnectWithoutTenantInput = {
    where: MaintenanceRequestWhereUniqueInput
    create: XOR<MaintenanceRequestCreateWithoutTenantInput, MaintenanceRequestUncheckedCreateWithoutTenantInput>
  }

  export type MaintenanceRequestCreateManyTenantInputEnvelope = {
    data: MaintenanceRequestCreateManyTenantInput | MaintenanceRequestCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type RentPaymentCreateWithoutTenantInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    status?: $Enums.PaymentStatus | null
    notes?: string | null
    paymentMethod?: string | null
    submittedBy: number
    submissionDate?: Date | string | null
    approvalDate?: Date | string | null
    lease?: LeaseCreateNestedOneWithoutRentPaymentsInput
  }

  export type RentPaymentUncheckedCreateWithoutTenantInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    status?: $Enums.PaymentStatus | null
    notes?: string | null
    paymentMethod?: string | null
    submittedBy: number
    submissionDate?: Date | string | null
    approvalDate?: Date | string | null
    leaseId?: number | null
  }

  export type RentPaymentCreateOrConnectWithoutTenantInput = {
    where: RentPaymentWhereUniqueInput
    create: XOR<RentPaymentCreateWithoutTenantInput, RentPaymentUncheckedCreateWithoutTenantInput>
  }

  export type RentPaymentCreateManyTenantInputEnvelope = {
    data: RentPaymentCreateManyTenantInput | RentPaymentCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type UnitCreateWithoutTenantInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutUnitInput
    documents?: DocumentCreateNestedManyWithoutUnitInput
    images?: ImageCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutUnitInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutUnitsInput
    leases?: LeaseCreateNestedManyWithoutUnitInput
    expenses?: ExpenseCreateNestedManyWithoutUnitInput
    owners?: UserCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeCreateNestedManyWithoutUnitsInput
  }

  export type UnitUncheckedCreateWithoutTenantInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutUnitInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUnitInput
    images?: ImageUncheckedCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutUnitInput
    leases?: LeaseUncheckedCreateNestedManyWithoutUnitInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutUnitInput
    owners?: UserUncheckedCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUnitsInput
  }

  export type UnitCreateOrConnectWithoutTenantInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutTenantInput, UnitUncheckedCreateWithoutTenantInput>
  }

  export type UnitCreateManyTenantInputEnvelope = {
    data: UnitCreateManyTenantInput | UnitCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceRequestCreateWithoutReporterInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    owner?: UserCreateNestedOneWithoutMaintenanceRequestsInput
    tenant?: TenantCreateNestedOneWithoutMaintenanceRequestsInput
    vendor?: VendorCreateNestedOneWithoutRequestsInput
    unit?: UnitCreateNestedOneWithoutMaintenanceRequestsInput
    expenses?: ExpenseCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestUncheckedCreateWithoutReporterInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    unitId?: number | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestUncheckedCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestUncheckedCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestCreateOrConnectWithoutReporterInput = {
    where: MaintenanceRequestWhereUniqueInput
    create: XOR<MaintenanceRequestCreateWithoutReporterInput, MaintenanceRequestUncheckedCreateWithoutReporterInput>
  }

  export type MaintenanceRequestCreateManyReporterInputEnvelope = {
    data: MaintenanceRequestCreateManyReporterInput | MaintenanceRequestCreateManyReporterInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTenantInput = {
    update: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTenantInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
  }

  export type UserUpdateWithoutTenantInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUpdateManyWithoutUsedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUncheckedUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUncheckedUpdateManyWithoutUsedByNestedInput
  }

  export type LeaseUpsertWithWhereUniqueWithoutTenantInput = {
    where: LeaseWhereUniqueInput
    update: XOR<LeaseUpdateWithoutTenantInput, LeaseUncheckedUpdateWithoutTenantInput>
    create: XOR<LeaseCreateWithoutTenantInput, LeaseUncheckedCreateWithoutTenantInput>
  }

  export type LeaseUpdateWithWhereUniqueWithoutTenantInput = {
    where: LeaseWhereUniqueInput
    data: XOR<LeaseUpdateWithoutTenantInput, LeaseUncheckedUpdateWithoutTenantInput>
  }

  export type LeaseUpdateManyWithWhereWithoutTenantInput = {
    where: LeaseScalarWhereInput
    data: XOR<LeaseUpdateManyMutationInput, LeaseUncheckedUpdateManyWithoutTenantInput>
  }

  export type LeaseScalarWhereInput = {
    AND?: LeaseScalarWhereInput | LeaseScalarWhereInput[]
    OR?: LeaseScalarWhereInput[]
    NOT?: LeaseScalarWhereInput | LeaseScalarWhereInput[]
    id?: IntFilter<"Lease"> | number
    createdAt?: DateTimeFilter<"Lease"> | Date | string
    updatedAt?: DateTimeFilter<"Lease"> | Date | string
    startDate?: DateTimeNullableFilter<"Lease"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Lease"> | Date | string | null
    rentalPrice?: FloatNullableFilter<"Lease"> | number | null
    status?: EnumLeaseStatusNullableFilter<"Lease"> | $Enums.LeaseStatus | null
    paymentFrequency?: EnumPaymentFrequencyNullableFilter<"Lease"> | $Enums.PaymentFrequency | null
    notes?: StringNullableFilter<"Lease"> | string | null
    specialTerms?: StringNullableFilter<"Lease"> | string | null
    currency?: EnumCurrencyCodeNullableFilter<"Lease"> | $Enums.CurrencyCode | null
    totalRentDue?: FloatNullableFilter<"Lease"> | number | null
    rentPaid?: FloatNullableFilter<"Lease"> | number | null
    tenantId?: IntNullableFilter<"Lease"> | number | null
    unitId?: IntNullableFilter<"Lease"> | number | null
  }

  export type MaintenanceRequestUpsertWithWhereUniqueWithoutTenantInput = {
    where: MaintenanceRequestWhereUniqueInput
    update: XOR<MaintenanceRequestUpdateWithoutTenantInput, MaintenanceRequestUncheckedUpdateWithoutTenantInput>
    create: XOR<MaintenanceRequestCreateWithoutTenantInput, MaintenanceRequestUncheckedCreateWithoutTenantInput>
  }

  export type MaintenanceRequestUpdateWithWhereUniqueWithoutTenantInput = {
    where: MaintenanceRequestWhereUniqueInput
    data: XOR<MaintenanceRequestUpdateWithoutTenantInput, MaintenanceRequestUncheckedUpdateWithoutTenantInput>
  }

  export type MaintenanceRequestUpdateManyWithWhereWithoutTenantInput = {
    where: MaintenanceRequestScalarWhereInput
    data: XOR<MaintenanceRequestUpdateManyMutationInput, MaintenanceRequestUncheckedUpdateManyWithoutTenantInput>
  }

  export type RentPaymentUpsertWithWhereUniqueWithoutTenantInput = {
    where: RentPaymentWhereUniqueInput
    update: XOR<RentPaymentUpdateWithoutTenantInput, RentPaymentUncheckedUpdateWithoutTenantInput>
    create: XOR<RentPaymentCreateWithoutTenantInput, RentPaymentUncheckedCreateWithoutTenantInput>
  }

  export type RentPaymentUpdateWithWhereUniqueWithoutTenantInput = {
    where: RentPaymentWhereUniqueInput
    data: XOR<RentPaymentUpdateWithoutTenantInput, RentPaymentUncheckedUpdateWithoutTenantInput>
  }

  export type RentPaymentUpdateManyWithWhereWithoutTenantInput = {
    where: RentPaymentScalarWhereInput
    data: XOR<RentPaymentUpdateManyMutationInput, RentPaymentUncheckedUpdateManyWithoutTenantInput>
  }

  export type RentPaymentScalarWhereInput = {
    AND?: RentPaymentScalarWhereInput | RentPaymentScalarWhereInput[]
    OR?: RentPaymentScalarWhereInput[]
    NOT?: RentPaymentScalarWhereInput | RentPaymentScalarWhereInput[]
    id?: IntFilter<"RentPayment"> | number
    createdAt?: DateTimeFilter<"RentPayment"> | Date | string
    updatedAt?: DateTimeFilter<"RentPayment"> | Date | string
    amount?: FloatNullableFilter<"RentPayment"> | number | null
    currency?: EnumCurrencyCodeNullableFilter<"RentPayment"> | $Enums.CurrencyCode | null
    date?: DateTimeNullableFilter<"RentPayment"> | Date | string | null
    status?: EnumPaymentStatusNullableFilter<"RentPayment"> | $Enums.PaymentStatus | null
    notes?: StringNullableFilter<"RentPayment"> | string | null
    paymentMethod?: StringNullableFilter<"RentPayment"> | string | null
    submittedBy?: IntFilter<"RentPayment"> | number
    submissionDate?: DateTimeNullableFilter<"RentPayment"> | Date | string | null
    approvalDate?: DateTimeNullableFilter<"RentPayment"> | Date | string | null
    leaseId?: IntNullableFilter<"RentPayment"> | number | null
    tenantId?: IntNullableFilter<"RentPayment"> | number | null
  }

  export type UnitUpsertWithWhereUniqueWithoutTenantInput = {
    where: UnitWhereUniqueInput
    update: XOR<UnitUpdateWithoutTenantInput, UnitUncheckedUpdateWithoutTenantInput>
    create: XOR<UnitCreateWithoutTenantInput, UnitUncheckedCreateWithoutTenantInput>
  }

  export type UnitUpdateWithWhereUniqueWithoutTenantInput = {
    where: UnitWhereUniqueInput
    data: XOR<UnitUpdateWithoutTenantInput, UnitUncheckedUpdateWithoutTenantInput>
  }

  export type UnitUpdateManyWithWhereWithoutTenantInput = {
    where: UnitScalarWhereInput
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyWithoutTenantInput>
  }

  export type MaintenanceRequestUpsertWithWhereUniqueWithoutReporterInput = {
    where: MaintenanceRequestWhereUniqueInput
    update: XOR<MaintenanceRequestUpdateWithoutReporterInput, MaintenanceRequestUncheckedUpdateWithoutReporterInput>
    create: XOR<MaintenanceRequestCreateWithoutReporterInput, MaintenanceRequestUncheckedCreateWithoutReporterInput>
  }

  export type MaintenanceRequestUpdateWithWhereUniqueWithoutReporterInput = {
    where: MaintenanceRequestWhereUniqueInput
    data: XOR<MaintenanceRequestUpdateWithoutReporterInput, MaintenanceRequestUncheckedUpdateWithoutReporterInput>
  }

  export type MaintenanceRequestUpdateManyWithWhereWithoutReporterInput = {
    where: MaintenanceRequestScalarWhereInput
    data: XOR<MaintenanceRequestUpdateManyMutationInput, MaintenanceRequestUncheckedUpdateManyWithoutReporterInput>
  }

  export type UserCreateWithoutTokensInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    documents?: DocumentCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    tenant?: TenantCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeCreateNestedManyWithoutUsedByInput
  }

  export type UserUncheckedCreateWithoutTokensInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    tenant?: TenantUncheckedCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitUncheckedCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUsedByInput
  }

  export type UserCreateOrConnectWithoutTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
  }

  export type UserUpsertWithoutTokensInput = {
    update: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
  }

  export type UserUpdateWithoutTokensInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: DocumentUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUpdateManyWithoutUsedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUncheckedUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUncheckedUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUncheckedUpdateManyWithoutUsedByNestedInput
  }

  export type ImageCreateWithoutRealEstateObjectInput = {
    imageUrl: string
    createdAt?: Date | string
    unit?: UnitCreateNestedOneWithoutImagesInput
    user: UserCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateWithoutRealEstateObjectInput = {
    id?: number
    imageUrl: string
    createdAt?: Date | string
    unitId?: number | null
    userId: number
  }

  export type ImageCreateOrConnectWithoutRealEstateObjectInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutRealEstateObjectInput, ImageUncheckedCreateWithoutRealEstateObjectInput>
  }

  export type ImageCreateManyRealEstateObjectInputEnvelope = {
    data: ImageCreateManyRealEstateObjectInput | ImageCreateManyRealEstateObjectInput[]
    skipDuplicates?: boolean
  }

  export type AmenitiesOnRealEstateCreateWithoutRealEstateObjectInput = {
    assignedAt?: Date | string
    assignedBy: string
    amenity: AmenityCreateNestedOneWithoutRealEstateObjectsInput
    unit?: UnitCreateNestedOneWithoutAmenitiesInput
  }

  export type AmenitiesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput = {
    amenityId: number
    assignedAt?: Date | string
    assignedBy: string
    unitId?: number | null
  }

  export type AmenitiesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput = {
    where: AmenitiesOnRealEstateWhereUniqueInput
    create: XOR<AmenitiesOnRealEstateCreateWithoutRealEstateObjectInput, AmenitiesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput>
  }

  export type AmenitiesOnRealEstateCreateManyRealEstateObjectInputEnvelope = {
    data: AmenitiesOnRealEstateCreateManyRealEstateObjectInput | AmenitiesOnRealEstateCreateManyRealEstateObjectInput[]
    skipDuplicates?: boolean
  }

  export type PreferencesOnRealEstateCreateWithoutRealEstateObjectInput = {
    assignedAt?: Date | string
    assignedBy: string
    preference: PreferenceCreateNestedOneWithoutRealEstateObjectsInput
  }

  export type PreferencesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput = {
    preferenceId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type PreferencesOnRealEstateCreateOrConnectWithoutRealEstateObjectInput = {
    where: PreferencesOnRealEstateWhereUniqueInput
    create: XOR<PreferencesOnRealEstateCreateWithoutRealEstateObjectInput, PreferencesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput>
  }

  export type PreferencesOnRealEstateCreateManyRealEstateObjectInputEnvelope = {
    data: PreferencesOnRealEstateCreateManyRealEstateObjectInput | PreferencesOnRealEstateCreateManyRealEstateObjectInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutRealEstateObjectInput = {
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDocumentsInput
    lease?: LeaseCreateNestedOneWithoutDocumentsInput
    unit?: UnitCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutRealEstateObjectInput = {
    id?: number
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    leaseId?: number | null
    unitId?: number | null
  }

  export type DocumentCreateOrConnectWithoutRealEstateObjectInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutRealEstateObjectInput, DocumentUncheckedCreateWithoutRealEstateObjectInput>
  }

  export type DocumentCreateManyRealEstateObjectInputEnvelope = {
    data: DocumentCreateManyRealEstateObjectInput | DocumentCreateManyRealEstateObjectInput[]
    skipDuplicates?: boolean
  }

  export type UnitCreateWithoutRealEstateObjectInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutUnitInput
    documents?: DocumentCreateNestedManyWithoutUnitInput
    images?: ImageCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutUnitInput
    tenant?: TenantCreateNestedOneWithoutUnitInput
    leases?: LeaseCreateNestedManyWithoutUnitInput
    expenses?: ExpenseCreateNestedManyWithoutUnitInput
    owners?: UserCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeCreateNestedManyWithoutUnitsInput
  }

  export type UnitUncheckedCreateWithoutRealEstateObjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    tenantId?: number | null
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutUnitInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUnitInput
    images?: ImageUncheckedCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutUnitInput
    leases?: LeaseUncheckedCreateNestedManyWithoutUnitInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutUnitInput
    owners?: UserUncheckedCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUnitsInput
  }

  export type UnitCreateOrConnectWithoutRealEstateObjectInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutRealEstateObjectInput, UnitUncheckedCreateWithoutRealEstateObjectInput>
  }

  export type UnitCreateManyRealEstateObjectInputEnvelope = {
    data: UnitCreateManyRealEstateObjectInput | UnitCreateManyRealEstateObjectInput[]
    skipDuplicates?: boolean
  }

  export type ImageUpsertWithWhereUniqueWithoutRealEstateObjectInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutRealEstateObjectInput, ImageUncheckedUpdateWithoutRealEstateObjectInput>
    create: XOR<ImageCreateWithoutRealEstateObjectInput, ImageUncheckedCreateWithoutRealEstateObjectInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutRealEstateObjectInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutRealEstateObjectInput, ImageUncheckedUpdateWithoutRealEstateObjectInput>
  }

  export type ImageUpdateManyWithWhereWithoutRealEstateObjectInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutRealEstateObjectInput>
  }

  export type AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutRealEstateObjectInput = {
    where: AmenitiesOnRealEstateWhereUniqueInput
    update: XOR<AmenitiesOnRealEstateUpdateWithoutRealEstateObjectInput, AmenitiesOnRealEstateUncheckedUpdateWithoutRealEstateObjectInput>
    create: XOR<AmenitiesOnRealEstateCreateWithoutRealEstateObjectInput, AmenitiesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput>
  }

  export type AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutRealEstateObjectInput = {
    where: AmenitiesOnRealEstateWhereUniqueInput
    data: XOR<AmenitiesOnRealEstateUpdateWithoutRealEstateObjectInput, AmenitiesOnRealEstateUncheckedUpdateWithoutRealEstateObjectInput>
  }

  export type AmenitiesOnRealEstateUpdateManyWithWhereWithoutRealEstateObjectInput = {
    where: AmenitiesOnRealEstateScalarWhereInput
    data: XOR<AmenitiesOnRealEstateUpdateManyMutationInput, AmenitiesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectInput>
  }

  export type AmenitiesOnRealEstateScalarWhereInput = {
    AND?: AmenitiesOnRealEstateScalarWhereInput | AmenitiesOnRealEstateScalarWhereInput[]
    OR?: AmenitiesOnRealEstateScalarWhereInput[]
    NOT?: AmenitiesOnRealEstateScalarWhereInput | AmenitiesOnRealEstateScalarWhereInput[]
    amenityId?: IntFilter<"AmenitiesOnRealEstate"> | number
    realEstateObjectId?: IntFilter<"AmenitiesOnRealEstate"> | number
    assignedAt?: DateTimeFilter<"AmenitiesOnRealEstate"> | Date | string
    assignedBy?: StringFilter<"AmenitiesOnRealEstate"> | string
    unitId?: IntNullableFilter<"AmenitiesOnRealEstate"> | number | null
  }

  export type PreferencesOnRealEstateUpsertWithWhereUniqueWithoutRealEstateObjectInput = {
    where: PreferencesOnRealEstateWhereUniqueInput
    update: XOR<PreferencesOnRealEstateUpdateWithoutRealEstateObjectInput, PreferencesOnRealEstateUncheckedUpdateWithoutRealEstateObjectInput>
    create: XOR<PreferencesOnRealEstateCreateWithoutRealEstateObjectInput, PreferencesOnRealEstateUncheckedCreateWithoutRealEstateObjectInput>
  }

  export type PreferencesOnRealEstateUpdateWithWhereUniqueWithoutRealEstateObjectInput = {
    where: PreferencesOnRealEstateWhereUniqueInput
    data: XOR<PreferencesOnRealEstateUpdateWithoutRealEstateObjectInput, PreferencesOnRealEstateUncheckedUpdateWithoutRealEstateObjectInput>
  }

  export type PreferencesOnRealEstateUpdateManyWithWhereWithoutRealEstateObjectInput = {
    where: PreferencesOnRealEstateScalarWhereInput
    data: XOR<PreferencesOnRealEstateUpdateManyMutationInput, PreferencesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectInput>
  }

  export type PreferencesOnRealEstateScalarWhereInput = {
    AND?: PreferencesOnRealEstateScalarWhereInput | PreferencesOnRealEstateScalarWhereInput[]
    OR?: PreferencesOnRealEstateScalarWhereInput[]
    NOT?: PreferencesOnRealEstateScalarWhereInput | PreferencesOnRealEstateScalarWhereInput[]
    preferenceId?: IntFilter<"PreferencesOnRealEstate"> | number
    realEstateObjectId?: IntFilter<"PreferencesOnRealEstate"> | number
    assignedAt?: DateTimeFilter<"PreferencesOnRealEstate"> | Date | string
    assignedBy?: StringFilter<"PreferencesOnRealEstate"> | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutRealEstateObjectInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutRealEstateObjectInput, DocumentUncheckedUpdateWithoutRealEstateObjectInput>
    create: XOR<DocumentCreateWithoutRealEstateObjectInput, DocumentUncheckedCreateWithoutRealEstateObjectInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutRealEstateObjectInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutRealEstateObjectInput, DocumentUncheckedUpdateWithoutRealEstateObjectInput>
  }

  export type DocumentUpdateManyWithWhereWithoutRealEstateObjectInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutRealEstateObjectInput>
  }

  export type UnitUpsertWithWhereUniqueWithoutRealEstateObjectInput = {
    where: UnitWhereUniqueInput
    update: XOR<UnitUpdateWithoutRealEstateObjectInput, UnitUncheckedUpdateWithoutRealEstateObjectInput>
    create: XOR<UnitCreateWithoutRealEstateObjectInput, UnitUncheckedCreateWithoutRealEstateObjectInput>
  }

  export type UnitUpdateWithWhereUniqueWithoutRealEstateObjectInput = {
    where: UnitWhereUniqueInput
    data: XOR<UnitUpdateWithoutRealEstateObjectInput, UnitUncheckedUpdateWithoutRealEstateObjectInput>
  }

  export type UnitUpdateManyWithWhereWithoutRealEstateObjectInput = {
    where: UnitScalarWhereInput
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyWithoutRealEstateObjectInput>
  }

  export type AmenitiesOnRealEstateCreateWithoutAmenityInput = {
    assignedAt?: Date | string
    assignedBy: string
    realEstateObject: RealEstateObjectCreateNestedOneWithoutAmenitiesInput
    unit?: UnitCreateNestedOneWithoutAmenitiesInput
  }

  export type AmenitiesOnRealEstateUncheckedCreateWithoutAmenityInput = {
    realEstateObjectId: number
    assignedAt?: Date | string
    assignedBy: string
    unitId?: number | null
  }

  export type AmenitiesOnRealEstateCreateOrConnectWithoutAmenityInput = {
    where: AmenitiesOnRealEstateWhereUniqueInput
    create: XOR<AmenitiesOnRealEstateCreateWithoutAmenityInput, AmenitiesOnRealEstateUncheckedCreateWithoutAmenityInput>
  }

  export type AmenitiesOnRealEstateCreateManyAmenityInputEnvelope = {
    data: AmenitiesOnRealEstateCreateManyAmenityInput | AmenitiesOnRealEstateCreateManyAmenityInput[]
    skipDuplicates?: boolean
  }

  export type AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutAmenityInput = {
    where: AmenitiesOnRealEstateWhereUniqueInput
    update: XOR<AmenitiesOnRealEstateUpdateWithoutAmenityInput, AmenitiesOnRealEstateUncheckedUpdateWithoutAmenityInput>
    create: XOR<AmenitiesOnRealEstateCreateWithoutAmenityInput, AmenitiesOnRealEstateUncheckedCreateWithoutAmenityInput>
  }

  export type AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutAmenityInput = {
    where: AmenitiesOnRealEstateWhereUniqueInput
    data: XOR<AmenitiesOnRealEstateUpdateWithoutAmenityInput, AmenitiesOnRealEstateUncheckedUpdateWithoutAmenityInput>
  }

  export type AmenitiesOnRealEstateUpdateManyWithWhereWithoutAmenityInput = {
    where: AmenitiesOnRealEstateScalarWhereInput
    data: XOR<AmenitiesOnRealEstateUpdateManyMutationInput, AmenitiesOnRealEstateUncheckedUpdateManyWithoutAmenityInput>
  }

  export type AmenityCreateWithoutRealEstateObjectsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    category?: $Enums.AmenityCategory | null
  }

  export type AmenityUncheckedCreateWithoutRealEstateObjectsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    description?: string | null
    category?: $Enums.AmenityCategory | null
  }

  export type AmenityCreateOrConnectWithoutRealEstateObjectsInput = {
    where: AmenityWhereUniqueInput
    create: XOR<AmenityCreateWithoutRealEstateObjectsInput, AmenityUncheckedCreateWithoutRealEstateObjectsInput>
  }

  export type RealEstateObjectCreateWithoutAmenitiesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    images?: ImageCreateNestedManyWithoutRealEstateObjectInput
    preferences?: PreferencesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput
    documents?: DocumentCreateNestedManyWithoutRealEstateObjectInput
    units?: UnitCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectUncheckedCreateWithoutAmenitiesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    images?: ImageUncheckedCreateNestedManyWithoutRealEstateObjectInput
    preferences?: PreferencesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutRealEstateObjectInput
    units?: UnitUncheckedCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectCreateOrConnectWithoutAmenitiesInput = {
    where: RealEstateObjectWhereUniqueInput
    create: XOR<RealEstateObjectCreateWithoutAmenitiesInput, RealEstateObjectUncheckedCreateWithoutAmenitiesInput>
  }

  export type UnitCreateWithoutAmenitiesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    documents?: DocumentCreateNestedManyWithoutUnitInput
    images?: ImageCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutUnitInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutUnitsInput
    tenant?: TenantCreateNestedOneWithoutUnitInput
    leases?: LeaseCreateNestedManyWithoutUnitInput
    expenses?: ExpenseCreateNestedManyWithoutUnitInput
    owners?: UserCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeCreateNestedManyWithoutUnitsInput
  }

  export type UnitUncheckedCreateWithoutAmenitiesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
    tenantId?: number | null
    documents?: DocumentUncheckedCreateNestedManyWithoutUnitInput
    images?: ImageUncheckedCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutUnitInput
    leases?: LeaseUncheckedCreateNestedManyWithoutUnitInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutUnitInput
    owners?: UserUncheckedCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUnitsInput
  }

  export type UnitCreateOrConnectWithoutAmenitiesInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutAmenitiesInput, UnitUncheckedCreateWithoutAmenitiesInput>
  }

  export type AmenityUpsertWithoutRealEstateObjectsInput = {
    update: XOR<AmenityUpdateWithoutRealEstateObjectsInput, AmenityUncheckedUpdateWithoutRealEstateObjectsInput>
    create: XOR<AmenityCreateWithoutRealEstateObjectsInput, AmenityUncheckedCreateWithoutRealEstateObjectsInput>
    where?: AmenityWhereInput
  }

  export type AmenityUpdateToOneWithWhereWithoutRealEstateObjectsInput = {
    where?: AmenityWhereInput
    data: XOR<AmenityUpdateWithoutRealEstateObjectsInput, AmenityUncheckedUpdateWithoutRealEstateObjectsInput>
  }

  export type AmenityUpdateWithoutRealEstateObjectsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumAmenityCategoryFieldUpdateOperationsInput | $Enums.AmenityCategory | null
  }

  export type AmenityUncheckedUpdateWithoutRealEstateObjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableEnumAmenityCategoryFieldUpdateOperationsInput | $Enums.AmenityCategory | null
  }

  export type RealEstateObjectUpsertWithoutAmenitiesInput = {
    update: XOR<RealEstateObjectUpdateWithoutAmenitiesInput, RealEstateObjectUncheckedUpdateWithoutAmenitiesInput>
    create: XOR<RealEstateObjectCreateWithoutAmenitiesInput, RealEstateObjectUncheckedCreateWithoutAmenitiesInput>
    where?: RealEstateObjectWhereInput
  }

  export type RealEstateObjectUpdateToOneWithWhereWithoutAmenitiesInput = {
    where?: RealEstateObjectWhereInput
    data: XOR<RealEstateObjectUpdateWithoutAmenitiesInput, RealEstateObjectUncheckedUpdateWithoutAmenitiesInput>
  }

  export type RealEstateObjectUpdateWithoutAmenitiesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUpdateManyWithoutRealEstateObjectNestedInput
    preferences?: PreferencesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput
    documents?: DocumentUpdateManyWithoutRealEstateObjectNestedInput
    units?: UnitUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type RealEstateObjectUncheckedUpdateWithoutAmenitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    preferences?: PreferencesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    units?: UnitUncheckedUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type UnitUpsertWithoutAmenitiesInput = {
    update: XOR<UnitUpdateWithoutAmenitiesInput, UnitUncheckedUpdateWithoutAmenitiesInput>
    create: XOR<UnitCreateWithoutAmenitiesInput, UnitUncheckedCreateWithoutAmenitiesInput>
    where?: UnitWhereInput
  }

  export type UnitUpdateToOneWithWhereWithoutAmenitiesInput = {
    where?: UnitWhereInput
    data: XOR<UnitUpdateWithoutAmenitiesInput, UnitUncheckedUpdateWithoutAmenitiesInput>
  }

  export type UnitUpdateWithoutAmenitiesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    documents?: DocumentUpdateManyWithoutUnitNestedInput
    images?: ImageUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutUnitNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutUnitsNestedInput
    tenant?: TenantUpdateOneWithoutUnitNestedInput
    leases?: LeaseUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUpdateManyWithoutUnitNestedInput
    owners?: UserUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateWithoutAmenitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    documents?: DocumentUncheckedUpdateManyWithoutUnitNestedInput
    images?: ImageUncheckedUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutUnitNestedInput
    leases?: LeaseUncheckedUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutUnitNestedInput
    owners?: UserUncheckedUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUncheckedUpdateManyWithoutUnitsNestedInput
  }

  export type PreferencesOnRealEstateCreateWithoutPreferenceInput = {
    assignedAt?: Date | string
    assignedBy: string
    realEstateObject: RealEstateObjectCreateNestedOneWithoutPreferencesInput
  }

  export type PreferencesOnRealEstateUncheckedCreateWithoutPreferenceInput = {
    realEstateObjectId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type PreferencesOnRealEstateCreateOrConnectWithoutPreferenceInput = {
    where: PreferencesOnRealEstateWhereUniqueInput
    create: XOR<PreferencesOnRealEstateCreateWithoutPreferenceInput, PreferencesOnRealEstateUncheckedCreateWithoutPreferenceInput>
  }

  export type PreferencesOnRealEstateCreateManyPreferenceInputEnvelope = {
    data: PreferencesOnRealEstateCreateManyPreferenceInput | PreferencesOnRealEstateCreateManyPreferenceInput[]
    skipDuplicates?: boolean
  }

  export type PreferencesOnRealEstateUpsertWithWhereUniqueWithoutPreferenceInput = {
    where: PreferencesOnRealEstateWhereUniqueInput
    update: XOR<PreferencesOnRealEstateUpdateWithoutPreferenceInput, PreferencesOnRealEstateUncheckedUpdateWithoutPreferenceInput>
    create: XOR<PreferencesOnRealEstateCreateWithoutPreferenceInput, PreferencesOnRealEstateUncheckedCreateWithoutPreferenceInput>
  }

  export type PreferencesOnRealEstateUpdateWithWhereUniqueWithoutPreferenceInput = {
    where: PreferencesOnRealEstateWhereUniqueInput
    data: XOR<PreferencesOnRealEstateUpdateWithoutPreferenceInput, PreferencesOnRealEstateUncheckedUpdateWithoutPreferenceInput>
  }

  export type PreferencesOnRealEstateUpdateManyWithWhereWithoutPreferenceInput = {
    where: PreferencesOnRealEstateScalarWhereInput
    data: XOR<PreferencesOnRealEstateUpdateManyMutationInput, PreferencesOnRealEstateUncheckedUpdateManyWithoutPreferenceInput>
  }

  export type PreferenceCreateWithoutRealEstateObjectsInput = {
    name: string
    enabled?: boolean | null
  }

  export type PreferenceUncheckedCreateWithoutRealEstateObjectsInput = {
    id?: number
    name: string
    enabled?: boolean | null
  }

  export type PreferenceCreateOrConnectWithoutRealEstateObjectsInput = {
    where: PreferenceWhereUniqueInput
    create: XOR<PreferenceCreateWithoutRealEstateObjectsInput, PreferenceUncheckedCreateWithoutRealEstateObjectsInput>
  }

  export type RealEstateObjectCreateWithoutPreferencesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    images?: ImageCreateNestedManyWithoutRealEstateObjectInput
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput
    documents?: DocumentCreateNestedManyWithoutRealEstateObjectInput
    units?: UnitCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectUncheckedCreateWithoutPreferencesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    images?: ImageUncheckedCreateNestedManyWithoutRealEstateObjectInput
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutRealEstateObjectInput
    units?: UnitUncheckedCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectCreateOrConnectWithoutPreferencesInput = {
    where: RealEstateObjectWhereUniqueInput
    create: XOR<RealEstateObjectCreateWithoutPreferencesInput, RealEstateObjectUncheckedCreateWithoutPreferencesInput>
  }

  export type PreferenceUpsertWithoutRealEstateObjectsInput = {
    update: XOR<PreferenceUpdateWithoutRealEstateObjectsInput, PreferenceUncheckedUpdateWithoutRealEstateObjectsInput>
    create: XOR<PreferenceCreateWithoutRealEstateObjectsInput, PreferenceUncheckedCreateWithoutRealEstateObjectsInput>
    where?: PreferenceWhereInput
  }

  export type PreferenceUpdateToOneWithWhereWithoutRealEstateObjectsInput = {
    where?: PreferenceWhereInput
    data: XOR<PreferenceUpdateWithoutRealEstateObjectsInput, PreferenceUncheckedUpdateWithoutRealEstateObjectsInput>
  }

  export type PreferenceUpdateWithoutRealEstateObjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type PreferenceUncheckedUpdateWithoutRealEstateObjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    enabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RealEstateObjectUpsertWithoutPreferencesInput = {
    update: XOR<RealEstateObjectUpdateWithoutPreferencesInput, RealEstateObjectUncheckedUpdateWithoutPreferencesInput>
    create: XOR<RealEstateObjectCreateWithoutPreferencesInput, RealEstateObjectUncheckedCreateWithoutPreferencesInput>
    where?: RealEstateObjectWhereInput
  }

  export type RealEstateObjectUpdateToOneWithWhereWithoutPreferencesInput = {
    where?: RealEstateObjectWhereInput
    data: XOR<RealEstateObjectUpdateWithoutPreferencesInput, RealEstateObjectUncheckedUpdateWithoutPreferencesInput>
  }

  export type RealEstateObjectUpdateWithoutPreferencesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUpdateManyWithoutRealEstateObjectNestedInput
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput
    documents?: DocumentUpdateManyWithoutRealEstateObjectNestedInput
    units?: UnitUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type RealEstateObjectUncheckedUpdateWithoutPreferencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    units?: UnitUncheckedUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type AmenitiesOnRealEstateCreateWithoutUnitInput = {
    assignedAt?: Date | string
    assignedBy: string
    amenity: AmenityCreateNestedOneWithoutRealEstateObjectsInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutAmenitiesInput
  }

  export type AmenitiesOnRealEstateUncheckedCreateWithoutUnitInput = {
    amenityId: number
    realEstateObjectId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type AmenitiesOnRealEstateCreateOrConnectWithoutUnitInput = {
    where: AmenitiesOnRealEstateWhereUniqueInput
    create: XOR<AmenitiesOnRealEstateCreateWithoutUnitInput, AmenitiesOnRealEstateUncheckedCreateWithoutUnitInput>
  }

  export type AmenitiesOnRealEstateCreateManyUnitInputEnvelope = {
    data: AmenitiesOnRealEstateCreateManyUnitInput | AmenitiesOnRealEstateCreateManyUnitInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutUnitInput = {
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDocumentsInput
    realEstateObject?: RealEstateObjectCreateNestedOneWithoutDocumentsInput
    lease?: LeaseCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutUnitInput = {
    id?: number
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    realEstateObjectId?: number | null
    leaseId?: number | null
  }

  export type DocumentCreateOrConnectWithoutUnitInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutUnitInput, DocumentUncheckedCreateWithoutUnitInput>
  }

  export type DocumentCreateManyUnitInputEnvelope = {
    data: DocumentCreateManyUnitInput | DocumentCreateManyUnitInput[]
    skipDuplicates?: boolean
  }

  export type ImageCreateWithoutUnitInput = {
    imageUrl: string
    createdAt?: Date | string
    realEstateObject?: RealEstateObjectCreateNestedOneWithoutImagesInput
    user: UserCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateWithoutUnitInput = {
    id?: number
    imageUrl: string
    createdAt?: Date | string
    realEstateObjectId?: number | null
    userId: number
  }

  export type ImageCreateOrConnectWithoutUnitInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutUnitInput, ImageUncheckedCreateWithoutUnitInput>
  }

  export type ImageCreateManyUnitInputEnvelope = {
    data: ImageCreateManyUnitInput | ImageCreateManyUnitInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceRequestCreateWithoutUnitInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    owner?: UserCreateNestedOneWithoutMaintenanceRequestsInput
    tenant?: TenantCreateNestedOneWithoutMaintenanceRequestsInput
    vendor?: VendorCreateNestedOneWithoutRequestsInput
    reporter?: TenantCreateNestedOneWithoutMaintenanceRequestInput
    expenses?: ExpenseCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestUncheckedCreateWithoutUnitInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestUncheckedCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestUncheckedCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestCreateOrConnectWithoutUnitInput = {
    where: MaintenanceRequestWhereUniqueInput
    create: XOR<MaintenanceRequestCreateWithoutUnitInput, MaintenanceRequestUncheckedCreateWithoutUnitInput>
  }

  export type MaintenanceRequestCreateManyUnitInputEnvelope = {
    data: MaintenanceRequestCreateManyUnitInput | MaintenanceRequestCreateManyUnitInput[]
    skipDuplicates?: boolean
  }

  export type RealEstateObjectCreateWithoutUnitsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    images?: ImageCreateNestedManyWithoutRealEstateObjectInput
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput
    preferences?: PreferencesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput
    documents?: DocumentCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectUncheckedCreateWithoutUnitsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    images?: ImageUncheckedCreateNestedManyWithoutRealEstateObjectInput
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput
    preferences?: PreferencesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectCreateOrConnectWithoutUnitsInput = {
    where: RealEstateObjectWhereUniqueInput
    create: XOR<RealEstateObjectCreateWithoutUnitsInput, RealEstateObjectUncheckedCreateWithoutUnitsInput>
  }

  export type TenantCreateWithoutUnitInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    user?: UserCreateNestedOneWithoutTenantInput
    leases?: LeaseCreateNestedManyWithoutTenantInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestCreateNestedManyWithoutReporterInput
  }

  export type TenantUncheckedCreateWithoutUnitInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    userId?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    leases?: LeaseUncheckedCreateNestedManyWithoutTenantInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestUncheckedCreateNestedManyWithoutReporterInput
  }

  export type TenantCreateOrConnectWithoutUnitInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutUnitInput, TenantUncheckedCreateWithoutUnitInput>
  }

  export type LeaseCreateWithoutUnitInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    documents?: DocumentCreateNestedManyWithoutLeaseInput
    tenant?: TenantCreateNestedOneWithoutLeasesInput
    expenses?: ExpenseCreateNestedManyWithoutLeaseInput
    rentPayments?: RentPaymentCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleCreateNestedManyWithoutLeaseInput
  }

  export type LeaseUncheckedCreateWithoutUnitInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    tenantId?: number | null
    documents?: DocumentUncheckedCreateNestedManyWithoutLeaseInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutLeaseInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleUncheckedCreateNestedManyWithoutLeaseInput
  }

  export type LeaseCreateOrConnectWithoutUnitInput = {
    where: LeaseWhereUniqueInput
    create: XOR<LeaseCreateWithoutUnitInput, LeaseUncheckedCreateWithoutUnitInput>
  }

  export type LeaseCreateManyUnitInputEnvelope = {
    data: LeaseCreateManyUnitInput | LeaseCreateManyUnitInput[]
    skipDuplicates?: boolean
  }

  export type ExpenseCreateWithoutUnitInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    lease?: LeaseCreateNestedOneWithoutExpensesInput
    maintenanceRequest?: MaintenanceRequestCreateNestedOneWithoutExpensesInput
  }

  export type ExpenseUncheckedCreateWithoutUnitInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    leaseId?: number | null
    maintenanceRequestId?: number | null
  }

  export type ExpenseCreateOrConnectWithoutUnitInput = {
    where: ExpenseWhereUniqueInput
    create: XOR<ExpenseCreateWithoutUnitInput, ExpenseUncheckedCreateWithoutUnitInput>
  }

  export type ExpenseCreateManyUnitInputEnvelope = {
    data: ExpenseCreateManyUnitInput | ExpenseCreateManyUnitInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutOwnedUnitsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    tenant?: TenantCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutOwnerInput
    usedCodes?: OverwriteCodeCreateNestedManyWithoutUsedByInput
  }

  export type UserUncheckedCreateWithoutOwnedUnitsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    tenant?: TenantUncheckedCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutOwnerInput
    usedCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUsedByInput
  }

  export type UserCreateOrConnectWithoutOwnedUnitsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedUnitsInput, UserUncheckedCreateWithoutOwnedUnitsInput>
  }

  export type OverwriteCodeCreateWithoutUnitsInput = {
    code: string
    expiresAt: Date | string
    used?: boolean
    usedBy?: UserCreateNestedOneWithoutUsedCodesInput
  }

  export type OverwriteCodeUncheckedCreateWithoutUnitsInput = {
    id?: number
    code: string
    expiresAt: Date | string
    used?: boolean
    usedById?: number | null
  }

  export type OverwriteCodeCreateOrConnectWithoutUnitsInput = {
    where: OverwriteCodeWhereUniqueInput
    create: XOR<OverwriteCodeCreateWithoutUnitsInput, OverwriteCodeUncheckedCreateWithoutUnitsInput>
  }

  export type AmenitiesOnRealEstateUpsertWithWhereUniqueWithoutUnitInput = {
    where: AmenitiesOnRealEstateWhereUniqueInput
    update: XOR<AmenitiesOnRealEstateUpdateWithoutUnitInput, AmenitiesOnRealEstateUncheckedUpdateWithoutUnitInput>
    create: XOR<AmenitiesOnRealEstateCreateWithoutUnitInput, AmenitiesOnRealEstateUncheckedCreateWithoutUnitInput>
  }

  export type AmenitiesOnRealEstateUpdateWithWhereUniqueWithoutUnitInput = {
    where: AmenitiesOnRealEstateWhereUniqueInput
    data: XOR<AmenitiesOnRealEstateUpdateWithoutUnitInput, AmenitiesOnRealEstateUncheckedUpdateWithoutUnitInput>
  }

  export type AmenitiesOnRealEstateUpdateManyWithWhereWithoutUnitInput = {
    where: AmenitiesOnRealEstateScalarWhereInput
    data: XOR<AmenitiesOnRealEstateUpdateManyMutationInput, AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutUnitInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutUnitInput, DocumentUncheckedUpdateWithoutUnitInput>
    create: XOR<DocumentCreateWithoutUnitInput, DocumentUncheckedCreateWithoutUnitInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutUnitInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutUnitInput, DocumentUncheckedUpdateWithoutUnitInput>
  }

  export type DocumentUpdateManyWithWhereWithoutUnitInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutUnitInput>
  }

  export type ImageUpsertWithWhereUniqueWithoutUnitInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutUnitInput, ImageUncheckedUpdateWithoutUnitInput>
    create: XOR<ImageCreateWithoutUnitInput, ImageUncheckedCreateWithoutUnitInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutUnitInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutUnitInput, ImageUncheckedUpdateWithoutUnitInput>
  }

  export type ImageUpdateManyWithWhereWithoutUnitInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutUnitInput>
  }

  export type MaintenanceRequestUpsertWithWhereUniqueWithoutUnitInput = {
    where: MaintenanceRequestWhereUniqueInput
    update: XOR<MaintenanceRequestUpdateWithoutUnitInput, MaintenanceRequestUncheckedUpdateWithoutUnitInput>
    create: XOR<MaintenanceRequestCreateWithoutUnitInput, MaintenanceRequestUncheckedCreateWithoutUnitInput>
  }

  export type MaintenanceRequestUpdateWithWhereUniqueWithoutUnitInput = {
    where: MaintenanceRequestWhereUniqueInput
    data: XOR<MaintenanceRequestUpdateWithoutUnitInput, MaintenanceRequestUncheckedUpdateWithoutUnitInput>
  }

  export type MaintenanceRequestUpdateManyWithWhereWithoutUnitInput = {
    where: MaintenanceRequestScalarWhereInput
    data: XOR<MaintenanceRequestUpdateManyMutationInput, MaintenanceRequestUncheckedUpdateManyWithoutUnitInput>
  }

  export type RealEstateObjectUpsertWithoutUnitsInput = {
    update: XOR<RealEstateObjectUpdateWithoutUnitsInput, RealEstateObjectUncheckedUpdateWithoutUnitsInput>
    create: XOR<RealEstateObjectCreateWithoutUnitsInput, RealEstateObjectUncheckedCreateWithoutUnitsInput>
    where?: RealEstateObjectWhereInput
  }

  export type RealEstateObjectUpdateToOneWithWhereWithoutUnitsInput = {
    where?: RealEstateObjectWhereInput
    data: XOR<RealEstateObjectUpdateWithoutUnitsInput, RealEstateObjectUncheckedUpdateWithoutUnitsInput>
  }

  export type RealEstateObjectUpdateWithoutUnitsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUpdateManyWithoutRealEstateObjectNestedInput
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput
    preferences?: PreferencesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput
    documents?: DocumentUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type RealEstateObjectUncheckedUpdateWithoutUnitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    preferences?: PreferencesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type TenantUpsertWithoutUnitInput = {
    update: XOR<TenantUpdateWithoutUnitInput, TenantUncheckedUpdateWithoutUnitInput>
    create: XOR<TenantCreateWithoutUnitInput, TenantUncheckedCreateWithoutUnitInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutUnitInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutUnitInput, TenantUncheckedUpdateWithoutUnitInput>
  }

  export type TenantUpdateWithoutUnitInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutTenantNestedInput
    leases?: LeaseUpdateManyWithoutTenantNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUpdateManyWithoutReporterNestedInput
  }

  export type TenantUncheckedUpdateWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    leases?: LeaseUncheckedUpdateManyWithoutTenantNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUncheckedUpdateManyWithoutReporterNestedInput
  }

  export type LeaseUpsertWithWhereUniqueWithoutUnitInput = {
    where: LeaseWhereUniqueInput
    update: XOR<LeaseUpdateWithoutUnitInput, LeaseUncheckedUpdateWithoutUnitInput>
    create: XOR<LeaseCreateWithoutUnitInput, LeaseUncheckedCreateWithoutUnitInput>
  }

  export type LeaseUpdateWithWhereUniqueWithoutUnitInput = {
    where: LeaseWhereUniqueInput
    data: XOR<LeaseUpdateWithoutUnitInput, LeaseUncheckedUpdateWithoutUnitInput>
  }

  export type LeaseUpdateManyWithWhereWithoutUnitInput = {
    where: LeaseScalarWhereInput
    data: XOR<LeaseUpdateManyMutationInput, LeaseUncheckedUpdateManyWithoutUnitInput>
  }

  export type ExpenseUpsertWithWhereUniqueWithoutUnitInput = {
    where: ExpenseWhereUniqueInput
    update: XOR<ExpenseUpdateWithoutUnitInput, ExpenseUncheckedUpdateWithoutUnitInput>
    create: XOR<ExpenseCreateWithoutUnitInput, ExpenseUncheckedCreateWithoutUnitInput>
  }

  export type ExpenseUpdateWithWhereUniqueWithoutUnitInput = {
    where: ExpenseWhereUniqueInput
    data: XOR<ExpenseUpdateWithoutUnitInput, ExpenseUncheckedUpdateWithoutUnitInput>
  }

  export type ExpenseUpdateManyWithWhereWithoutUnitInput = {
    where: ExpenseScalarWhereInput
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyWithoutUnitInput>
  }

  export type ExpenseScalarWhereInput = {
    AND?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
    OR?: ExpenseScalarWhereInput[]
    NOT?: ExpenseScalarWhereInput | ExpenseScalarWhereInput[]
    id?: IntFilter<"Expense"> | number
    createdAt?: DateTimeFilter<"Expense"> | Date | string
    updatedAt?: DateTimeFilter<"Expense"> | Date | string
    title?: StringNullableFilter<"Expense"> | string | null
    description?: StringNullableFilter<"Expense"> | string | null
    amount?: FloatNullableFilter<"Expense"> | number | null
    currency?: EnumCurrencyCodeNullableFilter<"Expense"> | $Enums.CurrencyCode | null
    date?: DateTimeNullableFilter<"Expense"> | Date | string | null
    category?: StringNullableFilter<"Expense"> | string | null
    status?: StringNullableFilter<"Expense"> | string | null
    notes?: StringNullableFilter<"Expense"> | string | null
    unitId?: IntNullableFilter<"Expense"> | number | null
    leaseId?: IntNullableFilter<"Expense"> | number | null
    maintenanceRequestId?: IntNullableFilter<"Expense"> | number | null
  }

  export type UserUpsertWithWhereUniqueWithoutOwnedUnitsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOwnedUnitsInput, UserUncheckedUpdateWithoutOwnedUnitsInput>
    create: XOR<UserCreateWithoutOwnedUnitsInput, UserUncheckedCreateWithoutOwnedUnitsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOwnedUnitsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOwnedUnitsInput, UserUncheckedUpdateWithoutOwnedUnitsInput>
  }

  export type UserUpdateManyWithWhereWithoutOwnedUnitsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutOwnedUnitsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    email?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    currencyCode?: EnumCurrencyCodeNullableFilter<"User"> | $Enums.CurrencyCode | null
    password?: StringFilter<"User"> | string
    salt?: StringFilter<"User"> | string
    plaidLinkToken?: StringNullableFilter<"User"> | string | null
    title?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    website?: StringNullableFilter<"User"> | string | null
    company?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    status?: EnumAccountStatusFilter<"User"> | $Enums.AccountStatus
    role?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
    street?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    state?: StringNullableFilter<"User"> | string | null
    zip?: StringNullableFilter<"User"> | string | null
    country?: StringNullableFilter<"User"> | string | null
  }

  export type OverwriteCodeUpsertWithWhereUniqueWithoutUnitsInput = {
    where: OverwriteCodeWhereUniqueInput
    update: XOR<OverwriteCodeUpdateWithoutUnitsInput, OverwriteCodeUncheckedUpdateWithoutUnitsInput>
    create: XOR<OverwriteCodeCreateWithoutUnitsInput, OverwriteCodeUncheckedCreateWithoutUnitsInput>
  }

  export type OverwriteCodeUpdateWithWhereUniqueWithoutUnitsInput = {
    where: OverwriteCodeWhereUniqueInput
    data: XOR<OverwriteCodeUpdateWithoutUnitsInput, OverwriteCodeUncheckedUpdateWithoutUnitsInput>
  }

  export type OverwriteCodeUpdateManyWithWhereWithoutUnitsInput = {
    where: OverwriteCodeScalarWhereInput
    data: XOR<OverwriteCodeUpdateManyMutationInput, OverwriteCodeUncheckedUpdateManyWithoutUnitsInput>
  }

  export type DocumentCreateWithoutLeaseInput = {
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDocumentsInput
    realEstateObject?: RealEstateObjectCreateNestedOneWithoutDocumentsInput
    unit?: UnitCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutLeaseInput = {
    id?: number
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    realEstateObjectId?: number | null
    unitId?: number | null
  }

  export type DocumentCreateOrConnectWithoutLeaseInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutLeaseInput, DocumentUncheckedCreateWithoutLeaseInput>
  }

  export type DocumentCreateManyLeaseInputEnvelope = {
    data: DocumentCreateManyLeaseInput | DocumentCreateManyLeaseInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutLeasesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    user?: UserCreateNestedOneWithoutTenantInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentCreateNestedManyWithoutTenantInput
    unit?: UnitCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestCreateNestedManyWithoutReporterInput
  }

  export type TenantUncheckedCreateWithoutLeasesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    userId?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutTenantInput
    unit?: UnitUncheckedCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestUncheckedCreateNestedManyWithoutReporterInput
  }

  export type TenantCreateOrConnectWithoutLeasesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutLeasesInput, TenantUncheckedCreateWithoutLeasesInput>
  }

  export type UnitCreateWithoutLeasesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutUnitInput
    documents?: DocumentCreateNestedManyWithoutUnitInput
    images?: ImageCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutUnitInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutUnitsInput
    tenant?: TenantCreateNestedOneWithoutUnitInput
    expenses?: ExpenseCreateNestedManyWithoutUnitInput
    owners?: UserCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeCreateNestedManyWithoutUnitsInput
  }

  export type UnitUncheckedCreateWithoutLeasesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
    tenantId?: number | null
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutUnitInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUnitInput
    images?: ImageUncheckedCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutUnitInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutUnitInput
    owners?: UserUncheckedCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUnitsInput
  }

  export type UnitCreateOrConnectWithoutLeasesInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutLeasesInput, UnitUncheckedCreateWithoutLeasesInput>
  }

  export type ExpenseCreateWithoutLeaseInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    unit?: UnitCreateNestedOneWithoutExpensesInput
    maintenanceRequest?: MaintenanceRequestCreateNestedOneWithoutExpensesInput
  }

  export type ExpenseUncheckedCreateWithoutLeaseInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    unitId?: number | null
    maintenanceRequestId?: number | null
  }

  export type ExpenseCreateOrConnectWithoutLeaseInput = {
    where: ExpenseWhereUniqueInput
    create: XOR<ExpenseCreateWithoutLeaseInput, ExpenseUncheckedCreateWithoutLeaseInput>
  }

  export type ExpenseCreateManyLeaseInputEnvelope = {
    data: ExpenseCreateManyLeaseInput | ExpenseCreateManyLeaseInput[]
    skipDuplicates?: boolean
  }

  export type RentPaymentCreateWithoutLeaseInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    status?: $Enums.PaymentStatus | null
    notes?: string | null
    paymentMethod?: string | null
    submittedBy: number
    submissionDate?: Date | string | null
    approvalDate?: Date | string | null
    tenant?: TenantCreateNestedOneWithoutRentPaymentsInput
  }

  export type RentPaymentUncheckedCreateWithoutLeaseInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    status?: $Enums.PaymentStatus | null
    notes?: string | null
    paymentMethod?: string | null
    submittedBy: number
    submissionDate?: Date | string | null
    approvalDate?: Date | string | null
    tenantId?: number | null
  }

  export type RentPaymentCreateOrConnectWithoutLeaseInput = {
    where: RentPaymentWhereUniqueInput
    create: XOR<RentPaymentCreateWithoutLeaseInput, RentPaymentUncheckedCreateWithoutLeaseInput>
  }

  export type RentPaymentCreateManyLeaseInputEnvelope = {
    data: RentPaymentCreateManyLeaseInput | RentPaymentCreateManyLeaseInput[]
    skipDuplicates?: boolean
  }

  export type LeasePaymentScheduleCreateWithoutLeaseInput = {
    createdAt?: Date | string
    dueDate: Date | string
    amountDue: number
    status?: $Enums.PaymentScheduleStatus
  }

  export type LeasePaymentScheduleUncheckedCreateWithoutLeaseInput = {
    createdAt?: Date | string
    id?: number
    dueDate: Date | string
    amountDue: number
    status?: $Enums.PaymentScheduleStatus
  }

  export type LeasePaymentScheduleCreateOrConnectWithoutLeaseInput = {
    where: LeasePaymentScheduleWhereUniqueInput
    create: XOR<LeasePaymentScheduleCreateWithoutLeaseInput, LeasePaymentScheduleUncheckedCreateWithoutLeaseInput>
  }

  export type LeasePaymentScheduleCreateManyLeaseInputEnvelope = {
    data: LeasePaymentScheduleCreateManyLeaseInput | LeasePaymentScheduleCreateManyLeaseInput[]
    skipDuplicates?: boolean
  }

  export type DocumentUpsertWithWhereUniqueWithoutLeaseInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutLeaseInput, DocumentUncheckedUpdateWithoutLeaseInput>
    create: XOR<DocumentCreateWithoutLeaseInput, DocumentUncheckedCreateWithoutLeaseInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutLeaseInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutLeaseInput, DocumentUncheckedUpdateWithoutLeaseInput>
  }

  export type DocumentUpdateManyWithWhereWithoutLeaseInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutLeaseInput>
  }

  export type TenantUpsertWithoutLeasesInput = {
    update: XOR<TenantUpdateWithoutLeasesInput, TenantUncheckedUpdateWithoutLeasesInput>
    create: XOR<TenantCreateWithoutLeasesInput, TenantUncheckedCreateWithoutLeasesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutLeasesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutLeasesInput, TenantUncheckedUpdateWithoutLeasesInput>
  }

  export type TenantUpdateWithoutLeasesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutTenantNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutTenantNestedInput
    unit?: UnitUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUpdateManyWithoutReporterNestedInput
  }

  export type TenantUncheckedUpdateWithoutLeasesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutTenantNestedInput
    unit?: UnitUncheckedUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUncheckedUpdateManyWithoutReporterNestedInput
  }

  export type UnitUpsertWithoutLeasesInput = {
    update: XOR<UnitUpdateWithoutLeasesInput, UnitUncheckedUpdateWithoutLeasesInput>
    create: XOR<UnitCreateWithoutLeasesInput, UnitUncheckedCreateWithoutLeasesInput>
    where?: UnitWhereInput
  }

  export type UnitUpdateToOneWithWhereWithoutLeasesInput = {
    where?: UnitWhereInput
    data: XOR<UnitUpdateWithoutLeasesInput, UnitUncheckedUpdateWithoutLeasesInput>
  }

  export type UnitUpdateWithoutLeasesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutUnitNestedInput
    documents?: DocumentUpdateManyWithoutUnitNestedInput
    images?: ImageUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutUnitNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutUnitsNestedInput
    tenant?: TenantUpdateOneWithoutUnitNestedInput
    expenses?: ExpenseUpdateManyWithoutUnitNestedInput
    owners?: UserUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateWithoutLeasesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUnitNestedInput
    images?: ImageUncheckedUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutUnitNestedInput
    owners?: UserUncheckedUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUncheckedUpdateManyWithoutUnitsNestedInput
  }

  export type ExpenseUpsertWithWhereUniqueWithoutLeaseInput = {
    where: ExpenseWhereUniqueInput
    update: XOR<ExpenseUpdateWithoutLeaseInput, ExpenseUncheckedUpdateWithoutLeaseInput>
    create: XOR<ExpenseCreateWithoutLeaseInput, ExpenseUncheckedCreateWithoutLeaseInput>
  }

  export type ExpenseUpdateWithWhereUniqueWithoutLeaseInput = {
    where: ExpenseWhereUniqueInput
    data: XOR<ExpenseUpdateWithoutLeaseInput, ExpenseUncheckedUpdateWithoutLeaseInput>
  }

  export type ExpenseUpdateManyWithWhereWithoutLeaseInput = {
    where: ExpenseScalarWhereInput
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyWithoutLeaseInput>
  }

  export type RentPaymentUpsertWithWhereUniqueWithoutLeaseInput = {
    where: RentPaymentWhereUniqueInput
    update: XOR<RentPaymentUpdateWithoutLeaseInput, RentPaymentUncheckedUpdateWithoutLeaseInput>
    create: XOR<RentPaymentCreateWithoutLeaseInput, RentPaymentUncheckedCreateWithoutLeaseInput>
  }

  export type RentPaymentUpdateWithWhereUniqueWithoutLeaseInput = {
    where: RentPaymentWhereUniqueInput
    data: XOR<RentPaymentUpdateWithoutLeaseInput, RentPaymentUncheckedUpdateWithoutLeaseInput>
  }

  export type RentPaymentUpdateManyWithWhereWithoutLeaseInput = {
    where: RentPaymentScalarWhereInput
    data: XOR<RentPaymentUpdateManyMutationInput, RentPaymentUncheckedUpdateManyWithoutLeaseInput>
  }

  export type LeasePaymentScheduleUpsertWithWhereUniqueWithoutLeaseInput = {
    where: LeasePaymentScheduleWhereUniqueInput
    update: XOR<LeasePaymentScheduleUpdateWithoutLeaseInput, LeasePaymentScheduleUncheckedUpdateWithoutLeaseInput>
    create: XOR<LeasePaymentScheduleCreateWithoutLeaseInput, LeasePaymentScheduleUncheckedCreateWithoutLeaseInput>
  }

  export type LeasePaymentScheduleUpdateWithWhereUniqueWithoutLeaseInput = {
    where: LeasePaymentScheduleWhereUniqueInput
    data: XOR<LeasePaymentScheduleUpdateWithoutLeaseInput, LeasePaymentScheduleUncheckedUpdateWithoutLeaseInput>
  }

  export type LeasePaymentScheduleUpdateManyWithWhereWithoutLeaseInput = {
    where: LeasePaymentScheduleScalarWhereInput
    data: XOR<LeasePaymentScheduleUpdateManyMutationInput, LeasePaymentScheduleUncheckedUpdateManyWithoutLeaseInput>
  }

  export type LeasePaymentScheduleScalarWhereInput = {
    AND?: LeasePaymentScheduleScalarWhereInput | LeasePaymentScheduleScalarWhereInput[]
    OR?: LeasePaymentScheduleScalarWhereInput[]
    NOT?: LeasePaymentScheduleScalarWhereInput | LeasePaymentScheduleScalarWhereInput[]
    createdAt?: DateTimeFilter<"LeasePaymentSchedule"> | Date | string
    id?: IntFilter<"LeasePaymentSchedule"> | number
    dueDate?: DateTimeFilter<"LeasePaymentSchedule"> | Date | string
    amountDue?: FloatFilter<"LeasePaymentSchedule"> | number
    status?: EnumPaymentScheduleStatusFilter<"LeasePaymentSchedule"> | $Enums.PaymentScheduleStatus
    leaseId?: IntFilter<"LeasePaymentSchedule"> | number
  }

  export type LeaseCreateWithoutPaymentScheduleInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    documents?: DocumentCreateNestedManyWithoutLeaseInput
    tenant?: TenantCreateNestedOneWithoutLeasesInput
    unit?: UnitCreateNestedOneWithoutLeasesInput
    expenses?: ExpenseCreateNestedManyWithoutLeaseInput
    rentPayments?: RentPaymentCreateNestedManyWithoutLeaseInput
  }

  export type LeaseUncheckedCreateWithoutPaymentScheduleInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    tenantId?: number | null
    unitId?: number | null
    documents?: DocumentUncheckedCreateNestedManyWithoutLeaseInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutLeaseInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutLeaseInput
  }

  export type LeaseCreateOrConnectWithoutPaymentScheduleInput = {
    where: LeaseWhereUniqueInput
    create: XOR<LeaseCreateWithoutPaymentScheduleInput, LeaseUncheckedCreateWithoutPaymentScheduleInput>
  }

  export type LeaseUpsertWithoutPaymentScheduleInput = {
    update: XOR<LeaseUpdateWithoutPaymentScheduleInput, LeaseUncheckedUpdateWithoutPaymentScheduleInput>
    create: XOR<LeaseCreateWithoutPaymentScheduleInput, LeaseUncheckedCreateWithoutPaymentScheduleInput>
    where?: LeaseWhereInput
  }

  export type LeaseUpdateToOneWithWhereWithoutPaymentScheduleInput = {
    where?: LeaseWhereInput
    data: XOR<LeaseUpdateWithoutPaymentScheduleInput, LeaseUncheckedUpdateWithoutPaymentScheduleInput>
  }

  export type LeaseUpdateWithoutPaymentScheduleInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    documents?: DocumentUpdateManyWithoutLeaseNestedInput
    tenant?: TenantUpdateOneWithoutLeasesNestedInput
    unit?: UnitUpdateOneWithoutLeasesNestedInput
    expenses?: ExpenseUpdateManyWithoutLeaseNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutLeaseNestedInput
  }

  export type LeaseUncheckedUpdateWithoutPaymentScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    documents?: DocumentUncheckedUpdateManyWithoutLeaseNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutLeaseNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutLeaseNestedInput
  }

  export type RealEstateObjectCreateWithoutImagesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput
    preferences?: PreferencesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput
    documents?: DocumentCreateNestedManyWithoutRealEstateObjectInput
    units?: UnitCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectUncheckedCreateWithoutImagesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput
    preferences?: PreferencesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput
    documents?: DocumentUncheckedCreateNestedManyWithoutRealEstateObjectInput
    units?: UnitUncheckedCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectCreateOrConnectWithoutImagesInput = {
    where: RealEstateObjectWhereUniqueInput
    create: XOR<RealEstateObjectCreateWithoutImagesInput, RealEstateObjectUncheckedCreateWithoutImagesInput>
  }

  export type UnitCreateWithoutImagesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutUnitInput
    documents?: DocumentCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutUnitInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutUnitsInput
    tenant?: TenantCreateNestedOneWithoutUnitInput
    leases?: LeaseCreateNestedManyWithoutUnitInput
    expenses?: ExpenseCreateNestedManyWithoutUnitInput
    owners?: UserCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeCreateNestedManyWithoutUnitsInput
  }

  export type UnitUncheckedCreateWithoutImagesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
    tenantId?: number | null
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutUnitInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutUnitInput
    leases?: LeaseUncheckedCreateNestedManyWithoutUnitInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutUnitInput
    owners?: UserUncheckedCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUnitsInput
  }

  export type UnitCreateOrConnectWithoutImagesInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutImagesInput, UnitUncheckedCreateWithoutImagesInput>
  }

  export type UserCreateWithoutImagesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    tenant?: TenantCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeCreateNestedManyWithoutUsedByInput
  }

  export type UserUncheckedCreateWithoutImagesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    tenant?: TenantUncheckedCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitUncheckedCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUsedByInput
  }

  export type UserCreateOrConnectWithoutImagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutImagesInput, UserUncheckedCreateWithoutImagesInput>
  }

  export type RealEstateObjectUpsertWithoutImagesInput = {
    update: XOR<RealEstateObjectUpdateWithoutImagesInput, RealEstateObjectUncheckedUpdateWithoutImagesInput>
    create: XOR<RealEstateObjectCreateWithoutImagesInput, RealEstateObjectUncheckedCreateWithoutImagesInput>
    where?: RealEstateObjectWhereInput
  }

  export type RealEstateObjectUpdateToOneWithWhereWithoutImagesInput = {
    where?: RealEstateObjectWhereInput
    data: XOR<RealEstateObjectUpdateWithoutImagesInput, RealEstateObjectUncheckedUpdateWithoutImagesInput>
  }

  export type RealEstateObjectUpdateWithoutImagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput
    preferences?: PreferencesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput
    documents?: DocumentUpdateManyWithoutRealEstateObjectNestedInput
    units?: UnitUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type RealEstateObjectUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    preferences?: PreferencesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    units?: UnitUncheckedUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type UnitUpsertWithoutImagesInput = {
    update: XOR<UnitUpdateWithoutImagesInput, UnitUncheckedUpdateWithoutImagesInput>
    create: XOR<UnitCreateWithoutImagesInput, UnitUncheckedCreateWithoutImagesInput>
    where?: UnitWhereInput
  }

  export type UnitUpdateToOneWithWhereWithoutImagesInput = {
    where?: UnitWhereInput
    data: XOR<UnitUpdateWithoutImagesInput, UnitUncheckedUpdateWithoutImagesInput>
  }

  export type UnitUpdateWithoutImagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutUnitNestedInput
    documents?: DocumentUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutUnitNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutUnitsNestedInput
    tenant?: TenantUpdateOneWithoutUnitNestedInput
    leases?: LeaseUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUpdateManyWithoutUnitNestedInput
    owners?: UserUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutUnitNestedInput
    leases?: LeaseUncheckedUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutUnitNestedInput
    owners?: UserUncheckedUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUncheckedUpdateManyWithoutUnitsNestedInput
  }

  export type UserUpsertWithoutImagesInput = {
    update: XOR<UserUpdateWithoutImagesInput, UserUncheckedUpdateWithoutImagesInput>
    create: XOR<UserCreateWithoutImagesInput, UserUncheckedCreateWithoutImagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutImagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutImagesInput, UserUncheckedUpdateWithoutImagesInput>
  }

  export type UserUpdateWithoutImagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUpdateManyWithoutUsedByNestedInput
  }

  export type UserUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUncheckedUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUncheckedUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUncheckedUpdateManyWithoutUsedByNestedInput
  }

  export type UserCreateWithoutDocumentsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    tenant?: TenantCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeCreateNestedManyWithoutUsedByInput
  }

  export type UserUncheckedCreateWithoutDocumentsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    tenant?: TenantUncheckedCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitUncheckedCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUsedByInput
  }

  export type UserCreateOrConnectWithoutDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
  }

  export type RealEstateObjectCreateWithoutDocumentsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    images?: ImageCreateNestedManyWithoutRealEstateObjectInput
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput
    preferences?: PreferencesOnRealEstateCreateNestedManyWithoutRealEstateObjectInput
    units?: UnitCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectUncheckedCreateWithoutDocumentsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    lotSize?: number | null
    yearBuilt?: number | null
    realEstateType?: $Enums.RealEstateType | null
    marketPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    images?: ImageUncheckedCreateNestedManyWithoutRealEstateObjectInput
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput
    preferences?: PreferencesOnRealEstateUncheckedCreateNestedManyWithoutRealEstateObjectInput
    units?: UnitUncheckedCreateNestedManyWithoutRealEstateObjectInput
  }

  export type RealEstateObjectCreateOrConnectWithoutDocumentsInput = {
    where: RealEstateObjectWhereUniqueInput
    create: XOR<RealEstateObjectCreateWithoutDocumentsInput, RealEstateObjectUncheckedCreateWithoutDocumentsInput>
  }

  export type LeaseCreateWithoutDocumentsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    tenant?: TenantCreateNestedOneWithoutLeasesInput
    unit?: UnitCreateNestedOneWithoutLeasesInput
    expenses?: ExpenseCreateNestedManyWithoutLeaseInput
    rentPayments?: RentPaymentCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleCreateNestedManyWithoutLeaseInput
  }

  export type LeaseUncheckedCreateWithoutDocumentsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    tenantId?: number | null
    unitId?: number | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutLeaseInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleUncheckedCreateNestedManyWithoutLeaseInput
  }

  export type LeaseCreateOrConnectWithoutDocumentsInput = {
    where: LeaseWhereUniqueInput
    create: XOR<LeaseCreateWithoutDocumentsInput, LeaseUncheckedCreateWithoutDocumentsInput>
  }

  export type UnitCreateWithoutDocumentsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutUnitInput
    images?: ImageCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutUnitInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutUnitsInput
    tenant?: TenantCreateNestedOneWithoutUnitInput
    leases?: LeaseCreateNestedManyWithoutUnitInput
    expenses?: ExpenseCreateNestedManyWithoutUnitInput
    owners?: UserCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeCreateNestedManyWithoutUnitsInput
  }

  export type UnitUncheckedCreateWithoutDocumentsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
    tenantId?: number | null
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutUnitInput
    images?: ImageUncheckedCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutUnitInput
    leases?: LeaseUncheckedCreateNestedManyWithoutUnitInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutUnitInput
    owners?: UserUncheckedCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUnitsInput
  }

  export type UnitCreateOrConnectWithoutDocumentsInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutDocumentsInput, UnitUncheckedCreateWithoutDocumentsInput>
  }

  export type UserUpsertWithoutDocumentsInput = {
    update: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateWithoutDocumentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUpdateManyWithoutUsedByNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUncheckedUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUncheckedUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUncheckedUpdateManyWithoutUsedByNestedInput
  }

  export type RealEstateObjectUpsertWithoutDocumentsInput = {
    update: XOR<RealEstateObjectUpdateWithoutDocumentsInput, RealEstateObjectUncheckedUpdateWithoutDocumentsInput>
    create: XOR<RealEstateObjectCreateWithoutDocumentsInput, RealEstateObjectUncheckedCreateWithoutDocumentsInput>
    where?: RealEstateObjectWhereInput
  }

  export type RealEstateObjectUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: RealEstateObjectWhereInput
    data: XOR<RealEstateObjectUpdateWithoutDocumentsInput, RealEstateObjectUncheckedUpdateWithoutDocumentsInput>
  }

  export type RealEstateObjectUpdateWithoutDocumentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUpdateManyWithoutRealEstateObjectNestedInput
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput
    preferences?: PreferencesOnRealEstateUpdateManyWithoutRealEstateObjectNestedInput
    units?: UnitUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type RealEstateObjectUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    lotSize?: NullableFloatFieldUpdateOperationsInput | number | null
    yearBuilt?: NullableIntFieldUpdateOperationsInput | number | null
    realEstateType?: NullableEnumRealEstateTypeFieldUpdateOperationsInput | $Enums.RealEstateType | null
    marketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    preferences?: PreferencesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectNestedInput
    units?: UnitUncheckedUpdateManyWithoutRealEstateObjectNestedInput
  }

  export type LeaseUpsertWithoutDocumentsInput = {
    update: XOR<LeaseUpdateWithoutDocumentsInput, LeaseUncheckedUpdateWithoutDocumentsInput>
    create: XOR<LeaseCreateWithoutDocumentsInput, LeaseUncheckedCreateWithoutDocumentsInput>
    where?: LeaseWhereInput
  }

  export type LeaseUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: LeaseWhereInput
    data: XOR<LeaseUpdateWithoutDocumentsInput, LeaseUncheckedUpdateWithoutDocumentsInput>
  }

  export type LeaseUpdateWithoutDocumentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    tenant?: TenantUpdateOneWithoutLeasesNestedInput
    unit?: UnitUpdateOneWithoutLeasesNestedInput
    expenses?: ExpenseUpdateManyWithoutLeaseNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUpdateManyWithoutLeaseNestedInput
  }

  export type LeaseUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: ExpenseUncheckedUpdateManyWithoutLeaseNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUncheckedUpdateManyWithoutLeaseNestedInput
  }

  export type UnitUpsertWithoutDocumentsInput = {
    update: XOR<UnitUpdateWithoutDocumentsInput, UnitUncheckedUpdateWithoutDocumentsInput>
    create: XOR<UnitCreateWithoutDocumentsInput, UnitUncheckedCreateWithoutDocumentsInput>
    where?: UnitWhereInput
  }

  export type UnitUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: UnitWhereInput
    data: XOR<UnitUpdateWithoutDocumentsInput, UnitUncheckedUpdateWithoutDocumentsInput>
  }

  export type UnitUpdateWithoutDocumentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutUnitNestedInput
    images?: ImageUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutUnitNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutUnitsNestedInput
    tenant?: TenantUpdateOneWithoutUnitNestedInput
    leases?: LeaseUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUpdateManyWithoutUnitNestedInput
    owners?: UserUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitNestedInput
    images?: ImageUncheckedUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutUnitNestedInput
    leases?: LeaseUncheckedUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutUnitNestedInput
    owners?: UserUncheckedUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUncheckedUpdateManyWithoutUnitsNestedInput
  }

  export type UserCreateWithoutSentMessagesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    tenant?: TenantCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeCreateNestedManyWithoutUsedByInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    tenant?: TenantUncheckedCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitUncheckedCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUsedByInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type UserCreateWithoutReceivedMessagesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    tenant?: TenantCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeCreateNestedManyWithoutUsedByInput
  }

  export type UserUncheckedCreateWithoutReceivedMessagesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    tenant?: TenantUncheckedCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitUncheckedCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUsedByInput
  }

  export type UserCreateOrConnectWithoutReceivedMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUpdateManyWithoutUsedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUncheckedUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUncheckedUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUncheckedUpdateManyWithoutUsedByNestedInput
  }

  export type UserUpsertWithoutReceivedMessagesInput = {
    update: XOR<UserUpdateWithoutReceivedMessagesInput, UserUncheckedUpdateWithoutReceivedMessagesInput>
    create: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedMessagesInput, UserUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type UserUpdateWithoutReceivedMessagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    tenant?: TenantUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUpdateManyWithoutUsedByNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    tenant?: TenantUncheckedUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUncheckedUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUncheckedUpdateManyWithoutUsedByNestedInput
  }

  export type UserCreateWithoutMaintenanceRequestsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    tenant?: TenantCreateNestedOneWithoutUserInput
    ownedUnits?: UnitCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeCreateNestedManyWithoutUsedByInput
  }

  export type UserUncheckedCreateWithoutMaintenanceRequestsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    tenant?: TenantUncheckedCreateNestedOneWithoutUserInput
    ownedUnits?: UnitUncheckedCreateNestedManyWithoutOwnersInput
    usedCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUsedByInput
  }

  export type UserCreateOrConnectWithoutMaintenanceRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMaintenanceRequestsInput, UserUncheckedCreateWithoutMaintenanceRequestsInput>
  }

  export type TenantCreateWithoutMaintenanceRequestsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    user?: UserCreateNestedOneWithoutTenantInput
    leases?: LeaseCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentCreateNestedManyWithoutTenantInput
    unit?: UnitCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestCreateNestedManyWithoutReporterInput
  }

  export type TenantUncheckedCreateWithoutMaintenanceRequestsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    userId?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    leases?: LeaseUncheckedCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutTenantInput
    unit?: UnitUncheckedCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestUncheckedCreateNestedManyWithoutReporterInput
  }

  export type TenantCreateOrConnectWithoutMaintenanceRequestsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutMaintenanceRequestsInput, TenantUncheckedCreateWithoutMaintenanceRequestsInput>
  }

  export type VendorCreateWithoutRequestsInput = {
    name: string
    email: string
    phone: string
    createdAt?: Date | string
  }

  export type VendorUncheckedCreateWithoutRequestsInput = {
    id?: number
    name: string
    email: string
    phone: string
    createdAt?: Date | string
  }

  export type VendorCreateOrConnectWithoutRequestsInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutRequestsInput, VendorUncheckedCreateWithoutRequestsInput>
  }

  export type TenantCreateWithoutMaintenanceRequestInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    user?: UserCreateNestedOneWithoutTenantInput
    leases?: LeaseCreateNestedManyWithoutTenantInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentCreateNestedManyWithoutTenantInput
    unit?: UnitCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutMaintenanceRequestInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    userId?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    leases?: LeaseUncheckedCreateNestedManyWithoutTenantInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutTenantInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutTenantInput
    unit?: UnitUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutMaintenanceRequestInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutMaintenanceRequestInput, TenantUncheckedCreateWithoutMaintenanceRequestInput>
  }

  export type UnitCreateWithoutMaintenanceRequestsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutUnitInput
    documents?: DocumentCreateNestedManyWithoutUnitInput
    images?: ImageCreateNestedManyWithoutUnitInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutUnitsInput
    tenant?: TenantCreateNestedOneWithoutUnitInput
    leases?: LeaseCreateNestedManyWithoutUnitInput
    expenses?: ExpenseCreateNestedManyWithoutUnitInput
    owners?: UserCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeCreateNestedManyWithoutUnitsInput
  }

  export type UnitUncheckedCreateWithoutMaintenanceRequestsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
    tenantId?: number | null
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutUnitInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUnitInput
    images?: ImageUncheckedCreateNestedManyWithoutUnitInput
    leases?: LeaseUncheckedCreateNestedManyWithoutUnitInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutUnitInput
    owners?: UserUncheckedCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUnitsInput
  }

  export type UnitCreateOrConnectWithoutMaintenanceRequestsInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutMaintenanceRequestsInput, UnitUncheckedCreateWithoutMaintenanceRequestsInput>
  }

  export type ExpenseCreateWithoutMaintenanceRequestInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    unit?: UnitCreateNestedOneWithoutExpensesInput
    lease?: LeaseCreateNestedOneWithoutExpensesInput
  }

  export type ExpenseUncheckedCreateWithoutMaintenanceRequestInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    unitId?: number | null
    leaseId?: number | null
  }

  export type ExpenseCreateOrConnectWithoutMaintenanceRequestInput = {
    where: ExpenseWhereUniqueInput
    create: XOR<ExpenseCreateWithoutMaintenanceRequestInput, ExpenseUncheckedCreateWithoutMaintenanceRequestInput>
  }

  export type ExpenseCreateManyMaintenanceRequestInputEnvelope = {
    data: ExpenseCreateManyMaintenanceRequestInput | ExpenseCreateManyMaintenanceRequestInput[]
    skipDuplicates?: boolean
  }

  export type LinkedRequestCreateWithoutRequestAInput = {
    requestB: MaintenanceRequestCreateNestedOneWithoutLinkedAsBInput
  }

  export type LinkedRequestUncheckedCreateWithoutRequestAInput = {
    requestBId: number
  }

  export type LinkedRequestCreateOrConnectWithoutRequestAInput = {
    where: LinkedRequestWhereUniqueInput
    create: XOR<LinkedRequestCreateWithoutRequestAInput, LinkedRequestUncheckedCreateWithoutRequestAInput>
  }

  export type LinkedRequestCreateManyRequestAInputEnvelope = {
    data: LinkedRequestCreateManyRequestAInput | LinkedRequestCreateManyRequestAInput[]
    skipDuplicates?: boolean
  }

  export type LinkedRequestCreateWithoutRequestBInput = {
    requestA: MaintenanceRequestCreateNestedOneWithoutLinkedAsAInput
  }

  export type LinkedRequestUncheckedCreateWithoutRequestBInput = {
    requestAId: number
  }

  export type LinkedRequestCreateOrConnectWithoutRequestBInput = {
    where: LinkedRequestWhereUniqueInput
    create: XOR<LinkedRequestCreateWithoutRequestBInput, LinkedRequestUncheckedCreateWithoutRequestBInput>
  }

  export type LinkedRequestCreateManyRequestBInputEnvelope = {
    data: LinkedRequestCreateManyRequestBInput | LinkedRequestCreateManyRequestBInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMaintenanceRequestsInput = {
    update: XOR<UserUpdateWithoutMaintenanceRequestsInput, UserUncheckedUpdateWithoutMaintenanceRequestsInput>
    create: XOR<UserCreateWithoutMaintenanceRequestsInput, UserUncheckedCreateWithoutMaintenanceRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMaintenanceRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMaintenanceRequestsInput, UserUncheckedUpdateWithoutMaintenanceRequestsInput>
  }

  export type UserUpdateWithoutMaintenanceRequestsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUpdateOneWithoutUserNestedInput
    ownedUnits?: UnitUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUpdateManyWithoutUsedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMaintenanceRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUncheckedUpdateOneWithoutUserNestedInput
    ownedUnits?: UnitUncheckedUpdateManyWithoutOwnersNestedInput
    usedCodes?: OverwriteCodeUncheckedUpdateManyWithoutUsedByNestedInput
  }

  export type TenantUpsertWithoutMaintenanceRequestsInput = {
    update: XOR<TenantUpdateWithoutMaintenanceRequestsInput, TenantUncheckedUpdateWithoutMaintenanceRequestsInput>
    create: XOR<TenantCreateWithoutMaintenanceRequestsInput, TenantUncheckedCreateWithoutMaintenanceRequestsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutMaintenanceRequestsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutMaintenanceRequestsInput, TenantUncheckedUpdateWithoutMaintenanceRequestsInput>
  }

  export type TenantUpdateWithoutMaintenanceRequestsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutTenantNestedInput
    leases?: LeaseUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutTenantNestedInput
    unit?: UnitUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUpdateManyWithoutReporterNestedInput
  }

  export type TenantUncheckedUpdateWithoutMaintenanceRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    leases?: LeaseUncheckedUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutTenantNestedInput
    unit?: UnitUncheckedUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUncheckedUpdateManyWithoutReporterNestedInput
  }

  export type VendorUpsertWithoutRequestsInput = {
    update: XOR<VendorUpdateWithoutRequestsInput, VendorUncheckedUpdateWithoutRequestsInput>
    create: XOR<VendorCreateWithoutRequestsInput, VendorUncheckedCreateWithoutRequestsInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutRequestsInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutRequestsInput, VendorUncheckedUpdateWithoutRequestsInput>
  }

  export type VendorUpdateWithoutRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateWithoutRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUpsertWithoutMaintenanceRequestInput = {
    update: XOR<TenantUpdateWithoutMaintenanceRequestInput, TenantUncheckedUpdateWithoutMaintenanceRequestInput>
    create: XOR<TenantCreateWithoutMaintenanceRequestInput, TenantUncheckedCreateWithoutMaintenanceRequestInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutMaintenanceRequestInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutMaintenanceRequestInput, TenantUncheckedUpdateWithoutMaintenanceRequestInput>
  }

  export type TenantUpdateWithoutMaintenanceRequestInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutTenantNestedInput
    leases?: LeaseUpdateManyWithoutTenantNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutTenantNestedInput
    unit?: UnitUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutMaintenanceRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    leases?: LeaseUncheckedUpdateManyWithoutTenantNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutTenantNestedInput
    unit?: UnitUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UnitUpsertWithoutMaintenanceRequestsInput = {
    update: XOR<UnitUpdateWithoutMaintenanceRequestsInput, UnitUncheckedUpdateWithoutMaintenanceRequestsInput>
    create: XOR<UnitCreateWithoutMaintenanceRequestsInput, UnitUncheckedCreateWithoutMaintenanceRequestsInput>
    where?: UnitWhereInput
  }

  export type UnitUpdateToOneWithWhereWithoutMaintenanceRequestsInput = {
    where?: UnitWhereInput
    data: XOR<UnitUpdateWithoutMaintenanceRequestsInput, UnitUncheckedUpdateWithoutMaintenanceRequestsInput>
  }

  export type UnitUpdateWithoutMaintenanceRequestsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutUnitNestedInput
    documents?: DocumentUpdateManyWithoutUnitNestedInput
    images?: ImageUpdateManyWithoutUnitNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutUnitsNestedInput
    tenant?: TenantUpdateOneWithoutUnitNestedInput
    leases?: LeaseUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUpdateManyWithoutUnitNestedInput
    owners?: UserUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateWithoutMaintenanceRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUnitNestedInput
    images?: ImageUncheckedUpdateManyWithoutUnitNestedInput
    leases?: LeaseUncheckedUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutUnitNestedInput
    owners?: UserUncheckedUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUncheckedUpdateManyWithoutUnitsNestedInput
  }

  export type ExpenseUpsertWithWhereUniqueWithoutMaintenanceRequestInput = {
    where: ExpenseWhereUniqueInput
    update: XOR<ExpenseUpdateWithoutMaintenanceRequestInput, ExpenseUncheckedUpdateWithoutMaintenanceRequestInput>
    create: XOR<ExpenseCreateWithoutMaintenanceRequestInput, ExpenseUncheckedCreateWithoutMaintenanceRequestInput>
  }

  export type ExpenseUpdateWithWhereUniqueWithoutMaintenanceRequestInput = {
    where: ExpenseWhereUniqueInput
    data: XOR<ExpenseUpdateWithoutMaintenanceRequestInput, ExpenseUncheckedUpdateWithoutMaintenanceRequestInput>
  }

  export type ExpenseUpdateManyWithWhereWithoutMaintenanceRequestInput = {
    where: ExpenseScalarWhereInput
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyWithoutMaintenanceRequestInput>
  }

  export type LinkedRequestUpsertWithWhereUniqueWithoutRequestAInput = {
    where: LinkedRequestWhereUniqueInput
    update: XOR<LinkedRequestUpdateWithoutRequestAInput, LinkedRequestUncheckedUpdateWithoutRequestAInput>
    create: XOR<LinkedRequestCreateWithoutRequestAInput, LinkedRequestUncheckedCreateWithoutRequestAInput>
  }

  export type LinkedRequestUpdateWithWhereUniqueWithoutRequestAInput = {
    where: LinkedRequestWhereUniqueInput
    data: XOR<LinkedRequestUpdateWithoutRequestAInput, LinkedRequestUncheckedUpdateWithoutRequestAInput>
  }

  export type LinkedRequestUpdateManyWithWhereWithoutRequestAInput = {
    where: LinkedRequestScalarWhereInput
    data: XOR<LinkedRequestUpdateManyMutationInput, LinkedRequestUncheckedUpdateManyWithoutRequestAInput>
  }

  export type LinkedRequestScalarWhereInput = {
    AND?: LinkedRequestScalarWhereInput | LinkedRequestScalarWhereInput[]
    OR?: LinkedRequestScalarWhereInput[]
    NOT?: LinkedRequestScalarWhereInput | LinkedRequestScalarWhereInput[]
    requestAId?: IntFilter<"LinkedRequest"> | number
    requestBId?: IntFilter<"LinkedRequest"> | number
  }

  export type LinkedRequestUpsertWithWhereUniqueWithoutRequestBInput = {
    where: LinkedRequestWhereUniqueInput
    update: XOR<LinkedRequestUpdateWithoutRequestBInput, LinkedRequestUncheckedUpdateWithoutRequestBInput>
    create: XOR<LinkedRequestCreateWithoutRequestBInput, LinkedRequestUncheckedCreateWithoutRequestBInput>
  }

  export type LinkedRequestUpdateWithWhereUniqueWithoutRequestBInput = {
    where: LinkedRequestWhereUniqueInput
    data: XOR<LinkedRequestUpdateWithoutRequestBInput, LinkedRequestUncheckedUpdateWithoutRequestBInput>
  }

  export type LinkedRequestUpdateManyWithWhereWithoutRequestBInput = {
    where: LinkedRequestScalarWhereInput
    data: XOR<LinkedRequestUpdateManyMutationInput, LinkedRequestUncheckedUpdateManyWithoutRequestBInput>
  }

  export type UnitCreateWithoutExpensesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutUnitInput
    documents?: DocumentCreateNestedManyWithoutUnitInput
    images?: ImageCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutUnitInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutUnitsInput
    tenant?: TenantCreateNestedOneWithoutUnitInput
    leases?: LeaseCreateNestedManyWithoutUnitInput
    owners?: UserCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeCreateNestedManyWithoutUnitsInput
  }

  export type UnitUncheckedCreateWithoutExpensesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
    tenantId?: number | null
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutUnitInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUnitInput
    images?: ImageUncheckedCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutUnitInput
    leases?: LeaseUncheckedCreateNestedManyWithoutUnitInput
    owners?: UserUncheckedCreateNestedManyWithoutOwnedUnitsInput
    overwriteCodes?: OverwriteCodeUncheckedCreateNestedManyWithoutUnitsInput
  }

  export type UnitCreateOrConnectWithoutExpensesInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutExpensesInput, UnitUncheckedCreateWithoutExpensesInput>
  }

  export type LeaseCreateWithoutExpensesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    documents?: DocumentCreateNestedManyWithoutLeaseInput
    tenant?: TenantCreateNestedOneWithoutLeasesInput
    unit?: UnitCreateNestedOneWithoutLeasesInput
    rentPayments?: RentPaymentCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleCreateNestedManyWithoutLeaseInput
  }

  export type LeaseUncheckedCreateWithoutExpensesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    tenantId?: number | null
    unitId?: number | null
    documents?: DocumentUncheckedCreateNestedManyWithoutLeaseInput
    rentPayments?: RentPaymentUncheckedCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleUncheckedCreateNestedManyWithoutLeaseInput
  }

  export type LeaseCreateOrConnectWithoutExpensesInput = {
    where: LeaseWhereUniqueInput
    create: XOR<LeaseCreateWithoutExpensesInput, LeaseUncheckedCreateWithoutExpensesInput>
  }

  export type MaintenanceRequestCreateWithoutExpensesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    owner?: UserCreateNestedOneWithoutMaintenanceRequestsInput
    tenant?: TenantCreateNestedOneWithoutMaintenanceRequestsInput
    vendor?: VendorCreateNestedOneWithoutRequestsInput
    reporter?: TenantCreateNestedOneWithoutMaintenanceRequestInput
    unit?: UnitCreateNestedOneWithoutMaintenanceRequestsInput
    linkedAsA?: LinkedRequestCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestUncheckedCreateWithoutExpensesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    unitId?: number | null
    linkedAsA?: LinkedRequestUncheckedCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestUncheckedCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestCreateOrConnectWithoutExpensesInput = {
    where: MaintenanceRequestWhereUniqueInput
    create: XOR<MaintenanceRequestCreateWithoutExpensesInput, MaintenanceRequestUncheckedCreateWithoutExpensesInput>
  }

  export type UnitUpsertWithoutExpensesInput = {
    update: XOR<UnitUpdateWithoutExpensesInput, UnitUncheckedUpdateWithoutExpensesInput>
    create: XOR<UnitCreateWithoutExpensesInput, UnitUncheckedCreateWithoutExpensesInput>
    where?: UnitWhereInput
  }

  export type UnitUpdateToOneWithWhereWithoutExpensesInput = {
    where?: UnitWhereInput
    data: XOR<UnitUpdateWithoutExpensesInput, UnitUncheckedUpdateWithoutExpensesInput>
  }

  export type UnitUpdateWithoutExpensesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutUnitNestedInput
    documents?: DocumentUpdateManyWithoutUnitNestedInput
    images?: ImageUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutUnitNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutUnitsNestedInput
    tenant?: TenantUpdateOneWithoutUnitNestedInput
    leases?: LeaseUpdateManyWithoutUnitNestedInput
    owners?: UserUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateWithoutExpensesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUnitNestedInput
    images?: ImageUncheckedUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutUnitNestedInput
    leases?: LeaseUncheckedUpdateManyWithoutUnitNestedInput
    owners?: UserUncheckedUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUncheckedUpdateManyWithoutUnitsNestedInput
  }

  export type LeaseUpsertWithoutExpensesInput = {
    update: XOR<LeaseUpdateWithoutExpensesInput, LeaseUncheckedUpdateWithoutExpensesInput>
    create: XOR<LeaseCreateWithoutExpensesInput, LeaseUncheckedCreateWithoutExpensesInput>
    where?: LeaseWhereInput
  }

  export type LeaseUpdateToOneWithWhereWithoutExpensesInput = {
    where?: LeaseWhereInput
    data: XOR<LeaseUpdateWithoutExpensesInput, LeaseUncheckedUpdateWithoutExpensesInput>
  }

  export type LeaseUpdateWithoutExpensesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    documents?: DocumentUpdateManyWithoutLeaseNestedInput
    tenant?: TenantUpdateOneWithoutLeasesNestedInput
    unit?: UnitUpdateOneWithoutLeasesNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUpdateManyWithoutLeaseNestedInput
  }

  export type LeaseUncheckedUpdateWithoutExpensesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    documents?: DocumentUncheckedUpdateManyWithoutLeaseNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUncheckedUpdateManyWithoutLeaseNestedInput
  }

  export type MaintenanceRequestUpsertWithoutExpensesInput = {
    update: XOR<MaintenanceRequestUpdateWithoutExpensesInput, MaintenanceRequestUncheckedUpdateWithoutExpensesInput>
    create: XOR<MaintenanceRequestCreateWithoutExpensesInput, MaintenanceRequestUncheckedCreateWithoutExpensesInput>
    where?: MaintenanceRequestWhereInput
  }

  export type MaintenanceRequestUpdateToOneWithWhereWithoutExpensesInput = {
    where?: MaintenanceRequestWhereInput
    data: XOR<MaintenanceRequestUpdateWithoutExpensesInput, MaintenanceRequestUncheckedUpdateWithoutExpensesInput>
  }

  export type MaintenanceRequestUpdateWithoutExpensesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneWithoutMaintenanceRequestsNestedInput
    tenant?: TenantUpdateOneWithoutMaintenanceRequestsNestedInput
    vendor?: VendorUpdateOneWithoutRequestsNestedInput
    reporter?: TenantUpdateOneWithoutMaintenanceRequestNestedInput
    unit?: UnitUpdateOneWithoutMaintenanceRequestsNestedInput
    linkedAsA?: LinkedRequestUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateWithoutExpensesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    linkedAsA?: LinkedRequestUncheckedUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUncheckedUpdateManyWithoutRequestBNestedInput
  }

  export type LeaseCreateWithoutRentPaymentsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    documents?: DocumentCreateNestedManyWithoutLeaseInput
    tenant?: TenantCreateNestedOneWithoutLeasesInput
    unit?: UnitCreateNestedOneWithoutLeasesInput
    expenses?: ExpenseCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleCreateNestedManyWithoutLeaseInput
  }

  export type LeaseUncheckedCreateWithoutRentPaymentsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    tenantId?: number | null
    unitId?: number | null
    documents?: DocumentUncheckedCreateNestedManyWithoutLeaseInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutLeaseInput
    paymentSchedule?: LeasePaymentScheduleUncheckedCreateNestedManyWithoutLeaseInput
  }

  export type LeaseCreateOrConnectWithoutRentPaymentsInput = {
    where: LeaseWhereUniqueInput
    create: XOR<LeaseCreateWithoutRentPaymentsInput, LeaseUncheckedCreateWithoutRentPaymentsInput>
  }

  export type TenantCreateWithoutRentPaymentsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    user?: UserCreateNestedOneWithoutTenantInput
    leases?: LeaseCreateNestedManyWithoutTenantInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutTenantInput
    unit?: UnitCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestCreateNestedManyWithoutReporterInput
  }

  export type TenantUncheckedCreateWithoutRentPaymentsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    civilStatus?: $Enums.CivilStatus | null
    occupation?: string | null
    income?: number | null
    creditScore?: number | null
    userId?: number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    leases?: LeaseUncheckedCreateNestedManyWithoutTenantInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutTenantInput
    unit?: UnitUncheckedCreateNestedManyWithoutTenantInput
    MaintenanceRequest?: MaintenanceRequestUncheckedCreateNestedManyWithoutReporterInput
  }

  export type TenantCreateOrConnectWithoutRentPaymentsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutRentPaymentsInput, TenantUncheckedCreateWithoutRentPaymentsInput>
  }

  export type LeaseUpsertWithoutRentPaymentsInput = {
    update: XOR<LeaseUpdateWithoutRentPaymentsInput, LeaseUncheckedUpdateWithoutRentPaymentsInput>
    create: XOR<LeaseCreateWithoutRentPaymentsInput, LeaseUncheckedCreateWithoutRentPaymentsInput>
    where?: LeaseWhereInput
  }

  export type LeaseUpdateToOneWithWhereWithoutRentPaymentsInput = {
    where?: LeaseWhereInput
    data: XOR<LeaseUpdateWithoutRentPaymentsInput, LeaseUncheckedUpdateWithoutRentPaymentsInput>
  }

  export type LeaseUpdateWithoutRentPaymentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    documents?: DocumentUpdateManyWithoutLeaseNestedInput
    tenant?: TenantUpdateOneWithoutLeasesNestedInput
    unit?: UnitUpdateOneWithoutLeasesNestedInput
    expenses?: ExpenseUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUpdateManyWithoutLeaseNestedInput
  }

  export type LeaseUncheckedUpdateWithoutRentPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    documents?: DocumentUncheckedUpdateManyWithoutLeaseNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUncheckedUpdateManyWithoutLeaseNestedInput
  }

  export type TenantUpsertWithoutRentPaymentsInput = {
    update: XOR<TenantUpdateWithoutRentPaymentsInput, TenantUncheckedUpdateWithoutRentPaymentsInput>
    create: XOR<TenantCreateWithoutRentPaymentsInput, TenantUncheckedCreateWithoutRentPaymentsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutRentPaymentsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutRentPaymentsInput, TenantUncheckedUpdateWithoutRentPaymentsInput>
  }

  export type TenantUpdateWithoutRentPaymentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutTenantNestedInput
    leases?: LeaseUpdateManyWithoutTenantNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutTenantNestedInput
    unit?: UnitUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUpdateManyWithoutReporterNestedInput
  }

  export type TenantUncheckedUpdateWithoutRentPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    civilStatus?: NullableEnumCivilStatusFieldUpdateOperationsInput | $Enums.CivilStatus | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableFloatFieldUpdateOperationsInput | number | null
    creditScore?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    leases?: LeaseUncheckedUpdateManyWithoutTenantNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutTenantNestedInput
    unit?: UnitUncheckedUpdateManyWithoutTenantNestedInput
    MaintenanceRequest?: MaintenanceRequestUncheckedUpdateManyWithoutReporterNestedInput
  }

  export type MaintenanceRequestCreateWithoutVendorInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    owner?: UserCreateNestedOneWithoutMaintenanceRequestsInput
    tenant?: TenantCreateNestedOneWithoutMaintenanceRequestsInput
    reporter?: TenantCreateNestedOneWithoutMaintenanceRequestInput
    unit?: UnitCreateNestedOneWithoutMaintenanceRequestsInput
    expenses?: ExpenseCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestUncheckedCreateWithoutVendorInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    unitId?: number | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestUncheckedCreateNestedManyWithoutRequestAInput
    linkedAsB?: LinkedRequestUncheckedCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestCreateOrConnectWithoutVendorInput = {
    where: MaintenanceRequestWhereUniqueInput
    create: XOR<MaintenanceRequestCreateWithoutVendorInput, MaintenanceRequestUncheckedCreateWithoutVendorInput>
  }

  export type MaintenanceRequestCreateManyVendorInputEnvelope = {
    data: MaintenanceRequestCreateManyVendorInput | MaintenanceRequestCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceRequestUpsertWithWhereUniqueWithoutVendorInput = {
    where: MaintenanceRequestWhereUniqueInput
    update: XOR<MaintenanceRequestUpdateWithoutVendorInput, MaintenanceRequestUncheckedUpdateWithoutVendorInput>
    create: XOR<MaintenanceRequestCreateWithoutVendorInput, MaintenanceRequestUncheckedCreateWithoutVendorInput>
  }

  export type MaintenanceRequestUpdateWithWhereUniqueWithoutVendorInput = {
    where: MaintenanceRequestWhereUniqueInput
    data: XOR<MaintenanceRequestUpdateWithoutVendorInput, MaintenanceRequestUncheckedUpdateWithoutVendorInput>
  }

  export type MaintenanceRequestUpdateManyWithWhereWithoutVendorInput = {
    where: MaintenanceRequestScalarWhereInput
    data: XOR<MaintenanceRequestUpdateManyMutationInput, MaintenanceRequestUncheckedUpdateManyWithoutVendorInput>
  }

  export type MaintenanceRequestCreateWithoutLinkedAsAInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    owner?: UserCreateNestedOneWithoutMaintenanceRequestsInput
    tenant?: TenantCreateNestedOneWithoutMaintenanceRequestsInput
    vendor?: VendorCreateNestedOneWithoutRequestsInput
    reporter?: TenantCreateNestedOneWithoutMaintenanceRequestInput
    unit?: UnitCreateNestedOneWithoutMaintenanceRequestsInput
    expenses?: ExpenseCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsB?: LinkedRequestCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestUncheckedCreateWithoutLinkedAsAInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    unitId?: number | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsB?: LinkedRequestUncheckedCreateNestedManyWithoutRequestBInput
  }

  export type MaintenanceRequestCreateOrConnectWithoutLinkedAsAInput = {
    where: MaintenanceRequestWhereUniqueInput
    create: XOR<MaintenanceRequestCreateWithoutLinkedAsAInput, MaintenanceRequestUncheckedCreateWithoutLinkedAsAInput>
  }

  export type MaintenanceRequestCreateWithoutLinkedAsBInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    owner?: UserCreateNestedOneWithoutMaintenanceRequestsInput
    tenant?: TenantCreateNestedOneWithoutMaintenanceRequestsInput
    vendor?: VendorCreateNestedOneWithoutRequestsInput
    reporter?: TenantCreateNestedOneWithoutMaintenanceRequestInput
    unit?: UnitCreateNestedOneWithoutMaintenanceRequestsInput
    expenses?: ExpenseCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestCreateNestedManyWithoutRequestAInput
  }

  export type MaintenanceRequestUncheckedCreateWithoutLinkedAsBInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    unitId?: number | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutMaintenanceRequestInput
    linkedAsA?: LinkedRequestUncheckedCreateNestedManyWithoutRequestAInput
  }

  export type MaintenanceRequestCreateOrConnectWithoutLinkedAsBInput = {
    where: MaintenanceRequestWhereUniqueInput
    create: XOR<MaintenanceRequestCreateWithoutLinkedAsBInput, MaintenanceRequestUncheckedCreateWithoutLinkedAsBInput>
  }

  export type MaintenanceRequestUpsertWithoutLinkedAsAInput = {
    update: XOR<MaintenanceRequestUpdateWithoutLinkedAsAInput, MaintenanceRequestUncheckedUpdateWithoutLinkedAsAInput>
    create: XOR<MaintenanceRequestCreateWithoutLinkedAsAInput, MaintenanceRequestUncheckedCreateWithoutLinkedAsAInput>
    where?: MaintenanceRequestWhereInput
  }

  export type MaintenanceRequestUpdateToOneWithWhereWithoutLinkedAsAInput = {
    where?: MaintenanceRequestWhereInput
    data: XOR<MaintenanceRequestUpdateWithoutLinkedAsAInput, MaintenanceRequestUncheckedUpdateWithoutLinkedAsAInput>
  }

  export type MaintenanceRequestUpdateWithoutLinkedAsAInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneWithoutMaintenanceRequestsNestedInput
    tenant?: TenantUpdateOneWithoutMaintenanceRequestsNestedInput
    vendor?: VendorUpdateOneWithoutRequestsNestedInput
    reporter?: TenantUpdateOneWithoutMaintenanceRequestNestedInput
    unit?: UnitUpdateOneWithoutMaintenanceRequestsNestedInput
    expenses?: ExpenseUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsB?: LinkedRequestUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateWithoutLinkedAsAInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: ExpenseUncheckedUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsB?: LinkedRequestUncheckedUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUpsertWithoutLinkedAsBInput = {
    update: XOR<MaintenanceRequestUpdateWithoutLinkedAsBInput, MaintenanceRequestUncheckedUpdateWithoutLinkedAsBInput>
    create: XOR<MaintenanceRequestCreateWithoutLinkedAsBInput, MaintenanceRequestUncheckedCreateWithoutLinkedAsBInput>
    where?: MaintenanceRequestWhereInput
  }

  export type MaintenanceRequestUpdateToOneWithWhereWithoutLinkedAsBInput = {
    where?: MaintenanceRequestWhereInput
    data: XOR<MaintenanceRequestUpdateWithoutLinkedAsBInput, MaintenanceRequestUncheckedUpdateWithoutLinkedAsBInput>
  }

  export type MaintenanceRequestUpdateWithoutLinkedAsBInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneWithoutMaintenanceRequestsNestedInput
    tenant?: TenantUpdateOneWithoutMaintenanceRequestsNestedInput
    vendor?: VendorUpdateOneWithoutRequestsNestedInput
    reporter?: TenantUpdateOneWithoutMaintenanceRequestNestedInput
    unit?: UnitUpdateOneWithoutMaintenanceRequestsNestedInput
    expenses?: ExpenseUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUpdateManyWithoutRequestANestedInput
  }

  export type MaintenanceRequestUncheckedUpdateWithoutLinkedAsBInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: ExpenseUncheckedUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUncheckedUpdateManyWithoutRequestANestedInput
  }

  export type UserCreateWithoutUsedCodesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    images?: ImageCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    tenant?: TenantCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitCreateNestedManyWithoutOwnersInput
  }

  export type UserUncheckedCreateWithoutUsedCodesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    firstName?: string | null
    lastName?: string | null
    name?: string | null
    dob?: Date | string | null
    currencyCode?: $Enums.CurrencyCode | null
    password: string
    salt: string
    plaidLinkToken?: string | null
    title?: string | null
    avatar?: string | null
    phone?: string | null
    website?: string | null
    company?: string | null
    bio?: string | null
    status?: $Enums.AccountStatus
    role?: $Enums.UserRole | null
    street?: string | null
    city?: string | null
    state?: string | null
    zip?: string | null
    country?: string | null
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
    images?: ImageUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    tenant?: TenantUncheckedCreateNestedOneWithoutUserInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutOwnerInput
    ownedUnits?: UnitUncheckedCreateNestedManyWithoutOwnersInput
  }

  export type UserCreateOrConnectWithoutUsedCodesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUsedCodesInput, UserUncheckedCreateWithoutUsedCodesInput>
  }

  export type UnitCreateWithoutOverwriteCodesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateCreateNestedManyWithoutUnitInput
    documents?: DocumentCreateNestedManyWithoutUnitInput
    images?: ImageCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestCreateNestedManyWithoutUnitInput
    realEstateObject: RealEstateObjectCreateNestedOneWithoutUnitsInput
    tenant?: TenantCreateNestedOneWithoutUnitInput
    leases?: LeaseCreateNestedManyWithoutUnitInput
    expenses?: ExpenseCreateNestedManyWithoutUnitInput
    owners?: UserCreateNestedManyWithoutOwnedUnitsInput
  }

  export type UnitUncheckedCreateWithoutOverwriteCodesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
    tenantId?: number | null
    amenities?: AmenitiesOnRealEstateUncheckedCreateNestedManyWithoutUnitInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUnitInput
    images?: ImageUncheckedCreateNestedManyWithoutUnitInput
    maintenanceRequests?: MaintenanceRequestUncheckedCreateNestedManyWithoutUnitInput
    leases?: LeaseUncheckedCreateNestedManyWithoutUnitInput
    expenses?: ExpenseUncheckedCreateNestedManyWithoutUnitInput
    owners?: UserUncheckedCreateNestedManyWithoutOwnedUnitsInput
  }

  export type UnitCreateOrConnectWithoutOverwriteCodesInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutOverwriteCodesInput, UnitUncheckedCreateWithoutOverwriteCodesInput>
  }

  export type UserUpsertWithoutUsedCodesInput = {
    update: XOR<UserUpdateWithoutUsedCodesInput, UserUncheckedUpdateWithoutUsedCodesInput>
    create: XOR<UserCreateWithoutUsedCodesInput, UserUncheckedCreateWithoutUsedCodesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUsedCodesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUsedCodesInput, UserUncheckedUpdateWithoutUsedCodesInput>
  }

  export type UserUpdateWithoutUsedCodesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUpdateManyWithoutOwnersNestedInput
  }

  export type UserUncheckedUpdateWithoutUsedCodesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUncheckedUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutOwnerNestedInput
    ownedUnits?: UnitUncheckedUpdateManyWithoutOwnersNestedInput
  }

  export type UnitUpsertWithWhereUniqueWithoutOverwriteCodesInput = {
    where: UnitWhereUniqueInput
    update: XOR<UnitUpdateWithoutOverwriteCodesInput, UnitUncheckedUpdateWithoutOverwriteCodesInput>
    create: XOR<UnitCreateWithoutOverwriteCodesInput, UnitUncheckedCreateWithoutOverwriteCodesInput>
  }

  export type UnitUpdateWithWhereUniqueWithoutOverwriteCodesInput = {
    where: UnitWhereUniqueInput
    data: XOR<UnitUpdateWithoutOverwriteCodesInput, UnitUncheckedUpdateWithoutOverwriteCodesInput>
  }

  export type UnitUpdateManyWithWhereWithoutOverwriteCodesInput = {
    where: UnitScalarWhereInput
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyWithoutOverwriteCodesInput>
  }

  export type TokenCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
  }

  export type DocumentCreateManyUserInput = {
    id?: number
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    realEstateObjectId?: number | null
    leaseId?: number | null
    unitId?: number | null
  }

  export type ImageCreateManyUserInput = {
    id?: number
    imageUrl: string
    createdAt?: Date | string
    realEstateObjectId?: number | null
    unitId?: number | null
  }

  export type MessageCreateManySenderInput = {
    id?: number
    content: JsonNullValueInput | InputJsonValue
    type: string
    timestamp?: Date | string
    receiverId: number
  }

  export type MessageCreateManyReceiverInput = {
    id?: number
    content: JsonNullValueInput | InputJsonValue
    type: string
    timestamp?: Date | string
    senderId: number
  }

  export type MaintenanceRequestCreateManyOwnerInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    unitId?: number | null
  }

  export type OverwriteCodeCreateManyUsedByInput = {
    id?: number
    code: string
    expiresAt: Date | string
    used?: boolean
  }

  export type TokenUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutUserInput = {
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObject?: RealEstateObjectUpdateOneWithoutDocumentsNestedInput
    lease?: LeaseUpdateOneWithoutDocumentsNestedInput
    unit?: UnitUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DocumentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ImageUpdateWithoutUserInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObject?: RealEstateObjectUpdateOneWithoutImagesNestedInput
    unit?: UnitUpdateOneWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ImageUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageUpdateWithoutSenderInput = {
    content?: JsonNullValueInput | InputJsonValue
    type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    receiverId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUpdateWithoutReceiverInput = {
    content?: JsonNullValueInput | InputJsonValue
    type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUncheckedUpdateManyWithoutReceiverInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    senderId?: IntFieldUpdateOperationsInput | number
  }

  export type MaintenanceRequestUpdateWithoutOwnerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneWithoutMaintenanceRequestsNestedInput
    vendor?: VendorUpdateOneWithoutRequestsNestedInput
    reporter?: TenantUpdateOneWithoutMaintenanceRequestNestedInput
    unit?: UnitUpdateOneWithoutMaintenanceRequestsNestedInput
    expenses?: ExpenseUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: ExpenseUncheckedUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUncheckedUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUncheckedUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UnitUpdateWithoutOwnersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutUnitNestedInput
    documents?: DocumentUpdateManyWithoutUnitNestedInput
    images?: ImageUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutUnitNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutUnitsNestedInput
    tenant?: TenantUpdateOneWithoutUnitNestedInput
    leases?: LeaseUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUpdateManyWithoutUnitNestedInput
    overwriteCodes?: OverwriteCodeUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateWithoutOwnersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUnitNestedInput
    images?: ImageUncheckedUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutUnitNestedInput
    leases?: LeaseUncheckedUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutUnitNestedInput
    overwriteCodes?: OverwriteCodeUncheckedUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateManyWithoutOwnersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OverwriteCodeUpdateWithoutUsedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    units?: UnitUpdateManyWithoutOverwriteCodesNestedInput
  }

  export type OverwriteCodeUncheckedUpdateWithoutUsedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    units?: UnitUncheckedUpdateManyWithoutOverwriteCodesNestedInput
  }

  export type OverwriteCodeUncheckedUpdateManyWithoutUsedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LeaseCreateManyTenantInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    unitId?: number | null
  }

  export type MaintenanceRequestCreateManyTenantInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    unitId?: number | null
  }

  export type RentPaymentCreateManyTenantInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    status?: $Enums.PaymentStatus | null
    notes?: string | null
    paymentMethod?: string | null
    submittedBy: number
    submissionDate?: Date | string | null
    approvalDate?: Date | string | null
    leaseId?: number | null
  }

  export type UnitCreateManyTenantInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    realEstateObjectId: number
  }

  export type MaintenanceRequestCreateManyReporterInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    unitId?: number | null
  }

  export type LeaseUpdateWithoutTenantInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    documents?: DocumentUpdateManyWithoutLeaseNestedInput
    unit?: UnitUpdateOneWithoutLeasesNestedInput
    expenses?: ExpenseUpdateManyWithoutLeaseNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUpdateManyWithoutLeaseNestedInput
  }

  export type LeaseUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    documents?: DocumentUncheckedUpdateManyWithoutLeaseNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutLeaseNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUncheckedUpdateManyWithoutLeaseNestedInput
  }

  export type LeaseUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MaintenanceRequestUpdateWithoutTenantInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneWithoutMaintenanceRequestsNestedInput
    vendor?: VendorUpdateOneWithoutRequestsNestedInput
    reporter?: TenantUpdateOneWithoutMaintenanceRequestNestedInput
    unit?: UnitUpdateOneWithoutMaintenanceRequestsNestedInput
    expenses?: ExpenseUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: ExpenseUncheckedUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUncheckedUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUncheckedUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RentPaymentUpdateWithoutTenantInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: IntFieldUpdateOperationsInput | number
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lease?: LeaseUpdateOneWithoutRentPaymentsNestedInput
  }

  export type RentPaymentUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: IntFieldUpdateOperationsInput | number
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RentPaymentUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: IntFieldUpdateOperationsInput | number
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UnitUpdateWithoutTenantInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutUnitNestedInput
    documents?: DocumentUpdateManyWithoutUnitNestedInput
    images?: ImageUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutUnitNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutUnitsNestedInput
    leases?: LeaseUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUpdateManyWithoutUnitNestedInput
    owners?: UserUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUnitNestedInput
    images?: ImageUncheckedUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutUnitNestedInput
    leases?: LeaseUncheckedUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutUnitNestedInput
    owners?: UserUncheckedUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUncheckedUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateManyWithoutTenantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
  }

  export type MaintenanceRequestUpdateWithoutReporterInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneWithoutMaintenanceRequestsNestedInput
    tenant?: TenantUpdateOneWithoutMaintenanceRequestsNestedInput
    vendor?: VendorUpdateOneWithoutRequestsNestedInput
    unit?: UnitUpdateOneWithoutMaintenanceRequestsNestedInput
    expenses?: ExpenseUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateWithoutReporterInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: ExpenseUncheckedUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUncheckedUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUncheckedUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateManyWithoutReporterInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ImageCreateManyRealEstateObjectInput = {
    id?: number
    imageUrl: string
    createdAt?: Date | string
    unitId?: number | null
    userId: number
  }

  export type AmenitiesOnRealEstateCreateManyRealEstateObjectInput = {
    amenityId: number
    assignedAt?: Date | string
    assignedBy: string
    unitId?: number | null
  }

  export type PreferencesOnRealEstateCreateManyRealEstateObjectInput = {
    preferenceId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type DocumentCreateManyRealEstateObjectInput = {
    id?: number
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    leaseId?: number | null
    unitId?: number | null
  }

  export type UnitCreateManyRealEstateObjectInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    unitIdentifier?: string | null
    unitNumber?: string | null
    floor?: number | null
    unitSize?: number | null
    numOfFloors?: number | null
    numOfRooms?: number | null
    numOfBedrooms?: number | null
    numOfBathrooms?: number | null
    garages?: number | null
    rentalPrice?: number | null
    currency?: $Enums.CurrencyCode | null
    status?: $Enums.ListingStatus | null
    tenantId?: number | null
  }

  export type ImageUpdateWithoutRealEstateObjectInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unit?: UnitUpdateOneWithoutImagesNestedInput
    user?: UserUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateWithoutRealEstateObjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ImageUncheckedUpdateManyWithoutRealEstateObjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AmenitiesOnRealEstateUpdateWithoutRealEstateObjectInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    amenity?: AmenityUpdateOneRequiredWithoutRealEstateObjectsNestedInput
    unit?: UnitUpdateOneWithoutAmenitiesNestedInput
  }

  export type AmenitiesOnRealEstateUncheckedUpdateWithoutRealEstateObjectInput = {
    amenityId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AmenitiesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectInput = {
    amenityId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PreferencesOnRealEstateUpdateWithoutRealEstateObjectInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    preference?: PreferenceUpdateOneRequiredWithoutRealEstateObjectsNestedInput
  }

  export type PreferencesOnRealEstateUncheckedUpdateWithoutRealEstateObjectInput = {
    preferenceId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type PreferencesOnRealEstateUncheckedUpdateManyWithoutRealEstateObjectInput = {
    preferenceId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUpdateWithoutRealEstateObjectInput = {
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
    lease?: LeaseUpdateOneWithoutDocumentsNestedInput
    unit?: UnitUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutRealEstateObjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DocumentUncheckedUpdateManyWithoutRealEstateObjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UnitUpdateWithoutRealEstateObjectInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutUnitNestedInput
    documents?: DocumentUpdateManyWithoutUnitNestedInput
    images?: ImageUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutUnitNestedInput
    tenant?: TenantUpdateOneWithoutUnitNestedInput
    leases?: LeaseUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUpdateManyWithoutUnitNestedInput
    owners?: UserUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateWithoutRealEstateObjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUnitNestedInput
    images?: ImageUncheckedUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutUnitNestedInput
    leases?: LeaseUncheckedUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutUnitNestedInput
    owners?: UserUncheckedUpdateManyWithoutOwnedUnitsNestedInput
    overwriteCodes?: OverwriteCodeUncheckedUpdateManyWithoutUnitsNestedInput
  }

  export type UnitUncheckedUpdateManyWithoutRealEstateObjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AmenitiesOnRealEstateCreateManyAmenityInput = {
    realEstateObjectId: number
    assignedAt?: Date | string
    assignedBy: string
    unitId?: number | null
  }

  export type AmenitiesOnRealEstateUpdateWithoutAmenityInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutAmenitiesNestedInput
    unit?: UnitUpdateOneWithoutAmenitiesNestedInput
  }

  export type AmenitiesOnRealEstateUncheckedUpdateWithoutAmenityInput = {
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AmenitiesOnRealEstateUncheckedUpdateManyWithoutAmenityInput = {
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PreferencesOnRealEstateCreateManyPreferenceInput = {
    realEstateObjectId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type PreferencesOnRealEstateUpdateWithoutPreferenceInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type PreferencesOnRealEstateUncheckedUpdateWithoutPreferenceInput = {
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type PreferencesOnRealEstateUncheckedUpdateManyWithoutPreferenceInput = {
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type AmenitiesOnRealEstateCreateManyUnitInput = {
    amenityId: number
    realEstateObjectId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type DocumentCreateManyUnitInput = {
    id?: number
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    realEstateObjectId?: number | null
    leaseId?: number | null
  }

  export type ImageCreateManyUnitInput = {
    id?: number
    imageUrl: string
    createdAt?: Date | string
    realEstateObjectId?: number | null
    userId: number
  }

  export type MaintenanceRequestCreateManyUnitInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorId?: number | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
  }

  export type LeaseCreateManyUnitInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate?: Date | string | null
    endDate?: Date | string | null
    rentalPrice?: number | null
    status?: $Enums.LeaseStatus | null
    paymentFrequency?: $Enums.PaymentFrequency | null
    notes?: string | null
    specialTerms?: string | null
    currency?: $Enums.CurrencyCode | null
    totalRentDue?: number | null
    rentPaid?: number | null
    tenantId?: number | null
  }

  export type ExpenseCreateManyUnitInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    leaseId?: number | null
    maintenanceRequestId?: number | null
  }

  export type AmenitiesOnRealEstateUpdateWithoutUnitInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    amenity?: AmenityUpdateOneRequiredWithoutRealEstateObjectsNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutAmenitiesNestedInput
  }

  export type AmenitiesOnRealEstateUncheckedUpdateWithoutUnitInput = {
    amenityId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitInput = {
    amenityId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUpdateWithoutUnitInput = {
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
    realEstateObject?: RealEstateObjectUpdateOneWithoutDocumentsNestedInput
    lease?: LeaseUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DocumentUncheckedUpdateManyWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ImageUpdateWithoutUnitInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObject?: RealEstateObjectUpdateOneWithoutImagesNestedInput
    user?: UserUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ImageUncheckedUpdateManyWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MaintenanceRequestUpdateWithoutUnitInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneWithoutMaintenanceRequestsNestedInput
    tenant?: TenantUpdateOneWithoutMaintenanceRequestsNestedInput
    vendor?: VendorUpdateOneWithoutRequestsNestedInput
    reporter?: TenantUpdateOneWithoutMaintenanceRequestNestedInput
    expenses?: ExpenseUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: ExpenseUncheckedUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUncheckedUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUncheckedUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateManyWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableIntFieldUpdateOperationsInput | number | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LeaseUpdateWithoutUnitInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    documents?: DocumentUpdateManyWithoutLeaseNestedInput
    tenant?: TenantUpdateOneWithoutLeasesNestedInput
    expenses?: ExpenseUpdateManyWithoutLeaseNestedInput
    rentPayments?: RentPaymentUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUpdateManyWithoutLeaseNestedInput
  }

  export type LeaseUncheckedUpdateWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    documents?: DocumentUncheckedUpdateManyWithoutLeaseNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutLeaseNestedInput
    rentPayments?: RentPaymentUncheckedUpdateManyWithoutLeaseNestedInput
    paymentSchedule?: LeasePaymentScheduleUncheckedUpdateManyWithoutLeaseNestedInput
  }

  export type LeaseUncheckedUpdateManyWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: NullableEnumLeaseStatusFieldUpdateOperationsInput | $Enums.LeaseStatus | null
    paymentFrequency?: NullableEnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    specialTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    totalRentDue?: NullableFloatFieldUpdateOperationsInput | number | null
    rentPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExpenseUpdateWithoutUnitInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    lease?: LeaseUpdateOneWithoutExpensesNestedInput
    maintenanceRequest?: MaintenanceRequestUpdateOneWithoutExpensesNestedInput
  }

  export type ExpenseUncheckedUpdateWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExpenseUncheckedUpdateManyWithoutUnitInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpdateWithoutOwnedUnitsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    images?: ImageUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutOwnerNestedInput
    usedCodes?: OverwriteCodeUpdateManyWithoutUsedByNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedUnitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
    images?: ImageUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    tenant?: TenantUncheckedUpdateOneWithoutUserNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutOwnerNestedInput
    usedCodes?: OverwriteCodeUncheckedUpdateManyWithoutUsedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutOwnedUnitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currencyCode?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    plaidLinkToken?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OverwriteCodeUpdateWithoutUnitsInput = {
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    usedBy?: UserUpdateOneWithoutUsedCodesNestedInput
  }

  export type OverwriteCodeUncheckedUpdateWithoutUnitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    usedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OverwriteCodeUncheckedUpdateManyWithoutUnitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    usedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DocumentCreateManyLeaseInput = {
    id?: number
    documentType: $Enums.DocumentType
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    realEstateObjectId?: number | null
    unitId?: number | null
  }

  export type ExpenseCreateManyLeaseInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    unitId?: number | null
    maintenanceRequestId?: number | null
  }

  export type RentPaymentCreateManyLeaseInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    status?: $Enums.PaymentStatus | null
    notes?: string | null
    paymentMethod?: string | null
    submittedBy: number
    submissionDate?: Date | string | null
    approvalDate?: Date | string | null
    tenantId?: number | null
  }

  export type LeasePaymentScheduleCreateManyLeaseInput = {
    createdAt?: Date | string
    id?: number
    dueDate: Date | string
    amountDue: number
    status?: $Enums.PaymentScheduleStatus
  }

  export type DocumentUpdateWithoutLeaseInput = {
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
    realEstateObject?: RealEstateObjectUpdateOneWithoutDocumentsNestedInput
    unit?: UnitUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutLeaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DocumentUncheckedUpdateManyWithoutLeaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    realEstateObjectId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExpenseUpdateWithoutLeaseInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: UnitUpdateOneWithoutExpensesNestedInput
    maintenanceRequest?: MaintenanceRequestUpdateOneWithoutExpensesNestedInput
  }

  export type ExpenseUncheckedUpdateWithoutLeaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExpenseUncheckedUpdateManyWithoutLeaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    maintenanceRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RentPaymentUpdateWithoutLeaseInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: IntFieldUpdateOperationsInput | number
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneWithoutRentPaymentsNestedInput
  }

  export type RentPaymentUncheckedUpdateWithoutLeaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: IntFieldUpdateOperationsInput | number
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RentPaymentUncheckedUpdateManyWithoutLeaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableEnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: IntFieldUpdateOperationsInput | number
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LeasePaymentScheduleUpdateWithoutLeaseInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentScheduleStatusFieldUpdateOperationsInput | $Enums.PaymentScheduleStatus
  }

  export type LeasePaymentScheduleUncheckedUpdateWithoutLeaseInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentScheduleStatusFieldUpdateOperationsInput | $Enums.PaymentScheduleStatus
  }

  export type LeasePaymentScheduleUncheckedUpdateManyWithoutLeaseInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    status?: EnumPaymentScheduleStatusFieldUpdateOperationsInput | $Enums.PaymentScheduleStatus
  }

  export type ExpenseCreateManyMaintenanceRequestInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title?: string | null
    description?: string | null
    amount?: number | null
    currency?: $Enums.CurrencyCode | null
    date?: Date | string | null
    category?: string | null
    status?: string | null
    notes?: string | null
    unitId?: number | null
    leaseId?: number | null
  }

  export type LinkedRequestCreateManyRequestAInput = {
    requestBId: number
  }

  export type LinkedRequestCreateManyRequestBInput = {
    requestAId: number
  }

  export type ExpenseUpdateWithoutMaintenanceRequestInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: UnitUpdateOneWithoutExpensesNestedInput
    lease?: LeaseUpdateOneWithoutExpensesNestedInput
  }

  export type ExpenseUncheckedUpdateWithoutMaintenanceRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExpenseUncheckedUpdateManyWithoutMaintenanceRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    leaseId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LinkedRequestUpdateWithoutRequestAInput = {
    requestB?: MaintenanceRequestUpdateOneRequiredWithoutLinkedAsBNestedInput
  }

  export type LinkedRequestUncheckedUpdateWithoutRequestAInput = {
    requestBId?: IntFieldUpdateOperationsInput | number
  }

  export type LinkedRequestUncheckedUpdateManyWithoutRequestAInput = {
    requestBId?: IntFieldUpdateOperationsInput | number
  }

  export type LinkedRequestUpdateWithoutRequestBInput = {
    requestA?: MaintenanceRequestUpdateOneRequiredWithoutLinkedAsANestedInput
  }

  export type LinkedRequestUncheckedUpdateWithoutRequestBInput = {
    requestAId?: IntFieldUpdateOperationsInput | number
  }

  export type LinkedRequestUncheckedUpdateManyWithoutRequestBInput = {
    requestAId?: IntFieldUpdateOperationsInput | number
  }

  export type MaintenanceRequestCreateManyVendorInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    title: string
    status?: $Enums.MaintenanceStatus | null
    priority?: $Enums.Priority | null
    ownerId?: number | null
    tenantId?: number | null
    notes?: string | null
    category: string
    categoryOther?: string | null
    pendingTagRequest?: boolean
    isHOAIssue?: boolean
    attachments?: MaintenanceRequestCreateattachmentsInput | string[]
    repairCost?: Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: string | null
    vendorAccepted?: boolean | null
    vendorRespondedAt?: Date | string | null
    lastNotificationAt?: Date | string | null
    reporterId?: number | null
    unitId?: number | null
  }

  export type MaintenanceRequestUpdateWithoutVendorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneWithoutMaintenanceRequestsNestedInput
    tenant?: TenantUpdateOneWithoutMaintenanceRequestsNestedInput
    reporter?: TenantUpdateOneWithoutMaintenanceRequestNestedInput
    unit?: UnitUpdateOneWithoutMaintenanceRequestsNestedInput
    expenses?: ExpenseUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
    expenses?: ExpenseUncheckedUpdateManyWithoutMaintenanceRequestNestedInput
    linkedAsA?: LinkedRequestUncheckedUpdateManyWithoutRequestANestedInput
    linkedAsB?: LinkedRequestUncheckedUpdateManyWithoutRequestBNestedInput
  }

  export type MaintenanceRequestUncheckedUpdateManyWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus | null
    priority?: NullableEnumPriorityFieldUpdateOperationsInput | $Enums.Priority | null
    ownerId?: NullableIntFieldUpdateOperationsInput | number | null
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    categoryOther?: NullableStringFieldUpdateOperationsInput | string | null
    pendingTagRequest?: BoolFieldUpdateOperationsInput | boolean
    isHOAIssue?: BoolFieldUpdateOperationsInput | boolean
    attachments?: MaintenanceRequestUpdateattachmentsInput | string[]
    repairCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    invoiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    vendorAccepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    vendorRespondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastNotificationAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reporterId?: NullableIntFieldUpdateOperationsInput | number | null
    unitId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UnitUpdateWithoutOverwriteCodesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    amenities?: AmenitiesOnRealEstateUpdateManyWithoutUnitNestedInput
    documents?: DocumentUpdateManyWithoutUnitNestedInput
    images?: ImageUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUpdateManyWithoutUnitNestedInput
    realEstateObject?: RealEstateObjectUpdateOneRequiredWithoutUnitsNestedInput
    tenant?: TenantUpdateOneWithoutUnitNestedInput
    leases?: LeaseUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUpdateManyWithoutUnitNestedInput
    owners?: UserUpdateManyWithoutOwnedUnitsNestedInput
  }

  export type UnitUncheckedUpdateWithoutOverwriteCodesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
    amenities?: AmenitiesOnRealEstateUncheckedUpdateManyWithoutUnitNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUnitNestedInput
    images?: ImageUncheckedUpdateManyWithoutUnitNestedInput
    maintenanceRequests?: MaintenanceRequestUncheckedUpdateManyWithoutUnitNestedInput
    leases?: LeaseUncheckedUpdateManyWithoutUnitNestedInput
    expenses?: ExpenseUncheckedUpdateManyWithoutUnitNestedInput
    owners?: UserUncheckedUpdateManyWithoutOwnedUnitsNestedInput
  }

  export type UnitUncheckedUpdateManyWithoutOverwriteCodesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    unitIdentifier?: NullableStringFieldUpdateOperationsInput | string | null
    unitNumber?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableIntFieldUpdateOperationsInput | number | null
    unitSize?: NullableFloatFieldUpdateOperationsInput | number | null
    numOfFloors?: NullableIntFieldUpdateOperationsInput | number | null
    numOfRooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    numOfBathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    garages?: NullableIntFieldUpdateOperationsInput | number | null
    rentalPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableEnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode | null
    status?: NullableEnumListingStatusFieldUpdateOperationsInput | $Enums.ListingStatus | null
    realEstateObjectId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}