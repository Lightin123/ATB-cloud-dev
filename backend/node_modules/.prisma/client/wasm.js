
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  name: 'name',
  dob: 'dob',
  currencyCode: 'currencyCode',
  password: 'password',
  salt: 'salt',
  plaidLinkToken: 'plaidLinkToken',
  title: 'title',
  avatar: 'avatar',
  phone: 'phone',
  website: 'website',
  company: 'company',
  bio: 'bio',
  status: 'status',
  role: 'role',
  street: 'street',
  city: 'city',
  state: 'state',
  zip: 'zip',
  country: 'country'
};

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  civilStatus: 'civilStatus',
  occupation: 'occupation',
  income: 'income',
  creditScore: 'creditScore',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type',
  emailToken: 'emailToken',
  valid: 'valid',
  expiration: 'expiration',
  userId: 'userId'
};

exports.Prisma.RealEstateObjectScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  description: 'description',
  lotSize: 'lotSize',
  yearBuilt: 'yearBuilt',
  realEstateType: 'realEstateType',
  marketPrice: 'marketPrice',
  currency: 'currency',
  street: 'street',
  city: 'city',
  state: 'state',
  zip: 'zip',
  country: 'country'
};

exports.Prisma.AmenityScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  description: 'description',
  category: 'category'
};

exports.Prisma.AmenitiesOnRealEstateScalarFieldEnum = {
  amenityId: 'amenityId',
  realEstateObjectId: 'realEstateObjectId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy',
  unitId: 'unitId'
};

exports.Prisma.PreferenceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  enabled: 'enabled'
};

exports.Prisma.PreferencesOnRealEstateScalarFieldEnum = {
  preferenceId: 'preferenceId',
  realEstateObjectId: 'realEstateObjectId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
};

exports.Prisma.UnitScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  unitIdentifier: 'unitIdentifier',
  unitNumber: 'unitNumber',
  floor: 'floor',
  unitSize: 'unitSize',
  numOfFloors: 'numOfFloors',
  numOfRooms: 'numOfRooms',
  numOfBedrooms: 'numOfBedrooms',
  numOfBathrooms: 'numOfBathrooms',
  garages: 'garages',
  rentalPrice: 'rentalPrice',
  currency: 'currency',
  status: 'status',
  realEstateObjectId: 'realEstateObjectId',
  tenantId: 'tenantId'
};

exports.Prisma.LeaseScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  startDate: 'startDate',
  endDate: 'endDate',
  rentalPrice: 'rentalPrice',
  status: 'status',
  paymentFrequency: 'paymentFrequency',
  notes: 'notes',
  specialTerms: 'specialTerms',
  currency: 'currency',
  totalRentDue: 'totalRentDue',
  rentPaid: 'rentPaid',
  tenantId: 'tenantId',
  unitId: 'unitId'
};

exports.Prisma.LeasePaymentScheduleScalarFieldEnum = {
  createdAt: 'createdAt',
  id: 'id',
  dueDate: 'dueDate',
  amountDue: 'amountDue',
  status: 'status',
  leaseId: 'leaseId'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  realEstateObjectId: 'realEstateObjectId',
  unitId: 'unitId',
  userId: 'userId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  documentType: 'documentType',
  filePath: 'filePath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  realEstateObjectId: 'realEstateObjectId',
  leaseId: 'leaseId',
  unitId: 'unitId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  timestamp: 'timestamp',
  senderId: 'senderId',
  receiverId: 'receiverId'
};

exports.Prisma.MaintenanceRequestScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt',
  title: 'title',
  status: 'status',
  priority: 'priority',
  ownerId: 'ownerId',
  tenantId: 'tenantId',
  notes: 'notes',
  category: 'category',
  categoryOther: 'categoryOther',
  pendingTagRequest: 'pendingTagRequest',
  isHOAIssue: 'isHOAIssue',
  attachments: 'attachments',
  repairCost: 'repairCost',
  invoiceUrl: 'invoiceUrl',
  vendorId: 'vendorId',
  vendorAccepted: 'vendorAccepted',
  vendorRespondedAt: 'vendorRespondedAt',
  lastNotificationAt: 'lastNotificationAt',
  reporterId: 'reporterId',
  unitId: 'unitId'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  description: 'description',
  amount: 'amount',
  currency: 'currency',
  date: 'date',
  category: 'category',
  status: 'status',
  notes: 'notes',
  unitId: 'unitId',
  leaseId: 'leaseId',
  maintenanceRequestId: 'maintenanceRequestId'
};

exports.Prisma.RentPaymentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  amount: 'amount',
  currency: 'currency',
  date: 'date',
  status: 'status',
  notes: 'notes',
  paymentMethod: 'paymentMethod',
  submittedBy: 'submittedBy',
  submissionDate: 'submissionDate',
  approvalDate: 'approvalDate',
  leaseId: 'leaseId',
  tenantId: 'tenantId'
};

exports.Prisma.ContactRequestScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  boardPositions: 'boardPositions',
  communityName: 'communityName',
  communityLocation: 'communityLocation',
  communityDescription: 'communityDescription',
  referralSource: 'referralSource',
  numberOfUnits: 'numberOfUnits',
  propertyType: 'propertyType'
};

exports.Prisma.WhitelistedUserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  createdAt: 'createdAt'
};

exports.Prisma.LinkedRequestScalarFieldEnum = {
  requestAId: 'requestAId',
  requestBId: 'requestBId'
};

exports.Prisma.OverwriteCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  expiresAt: 'expiresAt',
  used: 'used',
  usedById: 'usedById'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CurrencyCode = exports.$Enums.CurrencyCode = {
  USD: 'USD',
  CAD: 'CAD',
  EUR: 'EUR',
  GBP: 'GBP',
  AUD: 'AUD',
  NZD: 'NZD',
  JPY: 'JPY',
  CNY: 'CNY',
  INR: 'INR',
  RUB: 'RUB',
  BRL: 'BRL',
  CHF: 'CHF',
  KRW: 'KRW',
  MXN: 'MXN',
  SGD: 'SGD',
  TRY: 'TRY',
  NGN: 'NGN',
  PHP: 'PHP',
  SEK: 'SEK',
  ARS: 'ARS',
  NOK: 'NOK',
  DKK: 'DKK',
  ILS: 'ILS',
  CLP: 'CLP',
  COP: 'COP',
  ZAR: 'ZAR',
  HKD: 'HKD',
  TWD: 'TWD',
  PLN: 'PLN',
  THB: 'THB',
  IDR: 'IDR',
  HUF: 'HUF',
  CZK: 'CZK',
  AED: 'AED',
  SAR: 'SAR',
  MYR: 'MYR',
  RON: 'RON',
  PEN: 'PEN',
  KWD: 'KWD',
  QAR: 'QAR',
  CRC: 'CRC',
  DOP: 'DOP',
  HRK: 'HRK',
  HNL: 'HNL',
  ISK: 'ISK',
  PKR: 'PKR',
  EGP: 'EGP',
  XCD: 'XCD',
  MAD: 'MAD',
  OMR: 'OMR',
  BOB: 'BOB',
  LKR: 'LKR',
  BGN: 'BGN',
  BHD: 'BHD',
  VND: 'VND',
  UAH: 'UAH',
  IQD: 'IQD',
  JOD: 'JOD',
  BDT: 'BDT',
  KES: 'KES',
  UYU: 'UYU',
  AZN: 'AZN',
  LBP: 'LBP',
  DZD: 'DZD',
  UZS: 'UZS',
  TND: 'TND',
  GHS: 'GHS',
  BWP: 'BWP',
  TZS: 'TZS',
  BYN: 'BYN',
  KZT: 'KZT',
  RSD: 'RSD',
  TTD: 'TTD',
  UGX: 'UGX',
  AOA: 'AOA',
  COPPER: 'COPPER',
  XAU: 'XAU',
  XAG: 'XAG',
  XPD: 'XPD',
  XPT: 'XPT',
  XDR: 'XDR',
  XOF: 'XOF',
  XPF: 'XPF',
  XAF: 'XAF',
  XFU: 'XFU',
  XBA: 'XBA',
  XBB: 'XBB',
  XBC: 'XBC',
  XBD: 'XBD',
  XTS: 'XTS',
  XXX: 'XXX',
  ZMW: 'ZMW'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  INACTIVE: 'INACTIVE',
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE'
};

exports.UserRole = exports.$Enums.UserRole = {
  TENANT: 'TENANT',
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  GUEST: 'GUEST'
};

exports.CivilStatus = exports.$Enums.CivilStatus = {
  SINGLE: 'SINGLE',
  MARRIED: 'MARRIED',
  DIVORCED: 'DIVORCED',
  WIDOWED: 'WIDOWED',
  SEPARATED: 'SEPARATED',
  OTHER: 'OTHER'
};

exports.TokenType = exports.$Enums.TokenType = {
  API: 'API',
  EMAIL: 'EMAIL',
  PASSWORD_RESET: 'PASSWORD_RESET',
  EMAIL_CONFIRMATION: 'EMAIL_CONFIRMATION',
  EMAIL_CHANGE: 'EMAIL_CHANGE'
};

exports.RealEstateType = exports.$Enums.RealEstateType = {
  SINGLE_FAMILY_HOME: 'SINGLE_FAMILY_HOME',
  MULTI_FAMILY_HOME: 'MULTI_FAMILY_HOME',
  CONDO: 'CONDO',
  APARTMENT: 'APARTMENT',
  TOWNHOUSE: 'TOWNHOUSE',
  LUXURY: 'LUXURY',
  OFFICE: 'OFFICE',
  RETAIL: 'RETAIL',
  INDUSTRIAL: 'INDUSTRIAL',
  LAND: 'LAND',
  FARM: 'FARM'
};

exports.AmenityCategory = exports.$Enums.AmenityCategory = {
  RECREATIONAL: 'RECREATIONAL',
  TECHNICAL: 'TECHNICAL',
  SERVICE: 'SERVICE',
  SAFETY: 'SAFETY',
  OTHER: 'OTHER'
};

exports.ListingStatus = exports.$Enums.ListingStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  RENTED: 'RENTED',
  NOT_RENTED: 'NOT_RENTED',
  RESERVED: 'RESERVED',
  SOLD: 'SOLD',
  PENDING: 'PENDING',
  UNKNOWN: 'UNKNOWN'
};

exports.LeaseStatus = exports.$Enums.LeaseStatus = {
  ACTIVE: 'ACTIVE',
  PENDING: 'PENDING',
  EXPIRED: 'EXPIRED',
  TERMINATED: 'TERMINATED'
};

exports.PaymentFrequency = exports.$Enums.PaymentFrequency = {
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  ANNUALLY: 'ANNUALLY',
  WEEKLY: 'WEEKLY'
};

exports.PaymentScheduleStatus = exports.$Enums.PaymentScheduleStatus = {
  SCHEDULED: 'SCHEDULED',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  WAIVED: 'WAIVED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  LEASE: 'LEASE',
  APPLICATION: 'APPLICATION',
  OTHER: 'OTHER',
  INVOICE: 'INVOICE',
  REPORT: 'REPORT'
};

exports.MaintenanceStatus = exports.$Enums.MaintenanceStatus = {
  REPORTED: 'REPORTED',
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  VENDOR_ASSIGNED: 'VENDOR_ASSIGNED',
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  REPORTED: 'REPORTED',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Tenant: 'Tenant',
  Token: 'Token',
  RealEstateObject: 'RealEstateObject',
  Amenity: 'Amenity',
  AmenitiesOnRealEstate: 'AmenitiesOnRealEstate',
  Preference: 'Preference',
  PreferencesOnRealEstate: 'PreferencesOnRealEstate',
  Unit: 'Unit',
  Lease: 'Lease',
  LeasePaymentSchedule: 'LeasePaymentSchedule',
  Image: 'Image',
  Document: 'Document',
  Message: 'Message',
  MaintenanceRequest: 'MaintenanceRequest',
  Expense: 'Expense',
  RentPayment: 'RentPayment',
  ContactRequest: 'ContactRequest',
  WhitelistedUser: 'WhitelistedUser',
  Vendor: 'Vendor',
  LinkedRequest: 'LinkedRequest',
  OverwriteCode: 'OverwriteCode'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
